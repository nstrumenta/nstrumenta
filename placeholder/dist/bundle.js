/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={453:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.deserializeByteBuffer=e.deserializeWireMessage=e.deserializeBlob=e.makeBusMessageFromBuffer=e.makeBusMessageFromJsonObject=e.BusMessageType=e.BusMessage=void 0;const n=i(r(546));class s extends n.default{}var o;e.BusMessage=s,function(t){t[t.BUS_MESSAGE_TYPES_BEGIN=100]="BUS_MESSAGE_TYPES_BEGIN",t[t.Json=101]="Json",t[t.Buffer=102]="Buffer",t[t.BUS_MESSAGE_TYPES_END=103]="BUS_MESSAGE_TYPES_END"}(o=e.BusMessageType||(e.BusMessageType={})),e.makeBusMessageFromJsonObject=(t,e)=>(new n.default).writeUint32(o.Json).writeIString(t).writeIString(JSON.stringify(e)).flip().toBuffer(),e.makeBusMessageFromBuffer=(t,e)=>(new n.default).writeUint32(o.Buffer).writeIString(t).append(e).flip().toBuffer(),e.deserializeBlob=async t=>{const r=await t.arrayBuffer(),i=new n.default(r.byteLength);return new Uint8Array(r).forEach((t=>{i.writeUint8(t)})),i.flip(),(0,e.deserializeByteBuffer)(i)},e.deserializeWireMessage=t=>{if(t instanceof ArrayBuffer){const r=new n.default(t.byteLength);return new Uint8Array(t).forEach((t=>{r.writeUint8(t)})),r.flip(),(0,e.deserializeByteBuffer)(r)}{const r=new n.default(t.byteLength);return r.buffer=t,(0,e.deserializeByteBuffer)(r)}},e.deserializeByteBuffer=t=>{const e=t.readInt32();if(e<=o.BUS_MESSAGE_TYPES_BEGIN||e>=o.BUS_MESSAGE_TYPES_END)throw`unknown busMessageType ${e}: ${t}`;const r=t.readIString();let i;switch(e){case o.Json:i=JSON.parse(t.readIString());break;case o.Buffer:i=t.buffer.slice(t.offset)}return{channel:r,busMessageType:e,contents:i}}},919:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.NstrumentaClient=e.ClientStatus=void 0;const n=r(453),s=r(982),o=i(r(206)),f=r(308);var a;!function(t){t[t.INIT=0]="INIT",t[t.READY=1]="READY",t[t.CONNECTED=2]="CONNECTED",t[t.DISCONNECTED=3]="DISCONNECTED",t[t.CONNECTING=4]="CONNECTING",t[t.ERROR=5]="ERROR"}(a=e.ClientStatus||(e.ClientStatus={})),e.NstrumentaClient=class{constructor(){this.ws=null,this.apiKey=null,this.reconnection={hasVerified:!1,attempts:0},this.connection={status:a.INIT},this.listeners=new Map,this.subscriptions=new Map,this.messageBuffer=[],this.addSubscription=this.addSubscription.bind(this),this.addListener=this.addListener.bind(this),this.connect=this.connect.bind(this)}async connect(t){const{nodeWebSocket:e,wsUrl:r,apiKey:i}=t;if(this.reconnection.attempts>100)throw new Error("Too many reconnection attempts, stopping");const o=i||{NSTRUMENTA_LOCAL:!1}.NSTRUMENTA_API_KEY;if(!o)throw new Error('nstrumenta api key is missing, pass it as an argument to NstrumentaClient.connect({apiKey: "your key"}) for javascript clients in the browser, or set the NSTRUMENTA_API_KEY environment variable get a key from your nstrumenta project settings https://nstrumenta.com/projects/ *your projectId here* /settings');let f;try{f=await(0,s.getToken)(o)}catch(t){return void console.error(t.message)}return this.apiKey=o,this.ws=e?new e(r):new WebSocket(r),this.ws.binaryType="arraybuffer",this.ws.addEventListener("open",(async()=>{var t;console.log(`client websocket opened <${r}>`),null===(t=this.ws)||void 0===t||t.send(f),this.reconnection.attempts=0,this.connection.status=a.CONNECTING})),this.ws.addEventListener("close",(e=>{var i;this.connection.status=a.DISCONNECTED,null===(i=this.listeners.get("close"))||void 0===i||i.forEach((t=>t())),console.log(`client websocket closed ${r} code:${e.code} wasClean:${e.wasClean}`),this.subscriptions.clear(),this.reconnection.hasVerified&&(setTimeout((()=>{console.log(`attempting to reconnect, attempts: ${this.reconnection.attempts}`),this.connect(t)}),this.rollOff(this.reconnection.attempts)),this.reconnection.attempts+=1)})),this.ws.addEventListener("error",(t=>{console.log("Error in websocket connection"),this.connection.status=a.ERROR})),this.ws.addEventListener("message",(t=>{var e,r;const i=t.data;let s;try{s=(0,n.deserializeWireMessage)(i)}catch(t){return void console.log(`Couldn't deserialize message ${JSON.stringify(t)}`)}const{channel:o,busMessageType:f,contents:h}=s;if("_nstrumenta"==o){const{verified:t,error:r}=h;r&&console.error(r),t&&(this.connection.status=a.CONNECTED,this.reconnection.hasVerified=!0,null===(e=this.listeners.get("open"))||void 0===e||e.forEach((t=>t())),this.messageBuffer.forEach((t=>{var e;null===(e=this.ws)||void 0===e||e.send(t)})),this.messageBuffer=[])}null===(r=this.subscriptions.get(o))||void 0===r||r.forEach((t=>{t(h)}))})),this.connection}rollOff(t){return 0==t?0:Math.min(1e3*Math.pow(t,2),18e5)}send(t,e){this.bufferedSend((0,n.makeBusMessageFromJsonObject)(t,e))}sendBuffer(t,e){this.bufferedSend((0,n.makeBusMessageFromBuffer)(t,e))}bufferedSend(t){var e,r,i;(null===(e=this.ws)||void 0===e?void 0:e.readyState)!==(null===(r=this.ws)||void 0===r?void 0:r.OPEN)?(console.log("adding to messageBuffer, length:",this.messageBuffer.length),this.messageBuffer.push(t)):null===(i=this.ws)||void 0===i||i.send(t)}addSubscription(t,e){console.log(`Nstrumenta client subscribe <${t}>`);const r=this.subscriptions.get(t)||[];r.push(e),this.subscriptions.set(t,r),this.bufferedSend((0,n.makeBusMessageFromJsonObject)("_command",{command:"subscribe",channel:t}))}addListener(t,e){this.listeners.get(t)||this.listeners.set(t,[]);const r=this.listeners.get(t);r&&r.push(e)}async uploadData(t,e){var r;const i=`data/${Date.now()}`,n=t.size;let s;s=null===(r=(await o.default.post(f.endpoints.GET_UPLOAD_URL,{path:i,size:n,meta:e},{headers:{contentType:"application/json","x-api-key":this.apiKey}})).data)||void 0===r?void 0:r.uploadUrl,await o.default.put(s,t,{maxBodyLength:1/0,maxContentLength:1/0,headers:{contentType:"application/octet-stream",contentLength:`${n}`,contentLengthRange:`bytes 0-${n-1}/${n}`}})}}},550:(t,e,r)=>{"use strict";e.DF=void 0;r(453);var i=r(919);Object.defineProperty(e,"DF",{enumerable:!0,get:function(){return i.NstrumentaClient}})},982:function(t,e,r){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.verifyToken=e.getToken=void 0;const n=i(r(206)),s=r(308);e.getToken=async t=>{const e={"x-api-key":t,"Content-Type":"application/json"};try{const{data:t}=await n.default.get(s.endpoints.GET_TOKEN,{headers:e});return t.token}catch(t){throw new Error("Problem getting token, check api key")}},e.verifyToken=async({token:t,apiKey:e,allowCrossProjectApiKey:r})=>{const i={"x-api-key":e,"Content-Type":"application/json"};try{return await n.default.post(s.endpoints.VERIFY_TOKEN,{token:t,allowCrossProjectApiKey:r},{headers:i}),!0}catch(t){const e="Failed to verify token";throw console.log(e),t}}},308:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.endpoints=e.DEFAULT_HOST_PORT=void 0,e.DEFAULT_HOST_PORT="8088";const r="https://us-central1-macro-coil-194519.cloudfunctions.net";e.endpoints={GET_MACHINES:`${r}/getMachines`,GET_UPLOAD_URL:`${r}/getUploadUrl`,REGISTER_AGENT:`${r}/registerAgent`,LIST_AGENTS:`${r}/listAgents`,SET_AGENT_ACTION:`${r}/setAgentAction`,GET_AGENT_ID_BY_TAG:`${r}/getAgentIdByTag`,CLEAN_AGENT_ACTIONS:`${r}/cleanAgentActions`,GET_DOWNLOAD_URL:`${r}/getDownloadUrl`,LIST_MODULES:`${r}/listModules`,GET_TOKEN:`${r}/getToken`,VERIFY_TOKEN:`${r}/verifyToken`,SET_STORAGE_OBJECT:`${r}/setStorageObject`}},206:(t,e,r)=>{t.exports=r(57)},387:(t,e,r)=>{"use strict";var i=r(485),n=r(570),s=r(940),o=r(581),f=r(574),a=r(845),h=r(338),u=r(524);t.exports=function(t){return new Promise((function(e,r){var l=t.data,c=t.headers,g=t.responseType;i.isFormData(l)&&delete c["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",v=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";c.Authorization="Basic "+btoa(p+":"+v)}var w=f(t.baseURL,t.url);function y(){if(d){var i="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,s={data:g&&"text"!==g&&"json"!==g?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:i,config:t,request:d};n(e,r,s),d=null}}if(d.open(t.method.toUpperCase(),o(w,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,"onloadend"in d?d.onloadend=y:d.onreadystatechange=function(){d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))&&setTimeout(y)},d.onabort=function(){d&&(r(u("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){r(u("Network Error",t,null,d)),d=null},d.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),r(u(e,t,t.transitional&&t.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",d)),d=null},i.isStandardBrowserEnv()){var b=(t.withCredentials||h(w))&&t.xsrfCookieName?s.read(t.xsrfCookieName):void 0;b&&(c[t.xsrfHeaderName]=b)}"setRequestHeader"in d&&i.forEach(c,(function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete c[e]:d.setRequestHeader(e,t)})),i.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),g&&"json"!==g&&(d.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),r(t),d=null)})),l||(l=null),d.send(l)}))}},57:(t,e,r)=>{"use strict";var i=r(485),n=r(875),s=r(29),o=r(941);function f(t){var e=new s(t),r=n(s.prototype.request,e);return i.extend(r,s.prototype,e),i.extend(r,e),r}var a=f(r(141));a.Axios=s,a.create=function(t){return f(o(a.defaults,t))},a.Cancel=r(132),a.CancelToken=r(603),a.isCancel=r(475),a.all=function(t){return Promise.all(t)},a.spread=r(739),a.isAxiosError=r(835),t.exports=a,t.exports.default=a},132:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},603:(t,e,r)=>{"use strict";var i=r(132);function n(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;t((function(t){r.reason||(r.reason=new i(t),e(r.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var t;return{token:new n((function(e){t=e})),cancel:t}},t.exports=n},475:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},29:(t,e,r)=>{"use strict";var i=r(485),n=r(581),s=r(96),o=r(9),f=r(941),a=r(144),h=a.validators;function u(t){this.defaults=t,this.interceptors={request:new s,response:new s}}u.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=f(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=t.transitional;void 0!==e&&a.assertOptions(e,{silentJSONParsing:h.transitional(h.boolean,"1.0.0"),forcedJSONParsing:h.transitional(h.boolean,"1.0.0"),clarifyTimeoutError:h.transitional(h.boolean,"1.0.0")},!1);var r=[],i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var n,s=[];if(this.interceptors.response.forEach((function(t){s.push(t.fulfilled,t.rejected)})),!i){var u=[o,void 0];for(Array.prototype.unshift.apply(u,r),u=u.concat(s),n=Promise.resolve(t);u.length;)n=n.then(u.shift(),u.shift());return n}for(var l=t;r.length;){var c=r.shift(),g=r.shift();try{l=c(l)}catch(t){g(t);break}}try{n=o(l)}catch(t){return Promise.reject(t)}for(;s.length;)n=n.then(s.shift(),s.shift());return n},u.prototype.getUri=function(t){return t=f(this.defaults,t),n(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(t){u.prototype[t]=function(e,r){return this.request(f(r||{},{method:t,url:e,data:(r||{}).data}))}})),i.forEach(["post","put","patch"],(function(t){u.prototype[t]=function(e,r,i){return this.request(f(i||{},{method:t,url:e,data:r}))}})),t.exports=u},96:(t,e,r)=>{"use strict";var i=r(485);function n(){this.handlers=[]}n.prototype.use=function(t,e,r){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},n.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},n.prototype.forEach=function(t){i.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=n},574:(t,e,r)=>{"use strict";var i=r(642),n=r(288);t.exports=function(t,e){return t&&!i(e)?n(t,e):e}},524:(t,e,r)=>{"use strict";var i=r(953);t.exports=function(t,e,r,n,s){var o=new Error(t);return i(o,e,r,n,s)}},9:(t,e,r)=>{"use strict";var i=r(485),n=r(212),s=r(475),o=r(141);function f(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return f(t),t.headers=t.headers||{},t.data=n.call(t,t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||o.adapter)(t).then((function(e){return f(t),e.data=n.call(t,e.data,e.headers,t.transformResponse),e}),(function(e){return s(e)||(f(t),e&&e.response&&(e.response.data=n.call(t,e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},953:t=>{"use strict";t.exports=function(t,e,r,i,n){return t.config=e,r&&(t.code=r),t.request=i,t.response=n,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},941:(t,e,r)=>{"use strict";var i=r(485);t.exports=function(t,e){e=e||{};var r={},n=["url","method","data"],s=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],f=["validateStatus"];function a(t,e){return i.isPlainObject(t)&&i.isPlainObject(e)?i.merge(t,e):i.isPlainObject(e)?i.merge({},e):i.isArray(e)?e.slice():e}function h(n){i.isUndefined(e[n])?i.isUndefined(t[n])||(r[n]=a(void 0,t[n])):r[n]=a(t[n],e[n])}i.forEach(n,(function(t){i.isUndefined(e[t])||(r[t]=a(void 0,e[t]))})),i.forEach(s,h),i.forEach(o,(function(n){i.isUndefined(e[n])?i.isUndefined(t[n])||(r[n]=a(void 0,t[n])):r[n]=a(void 0,e[n])})),i.forEach(f,(function(i){i in e?r[i]=a(t[i],e[i]):i in t&&(r[i]=a(void 0,t[i]))}));var u=n.concat(s).concat(o).concat(f),l=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===u.indexOf(t)}));return i.forEach(l,h),r}},570:(t,e,r)=>{"use strict";var i=r(524);t.exports=function(t,e,r){var n=r.config.validateStatus;r.status&&n&&!n(r.status)?e(i("Request failed with status code "+r.status,r.config,null,r.request,r)):t(r)}},212:(t,e,r)=>{"use strict";var i=r(485),n=r(141);t.exports=function(t,e,r){var s=this||n;return i.forEach(r,(function(r){t=r.call(s,t,e)})),t}},141:(t,e,r)=>{"use strict";var i=r(485),n=r(446),s=r(953),o={"Content-Type":"application/x-www-form-urlencoded"};function f(t,e){!i.isUndefined(t)&&i.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,h={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(a=r(387)),a),transformRequest:[function(t,e){return n(e,"Accept"),n(e,"Content-Type"),i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)?t:i.isArrayBufferView(t)?t.buffer:i.isURLSearchParams(t)?(f(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):i.isObject(t)||e&&"application/json"===e["Content-Type"]?(f(e,"application/json"),function(t,e,r){if(i.isString(t))try{return(0,JSON.parse)(t),i.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(0,JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){var e=this.transitional,r=e&&e.silentJSONParsing,n=e&&e.forcedJSONParsing,o=!r&&"json"===this.responseType;if(o||n&&i.isString(t)&&t.length)try{return JSON.parse(t)}catch(t){if(o){if("SyntaxError"===t.name)throw s(t,this,"E_JSON_PARSE");throw t}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};i.forEach(["delete","get","head"],(function(t){h.headers[t]={}})),i.forEach(["post","put","patch"],(function(t){h.headers[t]=i.merge(o)})),t.exports=h},875:t=>{"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),i=0;i<r.length;i++)r[i]=arguments[i];return t.apply(e,r)}}},581:(t,e,r)=>{"use strict";var i=r(485);function n(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var s;if(r)s=r(e);else if(i.isURLSearchParams(e))s=e.toString();else{var o=[];i.forEach(e,(function(t,e){null!=t&&(i.isArray(t)?e+="[]":t=[t],i.forEach(t,(function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),o.push(n(e)+"="+n(t))})))})),s=o.join("&")}if(s){var f=t.indexOf("#");-1!==f&&(t=t.slice(0,f)),t+=(-1===t.indexOf("?")?"?":"&")+s}return t}},288:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},940:(t,e,r)=>{"use strict";var i=r(485);t.exports=i.isStandardBrowserEnv()?{write:function(t,e,r,n,s,o){var f=[];f.push(t+"="+encodeURIComponent(e)),i.isNumber(r)&&f.push("expires="+new Date(r).toGMTString()),i.isString(n)&&f.push("path="+n),i.isString(s)&&f.push("domain="+s),!0===o&&f.push("secure"),document.cookie=f.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},642:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},835:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},338:(t,e,r)=>{"use strict";var i=r(485);t.exports=i.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function n(t){var i=t;return e&&(r.setAttribute("href",i),i=r.href),r.setAttribute("href",i),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=n(window.location.href),function(e){var r=i.isString(e)?n(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},446:(t,e,r)=>{"use strict";var i=r(485);t.exports=function(t,e){i.forEach(t,(function(r,i){i!==e&&i.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[i])}))}},845:(t,e,r)=>{"use strict";var i=r(485),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,s,o={};return t?(i.forEach(t.split("\n"),(function(t){if(s=t.indexOf(":"),e=i.trim(t.substr(0,s)).toLowerCase(),r=i.trim(t.substr(s+1)),e){if(o[e]&&n.indexOf(e)>=0)return;o[e]="set-cookie"===e?(o[e]?o[e]:[]).concat([r]):o[e]?o[e]+", "+r:r}})),o):o}},739:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},144:(t,e,r)=>{"use strict";var i=r(843),n={};["object","boolean","number","function","string","symbol"].forEach((function(t,e){n[t]=function(r){return typeof r===t||"a"+(e<1?"n ":" ")+t}}));var s={},o=i.version.split(".");function f(t,e){for(var r=e?e.split("."):o,i=t.split("."),n=0;n<3;n++){if(r[n]>i[n])return!0;if(r[n]<i[n])return!1}return!1}n.transitional=function(t,e,r){var n=e&&f(e);function o(t,e){return"[Axios v"+i.version+"] Transitional option '"+t+"'"+e+(r?". "+r:"")}return function(r,i,f){if(!1===t)throw new Error(o(i," has been removed in "+e));return n&&!s[i]&&(s[i]=!0,console.warn(o(i," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(r,i,f)}},t.exports={isOlderVersion:f,assertOptions:function(t,e,r){if("object"!=typeof t)throw new TypeError("options must be an object");for(var i=Object.keys(t),n=i.length;n-- >0;){var s=i[n],o=e[s];if(o){var f=t[s],a=void 0===f||o(f,s,t);if(!0!==a)throw new TypeError("option "+s+" must be "+a)}else if(!0!==r)throw Error("Unknown option "+s)}},validators:n}},485:(t,e,r)=>{"use strict";var i=r(875),n=Object.prototype.toString;function s(t){return"[object Array]"===n.call(t)}function o(t){return void 0===t}function f(t){return null!==t&&"object"==typeof t}function a(t){if("[object Object]"!==n.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function h(t){return"[object Function]"===n.call(t)}function u(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),s(t))for(var r=0,i=t.length;r<i;r++)e.call(null,t[r],r,t);else for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.call(null,t[n],n,t)}t.exports={isArray:s,isArrayBuffer:function(t){return"[object ArrayBuffer]"===n.call(t)},isBuffer:function(t){return null!==t&&!o(t)&&null!==t.constructor&&!o(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:f,isPlainObject:a,isUndefined:o,isDate:function(t){return"[object Date]"===n.call(t)},isFile:function(t){return"[object File]"===n.call(t)},isBlob:function(t){return"[object Blob]"===n.call(t)},isFunction:h,isStream:function(t){return f(t)&&h(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function t(){var e={};function r(r,i){a(e[i])&&a(r)?e[i]=t(e[i],r):a(r)?e[i]=t({},r):s(r)?e[i]=r.slice():e[i]=r}for(var i=0,n=arguments.length;i<n;i++)u(arguments[i],r);return e},extend:function(t,e,r){return u(e,(function(e,n){t[n]=r&&"function"==typeof e?i(e,r):e})),t},trim:function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},546:function(t,e,r){var i,n,s;n=[r(734)],i=function(t){"use strict";var e=function(t,r,n){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===r&&(r=e.DEFAULT_ENDIAN),void 0===n&&(n=e.DEFAULT_NOASSERT),!n){if((t|=0)<0)throw RangeError("Illegal capacity");r=!!r,n=!!n}this.buffer=0===t?i:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=r,this.noAssert=n};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var r=e.prototype;r.__isByteBuffer__,Object.defineProperty(r,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var i=new ArrayBuffer(0),n=String.fromCharCode;function s(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function o(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+n.apply(String,t);t.length+arguments.length>1024&&(e.push(n.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function f(t,e,r,i,n){var s,o,f=8*n-i-1,a=(1<<f)-1,h=a>>1,u=-7,l=r?n-1:0,c=r?-1:1,g=t[e+l];for(l+=c,s=g&(1<<-u)-1,g>>=-u,u+=f;u>0;s=256*s+t[e+l],l+=c,u-=8);for(o=s&(1<<-u)-1,s>>=-u,u+=i;u>0;o=256*o+t[e+l],l+=c,u-=8);if(0===s)s=1-h;else{if(s===a)return o?NaN:1/0*(g?-1:1);o+=Math.pow(2,i),s-=h}return(g?-1:1)*o*Math.pow(2,s-i)}function a(t,e,r,i,n,s){var o,f,a,h=8*s-n-1,u=(1<<h)-1,l=u>>1,c=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,g=i?0:s-1,d=i?1:-1,p=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(f=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-o))<1&&(o--,a*=2),(e+=o+l>=1?c/a:c*Math.pow(2,1-l))*a>=2&&(o++,a/=2),o+l>=u?(f=0,o=u):o+l>=1?(f=(e*a-1)*Math.pow(2,n),o+=l):(f=e*Math.pow(2,l-1)*Math.pow(2,n),o=0));n>=8;t[r+g]=255&f,g+=d,f/=256,n-=8);for(o=o<<n|f,h+=n;h>0;t[r+g]=255&o,g+=d,o/=256,h-=8);t[r+g-d]|=128*p}e.accessor=function(){return Uint8Array},e.allocate=function(t,r,i){return new e(t,r,i)},e.concat=function(t,r,i,n){"boolean"!=typeof r&&"string"==typeof r||(n=i,i=r,r=void 0);for(var s,o=0,f=0,a=t.length;f<a;++f)e.isByteBuffer(t[f])||(t[f]=e.wrap(t[f],r)),(s=t[f].limit-t[f].offset)>0&&(o+=s);if(0===o)return new e(0,i,n);var h,u=new e(o,i,n);for(f=0;f<a;)(s=(h=t[f++]).limit-h.offset)<=0||(u.view.set(h.view.subarray(h.offset,h.limit),u.offset),u.offset+=s);return u.limit=u.offset,u.offset=0,u},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,i,n,s){if("string"!=typeof i&&(s=n,n=i,i=void 0),"string"==typeof t)switch(void 0===i&&(i="utf8"),i){case"base64":return e.fromBase64(t,n);case"hex":return e.fromHex(t,n);case"binary":return e.fromBinary(t,n);case"utf8":return e.fromUTF8(t,n);case"debug":return e.fromDebug(t,n);default:throw Error("Unsupported encoding: "+i)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var o;if(e.isByteBuffer(t))return(o=r.clone.call(t)).markedOffset=-1,o;if(t instanceof Uint8Array)o=new e(0,n,s),t.length>0&&(o.buffer=t.buffer,o.offset=t.byteOffset,o.limit=t.byteOffset+t.byteLength,o.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)o=new e(0,n,s),t.byteLength>0&&(o.buffer=t,o.offset=0,o.limit=t.byteLength,o.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(o=new e(t.length,n,s)).limit=t.length;for(var f=0;f<t.length;++f)o.view[f]=t[f]}return o},r.writeBitSet=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i,n=e,s=t.length,o=s>>3,f=0;for(e+=this.writeVarint32(s,e);o--;)i=1&!!t[f++]|(1&!!t[f++])<<1|(1&!!t[f++])<<2|(1&!!t[f++])<<3|(1&!!t[f++])<<4|(1&!!t[f++])<<5|(1&!!t[f++])<<6|(1&!!t[f++])<<7,this.writeByte(i,e++);if(f<s){var a=0;for(i=0;f<s;)i|=(1&!!t[f++])<<a++;this.writeByte(i,e++)}return r?(this.offset=e,this):e-n},r.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var r,i=this.readVarint32(t),n=i.value,s=n>>3,o=0,f=[];for(t+=i.length;s--;)r=this.readByte(t++),f[o++]=!!(1&r),f[o++]=!!(2&r),f[o++]=!!(4&r),f[o++]=!!(8&r),f[o++]=!!(16&r),f[o++]=!!(32&r),f[o++]=!!(64&r),f[o++]=!!(128&r);if(o<n){var a=0;for(r=this.readByte(t++);o<n;)f[o++]=!!(r>>a++&1)}return e&&(this.offset=t),f},r.readBytes=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var i=this.slice(e,e+t);return r&&(this.offset+=t),i},r.writeBytes=r.append,r.writeInt8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeByte=r.writeInt8,r.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return 128==(128&r)&&(r=-(255-r+1)),e&&(this.offset+=1),r},r.readByte=r.readInt8,r.writeUint8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeUInt8=r.writeUint8,r.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return e&&(this.offset+=1),r},r.readUInt8=r.readUint8,r.writeInt16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeShort=r.writeInt16,r.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),32768==(32768&r)&&(r=-(65535-r+1)),e&&(this.offset+=2),r},r.readShort=r.readInt16,r.writeUint16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeUInt16=r.writeUint16,r.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),e&&(this.offset+=2),r},r.readUInt16=r.readUint16,r.writeInt32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeInt=r.writeInt32,r.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),r|=0,e&&(this.offset+=4),r},r.readInt=r.readInt32,r.writeUint32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeUInt32=r.writeUint32,r.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),e&&(this.offset+=4),r},r.readUInt32=r.readUint32,t&&(r.writeInt64=function(e,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var n=this.buffer.byteLength;r>n&&this.resize((n*=2)>r?n:r),r-=8;var s=e.low,o=e.high;return this.littleEndian?(this.view[r+3]=s>>>24&255,this.view[r+2]=s>>>16&255,this.view[r+1]=s>>>8&255,this.view[r]=255&s,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=s>>>24&255,this.view[r+1]=s>>>16&255,this.view[r+2]=s>>>8&255,this.view[r+3]=255&s),i&&(this.offset+=8),this},r.writeLong=r.writeInt64,r.readInt64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var i=0,n=0;this.littleEndian?(i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0,e+=4,n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0,e+=4,i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0);var s=new t(i,n,!1);return r&&(this.offset+=8),s},r.readLong=r.readInt64,r.writeUint64=function(e,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var n=this.buffer.byteLength;r>n&&this.resize((n*=2)>r?n:r),r-=8;var s=e.low,o=e.high;return this.littleEndian?(this.view[r+3]=s>>>24&255,this.view[r+2]=s>>>16&255,this.view[r+1]=s>>>8&255,this.view[r]=255&s,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=s>>>24&255,this.view[r+1]=s>>>16&255,this.view[r+2]=s>>>8&255,this.view[r+3]=255&s),i&&(this.offset+=8),this},r.writeUInt64=r.writeUint64,r.readUint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var i=0,n=0;this.littleEndian?(i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0,e+=4,n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0,e+=4,i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0);var s=new t(i,n,!0);return r&&(this.offset+=8),s},r.readUInt64=r.readUint64),r.writeFloat32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=4,a(this.view,t,e,this.littleEndian,23,4),r&&(this.offset+=4),this},r.writeFloat=r.writeFloat32,r.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=f(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),r},r.readFloat=r.readFloat32,r.writeFloat64=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=8,a(this.view,t,e,this.littleEndian,52,8),r&&(this.offset+=8),this},r.writeDouble=r.writeFloat64,r.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var r=f(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),r},r.readDouble=r.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},r.writeVarint32=function(t,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var n,s=e.calculateVarint32(t);r+=s;var o=this.buffer.byteLength;for(r>o&&this.resize((o*=2)>r?o:r),r-=s,t>>>=0;t>=128;)n=127&t|128,this.view[r++]=n,t>>>=7;return this.view[r++]=t,i?(this.offset=r,this):s},r.writeVarint32ZigZag=function(t,r){return this.writeVarint32(e.zigZagEncode32(t),r)},r.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,i=0,n=0;do{if(!this.noAssert&&t>this.limit){var s=Error("Truncated");throw s.truncated=!0,s}r=this.view[t++],i<5&&(n|=(127&r)<<7*i),++i}while(0!=(128&r));return n|=0,e?(this.offset=t,n):{value:n,length:i}},r.readVarint32ZigZag=function(t){var r=this.readVarint32(t);return"object"==typeof r?r.value=e.zigZagDecode32(r.value):r=e.zigZagDecode32(r),r},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var r=e.toInt()>>>0,i=e.shiftRightUnsigned(28).toInt()>>>0,n=e.shiftRightUnsigned(56).toInt()>>>0;return 0==n?0==i?r<16384?r<128?1:2:r<1<<21?3:4:i<16384?i<128?5:6:i<1<<21?7:8:n<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},r.writeVarint64=function(r,i){var n=void 0===i;if(n&&(i=this.offset),!this.noAssert){if("number"==typeof r)r=t.fromNumber(r);else if("string"==typeof r)r=t.fromString(r);else if(!(r&&r instanceof t))throw TypeError("Illegal value: "+r+" (not an integer or Long)");if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}"number"==typeof r?r=t.fromNumber(r,!1):"string"==typeof r?r=t.fromString(r,!1):!1!==r.unsigned&&(r=r.toSigned());var s=e.calculateVarint64(r),o=r.toInt()>>>0,f=r.shiftRightUnsigned(28).toInt()>>>0,a=r.shiftRightUnsigned(56).toInt()>>>0;i+=s;var h=this.buffer.byteLength;switch(i>h&&this.resize((h*=2)>i?h:i),i-=s,s){case 10:this.view[i+9]=a>>>7&1;case 9:this.view[i+8]=9!==s?128|a:127&a;case 8:this.view[i+7]=8!==s?f>>>21|128:f>>>21&127;case 7:this.view[i+6]=7!==s?f>>>14|128:f>>>14&127;case 6:this.view[i+5]=6!==s?f>>>7|128:f>>>7&127;case 5:this.view[i+4]=5!==s?128|f:127&f;case 4:this.view[i+3]=4!==s?o>>>21|128:o>>>21&127;case 3:this.view[i+2]=3!==s?o>>>14|128:o>>>14&127;case 2:this.view[i+1]=2!==s?o>>>7|128:o>>>7&127;case 1:this.view[i]=1!==s?128|o:127&o}return n?(this.offset+=s,this):s},r.writeVarint64ZigZag=function(t,r){return this.writeVarint64(e.zigZagEncode64(t),r)},r.readVarint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var i=e,n=0,s=0,o=0,f=0;if(n=127&(f=this.view[e++]),128&f&&(n|=(127&(f=this.view[e++]))<<7,(128&f||this.noAssert&&void 0===f)&&(n|=(127&(f=this.view[e++]))<<14,(128&f||this.noAssert&&void 0===f)&&(n|=(127&(f=this.view[e++]))<<21,(128&f||this.noAssert&&void 0===f)&&(s=127&(f=this.view[e++]),(128&f||this.noAssert&&void 0===f)&&(s|=(127&(f=this.view[e++]))<<7,(128&f||this.noAssert&&void 0===f)&&(s|=(127&(f=this.view[e++]))<<14,(128&f||this.noAssert&&void 0===f)&&(s|=(127&(f=this.view[e++]))<<21,(128&f||this.noAssert&&void 0===f)&&(o=127&(f=this.view[e++]),(128&f||this.noAssert&&void 0===f)&&(o|=(127&(f=this.view[e++]))<<7,128&f||this.noAssert&&void 0===f))))))))))throw Error("Buffer overrun");var a=t.fromBits(n|s<<28,s>>>4|o<<24,!1);return r?(this.offset=e,a):{value:a,length:e-i}},r.readVarint64ZigZag=function(r){var i=this.readVarint64(r);return i&&i.value instanceof t?i.value=e.zigZagDecode64(i.value):i=e.zigZagDecode64(i),i}),r.writeCString=function(t,e){var r=void 0===e;r&&(e=this.offset);var i,n=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(i=0;i<n;++i)if(0===t.charCodeAt(i))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}n=u.calculateUTF16asUTF8(s(t))[1],e+=n+1;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=n+1,u.encodeUTF16toUTF8(s(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,r?(this.offset=e,this):n},r.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,i=t,n=-1;return u.decodeUTF8toUTF16(function(){if(0===n)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(n=this.view[t++])?null:n}.bind(this),r=o(),!0),e?(this.offset=t,r()):{string:r(),length:t-i}},r.writeIString=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i,n=e;i=u.calculateUTF16asUTF8(s(t),this.noAssert)[1],e+=4+i;var o=this.buffer.byteLength;if(e>o&&this.resize((o*=2)>e?o:e),e-=4+i,this.littleEndian?(this.view[e+3]=i>>>24&255,this.view[e+2]=i>>>16&255,this.view[e+1]=i>>>8&255,this.view[e]=255&i):(this.view[e]=i>>>24&255,this.view[e+1]=i>>>16&255,this.view[e+2]=i>>>8&255,this.view[e+3]=255&i),e+=4,u.encodeUTF16toUTF8(s(t),function(t){this.view[e++]=t}.bind(this)),e!==n+4+i)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+i));return r?(this.offset=e,this):e-n},r.readIString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var i=t,n=this.readUint32(t),s=this.readUTF8String(n,e.METRICS_BYTES,t+=4);return t+=s.length,r?(this.offset=t,s.string):{string:s.string,length:t-i}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",r.writeUTF8String=function(t,e){var r,i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var n=e;r=u.calculateUTF16asUTF8(s(t))[1],e+=r;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=r,u.encodeUTF16toUTF8(s(t),function(t){this.view[e++]=t}.bind(this)),i?(this.offset=e,this):e-n},r.writeString=r.writeUTF8String,e.calculateUTF8Chars=function(t){return u.calculateUTF16asUTF8(s(t))[0]},e.calculateUTF8Bytes=function(t){return u.calculateUTF16asUTF8(s(t))[1]},e.calculateString=e.calculateUTF8Bytes,r.readUTF8String=function(t,r,i){"number"==typeof r&&(i=r,r=void 0);var n=void 0===i;if(n&&(i=this.offset),void 0===r&&(r=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}var s,f=0,a=i;if(r===e.METRICS_CHARS){if(s=o(),u.decodeUTF8(function(){return f<t&&i<this.limit?this.view[i++]:null}.bind(this),(function(t){++f,u.UTF8toUTF16(t,s)})),f!==t)throw RangeError("Illegal range: Truncated data, "+f+" == "+t);return n?(this.offset=i,s()):{string:s(),length:i-a}}if(r===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+"+t+") <= "+this.buffer.byteLength)}var h=i+t;if(u.decodeUTF8toUTF16(function(){return i<h?this.view[i++]:null}.bind(this),s=o(),this.noAssert),i!==h)throw RangeError("Illegal range: Truncated data, "+i+" == "+h);return n?(this.offset=i,s()):{string:s(),length:i-a}}throw TypeError("Unsupported metrics: "+r)},r.readString=r.readUTF8String,r.writeVString=function(t,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var n,o,f=r;n=u.calculateUTF16asUTF8(s(t),this.noAssert)[1],o=e.calculateVarint32(n),r+=o+n;var a=this.buffer.byteLength;if(r>a&&this.resize((a*=2)>r?a:r),r-=o+n,r+=this.writeVarint32(n,r),u.encodeUTF16toUTF8(s(t),function(t){this.view[r++]=t}.bind(this)),r!==f+n+o)throw RangeError("Illegal range: Truncated data, "+r+" == "+(r+n+o));return i?(this.offset=r,this):r-f},r.readVString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var i=t,n=this.readVarint32(t),s=this.readUTF8String(n.value,e.METRICS_BYTES,t+=n.length);return t+=s.length,r?(this.offset=t,s.string):{string:s.string,length:t-i}},r.append=function(t,r,i){"number"!=typeof r&&"string"==typeof r||(i=r,r=void 0);var n=void 0===i;if(n&&(i=this.offset),!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var s=t.limit-t.offset;if(s<=0)return this;i+=s;var o=this.buffer.byteLength;return i>o&&this.resize((o*=2)>i?o:i),i-=s,this.view.set(t.view.subarray(t.offset,t.limit),i),t.offset+=s,n&&(this.offset+=s),this},r.appendTo=function(t,e){return t.append(this,e),this},r.assert=function(t){return this.noAssert=!t,this},r.capacity=function(){return this.buffer.byteLength},r.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},r.clone=function(t){var r=new e(0,this.littleEndian,this.noAssert);return t?(r.buffer=new ArrayBuffer(this.buffer.byteLength),r.view=new Uint8Array(r.buffer)):(r.buffer=this.buffer,r.view=this.view),r.offset=this.offset,r.markedOffset=this.markedOffset,r.limit=this.limit,r},r.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var r=e-t;if(0===r)return this.buffer=i,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var n=new ArrayBuffer(r),s=new Uint8Array(n);return s.set(this.view.subarray(t,e)),this.buffer=n,this.view=s,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=r,this},r.copy=function(t,r){if(void 0===t&&(t=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,t<0||t>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+r+" <= "+this.buffer.byteLength)}if(t===r)return new e(0,this.littleEndian,this.noAssert);var i=r-t,n=new e(i,this.littleEndian,this.noAssert);return n.offset=0,n.limit=i,n.markedOffset>=0&&(n.markedOffset-=t),this.copyTo(n,0,t,r),n},r.copyTo=function(t,r,i,n){var s,o;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(r=(o=void 0===r)?t.offset:0|r,i=(s=void 0===i)?this.offset:0|i,n=void 0===n?this.limit:0|n,r<0||r>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+r+" <= "+t.buffer.byteLength);if(i<0||n>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+i+" <= "+this.buffer.byteLength);var f=n-i;return 0===f?t:(t.ensureCapacity(r+f),t.view.set(this.view.subarray(i,n),r),s&&(this.offset+=f),o&&(t.offset+=f),this)},r.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},r.fill=function(t,e,r){var i=void 0===e;if(i&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(e>=r)return this;for(;e<r;)this.view[e++]=t;return i&&(this.offset=e),this},r.flip=function(){return this.limit=this.offset,this.offset=0,this},r.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},r.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},r.LE=function(t){return this.littleEndian=void 0===t||!!t,this},r.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},r.prepend=function(t,r,i){"number"!=typeof r&&"string"==typeof r||(i=r,r=void 0);var n=void 0===i;if(n&&(i=this.offset),!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var s=t.limit-t.offset;if(s<=0)return this;var o=s-i;if(o>0){var f=new ArrayBuffer(this.buffer.byteLength+o),a=new Uint8Array(f);a.set(this.view.subarray(i,this.buffer.byteLength),s),this.buffer=f,this.view=a,this.offset+=o,this.markedOffset>=0&&(this.markedOffset+=o),this.limit+=o,i+=o}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),i-s),t.offset=t.limit,n&&(this.offset-=s),this},r.prependTo=function(t,e){return t.prepend(this,e),this},r.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},r.remaining=function(){return this.limit-this.offset},r.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},r.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),r=new Uint8Array(e);r.set(this.view),this.buffer=e,this.view=r}return this},r.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e||Array.prototype.reverse.call(this.view.subarray(t,e)),this},r.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},r.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r=this.clone();return r.offset=t,r.limit=e,r},r.toBuffer=function(t){var e=this.offset,r=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal limit: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(!t&&0===e&&r===this.buffer.byteLength)return this.buffer;if(e===r)return i;var n=new ArrayBuffer(r-e);return new Uint8Array(n).set(new Uint8Array(this.buffer).subarray(e,r),0),n},r.toArrayBuffer=r.toBuffer,r.toString=function(t,e,r){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(r=e=t="utf8"),t){case"utf8":return this.toUTF8(e,r);case"base64":return this.toBase64(e,r);case"hex":return this.toHex(e,r);case"binary":return this.toBinary(e,r);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var h=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],r=[],i=0,n=e.length;i<n;++i)r[e[i]]=i;return t.encode=function(t,r){for(var i,n;null!==(i=t());)r(e[i>>2&63]),n=(3&i)<<4,null!==(i=t())?(r(e[63&((n|=i>>4&15)|i>>4&15)]),n=(15&i)<<2,null!==(i=t())?(r(e[63&(n|i>>6&3)]),r(e[63&i])):(r(e[63&n]),r(61))):(r(e[63&n]),r(61),r(61))},t.decode=function(t,e){var i,n,s;function o(t){throw Error("Illegal character code: "+t)}for(;null!==(i=t());)if(void 0===(n=r[i])&&o(i),null!==(i=t())&&(void 0===(s=r[i])&&o(i),e(n<<2>>>0|(48&s)>>4),null!==(i=t()))){if(void 0===(n=r[i])){if(61===i)break;o(i)}if(e((15&s)<<4>>>0|(60&n)>>2),null!==(i=t())){if(void 0===(s=r[i])){if(61===i)break;o(i)}e((3&n)<<6>>>0|s)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();r.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var r;return h.encode(function(){return t<e?this.view[t++]:null}.bind(this),r=o()),r()},e.fromBase64=function(t,r){if("string"!=typeof t)throw TypeError("str");var i=new e(t.length/4*3,r),n=0;return h.decode(s(t),(function(t){i.view[n++]=t})),i.limit=n,i},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},r.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var r=[],i=[];t<e;)r.push(this.view[t++]),r.length>=1024&&(i.push(String.fromCharCode.apply(String,r)),r=[]);return i.join("")+String.fromCharCode.apply(String,r)},e.fromBinary=function(t,r){if("string"!=typeof t)throw TypeError("str");for(var i,n=0,s=t.length,o=new e(s,r);n<s;){if((i=t.charCodeAt(n))>255)throw RangeError("illegal char code: "+i);o.view[n++]=i}return o.limit=s,o},r.toDebug=function(t){for(var e,r=-1,i=this.buffer.byteLength,n="",s="",o="";r<i;){if(-1!==r&&(n+=(e=this.view[r])<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(s+=e>32&&e<127?String.fromCharCode(e):".")),++r,t&&r>0&&r%16==0&&r!==i){for(;n.length<51;)n+=" ";o+=n+s+"\n",n=s=""}r===this.offset&&r===this.limit?n+=r===this.markedOffset?"!":"|":r===this.offset?n+=r===this.markedOffset?"[":"<":r===this.limit?n+=r===this.markedOffset?"]":">":n+=r===this.markedOffset?"'":t||0!==r&&r!==i?" ":""}if(t&&" "!==n){for(;n.length<51;)n+=" ";o+=n+s+"\n"}return t?o:n},e.fromDebug=function(t,r,i){for(var n,s,o=t.length,f=new e((o+1)/3|0,r,i),a=0,h=0,u=!1,l=!1,c=!1,g=!1,d=!1;a<o;){switch(n=t.charAt(a++)){case"!":if(!i){if(l||c||g){d=!0;break}l=c=g=!0}f.offset=f.markedOffset=f.limit=h,u=!1;break;case"|":if(!i){if(l||g){d=!0;break}l=g=!0}f.offset=f.limit=h,u=!1;break;case"[":if(!i){if(l||c){d=!0;break}l=c=!0}f.offset=f.markedOffset=h,u=!1;break;case"<":if(!i){if(l){d=!0;break}l=!0}f.offset=h,u=!1;break;case"]":if(!i){if(g||c){d=!0;break}g=c=!0}f.limit=f.markedOffset=h,u=!1;break;case">":if(!i){if(g){d=!0;break}g=!0}f.limit=h,u=!1;break;case"'":if(!i){if(c){d=!0;break}c=!0}f.markedOffset=h,u=!1;break;case" ":u=!1;break;default:if(!i&&u){d=!0;break}if(s=parseInt(n+t.charAt(a++),16),!i&&(isNaN(s)||s<0||s>255))throw TypeError("Illegal str: Not a debug encoded string");f.view[h++]=s,u=!0}if(d)throw TypeError("Illegal str: Invalid symbol at "+a)}if(!i){if(!l||!g)throw TypeError("Illegal str: Missing offset or limit");if(h<f.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+h+" < "+o)}return f},r.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var r,i=new Array(e-t);t<e;)(r=this.view[t++])<16?i.push("0",r.toString(16)):i.push(r.toString(16));return i.join("")},e.fromHex=function(t,r,i){if(!i){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var n,s=t.length,o=new e(s/2|0,r),f=0,a=0;f<s;f+=2){if(n=parseInt(t.substring(f,f+2),16),!i&&(!isFinite(n)||n<0||n>255))throw TypeError("Illegal str: Contains non-hex characters");o.view[a++]=n}return o.limit=a,o};var u=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<128?e(127&r):r<2048?(e(r>>6&31|192),e(63&r|128)):r<65536?(e(r>>12&15|224),e(r>>6&63|128),e(63&r|128)):(e(r>>18&7|240),e(r>>12&63|128),e(r>>6&63|128),e(63&r|128)),r=null},decodeUTF8:function(t,e){for(var r,i,n,s,o=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(r=t());)if(0==(128&r))e(r);else if(192==(224&r))null===(i=t())&&o([r,i]),e((31&r)<<6|63&i);else if(224==(240&r))(null===(i=t())||null===(n=t()))&&o([r,i,n]),e((15&r)<<12|(63&i)<<6|63&n);else{if(240!=(248&r))throw RangeError("Illegal starting byte: "+r);(null===(i=t())||null===(n=t())||null===(s=t()))&&o([r,i,n,s]),e((7&r)<<18|(63&i)<<12|(63&n)<<6|63&s)}},UTF16toUTF8:function(t,e){for(var r,i=null;null!==(r=null!==i?i:t());)r>=55296&&r<=57343&&null!==(i=t())&&i>=56320&&i<=57343?(e(1024*(r-55296)+i-56320+65536),i=null):e(r);null!==i&&e(i)},UTF8toUTF16:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<=65535?e(r):(e(55296+((r-=65536)>>10)),e(r%1024+56320)),r=null},encodeUTF16toUTF8:function(e,r){t.UTF16toUTF8(e,(function(e){t.encodeUTF8(e,r)}))},decodeUTF8toUTF16:function(e,r){t.decodeUTF8(e,(function(e){t.UTF8toUTF16(e,r)}))},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,r=0;null!==(e=t());)r+=e<128?1:e<2048?2:e<65536?3:4;return r},calculateUTF16asUTF8:function(e){var r=0,i=0;return t.UTF16toUTF8(e,(function(t){++r,i+=t<128?1:t<2048?2:t<65536?3:4})),[r,i]}};return t}();return r.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r;try{u.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),r=o())}catch(r){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return r()},e.fromUTF8=function(t,r,i){if(!i&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var n=new e(u.calculateUTF16asUTF8(s(t),!0)[1],r,i),o=0;return u.encodeUTF16toUTF8(s(t),(function(t){n.view[o++]=t})),n.limit=o,n},e},void 0===(s=i.apply(e,n))||(t.exports=s)},734:function(t,e){var r,i;void 0===(i="function"==typeof(r=function(){"use strict";function t(t,e,r){this.low=0|t,this.high=0|e,this.unsigned=!!r}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var r={},i={};function n(t,e){var n,s,f;return e?(f=0<=(t>>>=0)&&t<256)&&(s=i[t])?s:(n=o(t,(0|t)<0?-1:0,!0),f&&(i[t]=n),n):(f=-128<=(t|=0)&&t<128)&&(s=r[t])?s:(n=o(t,t<0?-1:0,!1),f&&(r[t]=n),n)}function s(t,e){if(isNaN(t)||!isFinite(t))return e?p:d;if(e){if(t<0)return p;if(t>=l)return m}else{if(t<=-c)return E;if(t+1>=c)return b}return t<0?s(-t,e).neg():o(t%u|0,t/u|0,e)}function o(e,r,i){return new t(e,r,i)}t.fromInt=n,t.fromNumber=s,t.fromBits=o;var f=Math.pow;function a(t,e,r){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return d;if("number"==typeof e?(r=e,e=!1):e=!!e,(r=r||10)<2||36<r)throw RangeError("radix");var i;if((i=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===i)return a(t.substring(1),e,r).neg();for(var n=s(f(r,8)),o=d,h=0;h<t.length;h+=8){var u=Math.min(8,t.length-h),l=parseInt(t.substring(h,h+u),r);if(u<8){var c=s(f(r,u));o=o.mul(c).add(s(l))}else o=(o=o.mul(n)).add(s(l))}return o.unsigned=e,o}function h(e){return e instanceof t?e:"number"==typeof e?s(e):"string"==typeof e?a(e):o(e.low,e.high,e.unsigned)}t.fromString=a,t.fromValue=h;var u=4294967296,l=u*u,c=l/2,g=n(1<<24),d=n(0);t.ZERO=d;var p=n(0,!0);t.UZERO=p;var v=n(1);t.ONE=v;var w=n(1,!0);t.UONE=w;var y=n(-1);t.NEG_ONE=y;var b=o(-1,2147483647,!1);t.MAX_VALUE=b;var m=o(-1,-1,!0);t.MAX_UNSIGNED_VALUE=m;var E=o(0,-2147483648,!1);t.MIN_VALUE=E;var T=t.prototype;return T.toInt=function(){return this.unsigned?this.low>>>0:this.low},T.toNumber=function(){return this.unsigned?(this.high>>>0)*u+(this.low>>>0):this.high*u+(this.low>>>0)},T.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var e=s(t),r=this.div(e),i=r.mul(e).sub(this);return r.toString(t)+i.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var n=s(f(t,6),this.unsigned),o=this,a="";;){var h=o.div(n),u=(o.sub(h.mul(n)).toInt()>>>0).toString(t);if((o=h).isZero())return u+a;for(;u.length<6;)u="0"+u;a=""+u+a}},T.getHighBits=function(){return this.high},T.getHighBitsUnsigned=function(){return this.high>>>0},T.getLowBits=function(){return this.low},T.getLowBitsUnsigned=function(){return this.low>>>0},T.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},T.isZero=function(){return 0===this.high&&0===this.low},T.isNegative=function(){return!this.unsigned&&this.high<0},T.isPositive=function(){return this.unsigned||this.high>=0},T.isOdd=function(){return 1==(1&this.low)},T.isEven=function(){return 0==(1&this.low)},T.equals=function(t){return e(t)||(t=h(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},T.eq=T.equals,T.notEquals=function(t){return!this.eq(t)},T.neq=T.notEquals,T.lessThan=function(t){return this.comp(t)<0},T.lt=T.lessThan,T.lessThanOrEqual=function(t){return this.comp(t)<=0},T.lte=T.lessThanOrEqual,T.greaterThan=function(t){return this.comp(t)>0},T.gt=T.greaterThan,T.greaterThanOrEqual=function(t){return this.comp(t)>=0},T.gte=T.greaterThanOrEqual,T.compare=function(t){if(e(t)||(t=h(t)),this.eq(t))return 0;var r=this.isNegative(),i=t.isNegative();return r&&!i?-1:!r&&i?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},T.comp=T.compare,T.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(v)},T.neg=T.negate,T.add=function(t){e(t)||(t=h(t));var r=this.high>>>16,i=65535&this.high,n=this.low>>>16,s=65535&this.low,f=t.high>>>16,a=65535&t.high,u=t.low>>>16,l=0,c=0,g=0,d=0;return g+=(d+=s+(65535&t.low))>>>16,c+=(g+=n+u)>>>16,l+=(c+=i+a)>>>16,l+=r+f,o((g&=65535)<<16|(d&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},T.subtract=function(t){return e(t)||(t=h(t)),this.add(t.neg())},T.sub=T.subtract,T.multiply=function(t){if(this.isZero())return d;if(e(t)||(t=h(t)),t.isZero())return d;if(this.eq(E))return t.isOdd()?E:d;if(t.eq(E))return this.isOdd()?E:d;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(g)&&t.lt(g))return s(this.toNumber()*t.toNumber(),this.unsigned);var r=this.high>>>16,i=65535&this.high,n=this.low>>>16,f=65535&this.low,a=t.high>>>16,u=65535&t.high,l=t.low>>>16,c=65535&t.low,p=0,v=0,w=0,y=0;return w+=(y+=f*c)>>>16,v+=(w+=n*c)>>>16,w&=65535,v+=(w+=f*l)>>>16,p+=(v+=i*c)>>>16,v&=65535,p+=(v+=n*l)>>>16,v&=65535,p+=(v+=f*u)>>>16,p+=r*c+i*l+n*u+f*a,o((w&=65535)<<16|(y&=65535),(p&=65535)<<16|(v&=65535),this.unsigned)},T.mul=T.multiply,T.divide=function(t){if(e(t)||(t=h(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?p:d;var r,i,n;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return p;if(t.gt(this.shru(1)))return w;n=p}else{if(this.eq(E))return t.eq(v)||t.eq(y)?E:t.eq(E)?v:(r=this.shr(1).div(t).shl(1)).eq(d)?t.isNegative()?v:y:(i=this.sub(t.mul(r)),n=r.add(i.div(t)));if(t.eq(E))return this.unsigned?p:d;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();n=d}for(i=this;i.gte(t);){r=Math.max(1,Math.floor(i.toNumber()/t.toNumber()));for(var o=Math.ceil(Math.log(r)/Math.LN2),a=o<=48?1:f(2,o-48),u=s(r),l=u.mul(t);l.isNegative()||l.gt(i);)l=(u=s(r-=a,this.unsigned)).mul(t);u.isZero()&&(u=v),n=n.add(u),i=i.sub(l)}return n},T.div=T.divide,T.modulo=function(t){return e(t)||(t=h(t)),this.sub(this.div(t).mul(t))},T.mod=T.modulo,T.not=function(){return o(~this.low,~this.high,this.unsigned)},T.and=function(t){return e(t)||(t=h(t)),o(this.low&t.low,this.high&t.high,this.unsigned)},T.or=function(t){return e(t)||(t=h(t)),o(this.low|t.low,this.high|t.high,this.unsigned)},T.xor=function(t){return e(t)||(t=h(t)),o(this.low^t.low,this.high^t.high,this.unsigned)},T.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):o(0,this.low<<t-32,this.unsigned)},T.shl=T.shiftLeft,T.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):o(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},T.shr=T.shiftRight,T.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var r=this.high;return t<32?o(this.low>>>t|r<<32-t,r>>>t,this.unsigned):o(32===t?r:r>>>t-32,0,this.unsigned)},T.shru=T.shiftRightUnsigned,T.toSigned=function(){return this.unsigned?o(this.low,this.high,!1):this},T.toUnsigned=function(){return this.unsigned?this:o(this.low,this.high,!0)},T.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},T.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},T.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?r.apply(e,[]):r)||(t.exports=i)},843:t=>{"use strict";t.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')}},e={};function r(i){var n=e[i];if(void 0!==n)return n.exports;var s=e[i]={exports:{}};return t[i].call(s.exports,s,s.exports,r),s.exports}(()=>{"use strict";var t=r(550),e=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{a(i.next(t))}catch(t){s(t)}}function f(t){try{a(i.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,f)}a((i=i.apply(t,e||[])).next())}))},i=function(t,e){var r,i,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function f(s){return function(f){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,i&&(n=2&s[0]?i.return:s[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,s[1])).done)return n;switch(i=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,i=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((n=(n=o.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],i=0}finally{r=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,f])}}},n=new t.DF;document.addEventListener("readystatechange",(function(){return e(void 0,void 0,void 0,(function(){var t,r,s,o,f;return i(this,(function(a){switch(a.label){case 0:return t=document.getElementById("outputTextArea")||document,r=document.getElementById("host-status"),"complete"!==document.readyState?[2]:(n.addListener("open",(function(){console.log("yay subbed"),n.addSubscription("_nstrumenta",(function(e){switch(e.type){case"children":var i=e.children;if(!i||i.length<1)return;i.forEach((function(e){return n.addSubscription("".concat(e,"/stdout"),(function(r){console.log("[".concat(e,":stdout]"),r);var i=document.createElement("li");i.innerText="[".concat(e,"] ").concat(r),i.className="mdl-list__-item",t.appendChild(i)}))}));break;case"status":var s=e.status;r&&(r.innerText=s);break;case"health":document.getElementById("health").innerText+="*"}})),document.getElementById("send-data").addEventListener("click",(function(){return e(void 0,void 0,void 0,(function(){var t,e,r;return i(this,(function(i){switch(i.label){case 0:return(t=document.getElementById("data"))?(e=t.value,r=new Blob([e]),[4,n.uploadData(r,{some:"metadata"})]):[2];case 1:return i.sent(),[2]}}))}))}))})),s="",o="",(f=document.getElementById("agent-data"))&&(s=f.dataset.apikey||"",o=f.dataset.wsurl||""),[4,n.connect({apiKey:s,wsUrl:o})]);case 1:return a.sent(),[2]}}))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,