/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={4430:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.NstrumentaBrowserClient=t.endpoints=void 0;const i=n(4308),o=n(7374),s=n(4607);t.endpoints=(0,i.getEndpoints)("prod");class a extends i.NstrumentaClientBase{constructor(){super(),this.webrtcClient=null,this.publishWebRTC=e=>r(this,void 0,void 0,(function*(){return console.log("browserClient publishWebRTC",{request:e}),this.callRPC("publishWebRTC",e)})),this.joinWebRTC=e=>r(this,void 0,void 0,(function*(){return console.log("browserClient joinWebRTC"),this.callRPC("joinWebRTC",{room:e})})),this.candidateWebRTC=(e,t,n)=>r(this,void 0,void 0,(function*(){return this.callRPC("candidateWebRTC",{peerId:e,room:t,candidate:n})})),this.answerWebRTC=(e,t,n)=>r(this,void 0,void 0,(function*(){return this.callRPC("answerWebRTC",{peerId:e,room:t,answer:n})})),this.webrtcClient=new s.ClientSDK}connect(e){return r(this,void 0,void 0,(function*(){return new Promise(((t,n)=>r(this,void 0,void 0,(function*(){const{wsUrl:s,apiKey:a,verify:f=!0}=e||{},{search:u}=window.location,h=new URLSearchParams(u).get("wsUrl"),l=s||h||window.location.origin.replace("http","ws"),c=new URLSearchParams(u).get("apiKey"),d=localStorage.getItem("apiKey"),g=a||c||d||prompt("Enter your nstrumenta apiKey");if(g&&localStorage.setItem("apiKey",g),this.reconnection.attempts>100)throw new Error("Too many reconnection attempts, stopping");if(!g)throw new Error('nstrumenta api key is missing, pass it as an argument to NstrumentaClient.connect({apiKey: "your key"}) for javascript clients in the browser, or set the NSTRUMENTA_API_KEY environment variable get a key from your nstrumenta project settings https://nstrumenta.com/projects/ *your projectId here* /settings');this.apiKey=g;let p="unverified";if(f)try{p=yield(0,i.getToken)(this.apiKey),this.storage=new i.StorageService({apiKey:this.apiKey})}catch(e){throw console.error(e.message),e}this.ws=new WebSocket(l),this.ws.binaryType="arraybuffer",this.ws.addEventListener("open",(()=>r(this,void 0,void 0,(function*(){var e;console.log(`client websocket opened <${l}>`),null===(e=this.ws)||void 0===e||e.send(p),this.reconnection.attempts=0,this.connection.status=i.ClientStatus.CONNECTING})))),this.ws.addEventListener("close",(t=>{var n;this.connection.status=i.ClientStatus.DISCONNECTED,null===(n=this.listeners.get("close"))||void 0===n||n.forEach((e=>e())),console.log(`client websocket closed ${l} code:${t.code} wasClean:${t.wasClean}`),this.subscriptions.clear(),this.reconnection.hasVerified&&(this.reconnection.timeout=setTimeout((()=>{this.reconnection.timeout=null,console.log(`attempting to reconnect, attempts: ${this.reconnection.attempts}`),this.connect(e)}),this.rollOff(this.reconnection.attempts)),this.reconnection.attempts+=1)})),this.ws.addEventListener("error",(e=>{this.connection.status=i.ClientStatus.ERROR,n(`Error in websocket connection: ${e.message}`)})),this.ws.addEventListener("message",(e=>{var n,r;const s=e.data;let a;try{a=(0,o.deserializeWireMessage)(s)}catch(e){return void console.log(`Couldn't deserialize message ${JSON.stringify(e)}`)}const{channel:f,contents:u}=a;if("_nstrumenta"==f){const{verified:e,error:r,clientId:o}=u;r&&console.error(r),e&&(this.connection.status=i.ClientStatus.CONNECTED,this.reconnection.hasVerified=!0,null===(n=this.listeners.get("open"))||void 0===n||n.forEach((e=>e())),this.messageBuffer.forEach((e=>{var t;null===(t=this.ws)||void 0===t||t.send(e)})),this.messageBuffer=[],this.clientId=o,t(this.connection))}null===(r=this.subscriptions.get(f))||void 0===r||r.forEach((e=>{e(u)}))}))}))))}))}}t.NstrumentaBrowserClient=a},7886:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.unsubscribe=t.subscribe=void 0,t.subscribe=(e,t)=>r=>n(void 0,void 0,void 0,(function*(){if(t.isSubscribed(r))return;const i=r.map((e=>"application"===e.kind?{info:e}:{info:e,type:e.simulcast?"high":"single"})),[o,s]=yield e.subscribe([e.peerId,i]),a=(yield Promise.all(o.map((({label:t,mediaId:r,mid:i})=>n(void 0,void 0,void 0,(function*(){if(t){const[n]=[e.datachannels[t]]||0;return{dc:n,mediaId:r}}return{mid:i,mediaId:r}})))))).reduce(((e,t)=>(t.dc?e[t.mediaId]={dc:t.dc}:e[t.mediaId]={mid:t.mid},e)),{}),f=t.subscribe(r,a);if(s){const t=yield e.setOffer(s);yield e.sendAnswer(t)}return f})),t.unsubscribe=(e,t)=>r=>n(void 0,void 0,void 0,(function*(){const[n]=yield e.unsubscribe([r,e.peerId]);t.unsubscribe(r);const i=yield e.setOffer(n);yield e.sendAnswer(i)}))},9674:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.unPublish=t.publish=t.join=void 0;const i=n(3386);t.join=e=>(t,n,o)=>r(void 0,void 0,void 0,(function*(){const r=new i.User(t,e),{answer:s,candidates:a}=yield r.join(n,o);return{user:r,answer:s,candidates:a}})),t.publish=(e,t,n,i)=>o=>r(void 0,void 0,void 0,(function*(){const r={kind:o.kind,simulcast:!!o.simulcast},[s,a]=yield e.publish([t.peerId,r]);let f;if("application"===o.kind)f=e.datachannels[`__messaging:${s.mediaId}`];else{const n=yield t.publish(o,a);yield e.sendAnswer(n.localDescription)}return t.published=[...t.published,s],n.onPublish.execute(s),i.publish(s,{datachannel:f})})),t.unPublish=(e,t,n)=>i=>r(void 0,void 0,void 0,(function*(){i.publisherId===e.peerId&&(t.published=t.published.filter((e=>e.mediaId!==i.mediaId)),n.onUnPublish.execute(i),yield e.unPublish([i]))}))},5893:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Events=void 0;const i=r(n(1389));t.Events=class{constructor(){this.onConnect=new i.default,this.onPublish=new i.default,this.onUnPublish=new i.default,this.onLeave=new i.default,this.onJoin=new i.default,this.onTrack=new i.default,this.onDataChannel=new i.default,this.onUnsubscribe=new i.default}}},7276:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Consumer=void 0;const i=r(n(1389));t.Consumer=class{constructor(e,t,n){this.connection=e,this.events=t,this.info=n,this.onMessage=new i.default}initAV(e){return this.connection.ontrack.subscribe((({transceiver:t,streams:n})=>{const r=t.mid;e===r&&this.events.onTrack.execute(n[0],this.info)})),this}initData(e){return this.events.onDataChannel.execute(e),this.datachannel=e,e.onmessage=e=>{this.onMessage.execute(e.data)},this}stop(){this.events.onUnsubscribe.execute(this.info)}}},6698:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SFUManager=void 0;const r=n(7276),i=n(9770);t.SFUManager=class{constructor(e,t){this.events=e,this.connection=t,this.consumers={},this.producers={},this.subscribed=[]}isSubscribed(e){return!!e.find((e=>this.subscribed.find((t=>t.mediaId===e.mediaId))))}publish(e,{datachannel:t}){const n=new i.Producer(e);return t&&(n.datachannel=t),this.producers[e.mediaId]=n,n}subscribe(e,t){return this.subscribed=[...this.subscribed,...e],e.map((e=>{const n=this.consumers[e.mediaId]=new r.Consumer(this.connection,this.events,e),{dc:i,mid:o}=t[e.mediaId];return i?n.initData(i):n.initAV(o),n}))}unsubscribe(e){const t=this.consumers[e.mediaId];this.subscribed=this.subscribed.filter((t=>t.mediaId!==e.mediaId)),delete this.consumers[e.mediaId],t.stop()}getConsumer(e){return this.consumers[e]}getProducer(e){return this.producers[e]}}},9770:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Producer=void 0,t.Producer=class{constructor(e){this.info=e}sendData(e){var t;null===(t=this.datachannel)||void 0===t||t.send(e)}}},3386:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.User=void 0;const o=i(n(1389));t.User=class{constructor(e,t){this.roomName=e,this.connection=t,this.peer=this.connection.peer,this.candidates=[],this.onCandidate=new o.default,this.published=[],this.join=(e,t)=>r(this,void 0,void 0,(function*(){return this.peerId=e,this.connection.peerId=e,this.peer.onicecandidate=({candidate:e})=>{e&&(this.candidates.push(e),this.onCandidate.execute(e))},{answer:yield this.connection.setOffer(t),candidates:this.candidates}}))}publish(e,t){return r(this,void 0,void 0,(function*(){if(t&&(yield this.peer.setRemoteDescription(t)),e.track){const t=this.peer.getTransceivers().slice(-1)[0];if(t.sender.replaceTrack(e.track),t.direction="sendonly",e.simulcast){const e=t.sender.getParameters();e.encodings[0]=Object.assign(Object.assign({},e.encodings[0]),{maxBitrate:68e4,scaleResolutionDownBy:1}),e.encodings[1]=Object.assign(Object.assign({},e.encodings[1]),{maxBitrate:36e3,scaleResolutionDownBy:4}),t.sender.setParameters(e)}}return t&&(yield this.peer.setLocalDescription(yield this.peer.createAnswer())),this.peer}))}}},4607:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ClientSDK=void 0;var r=n(182);Object.defineProperty(t,"ClientSDK",{enumerable:!0,get:function(){return r.ClientSDK}})},4861:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Connection=void 0;const o=i(n(1389));t.Connection=class{constructor(e){this.events=e,this.onmessage=new o.default,this.ontrack=new o.default,this.ondatachannel=new o.default,this.datachannels={},this.peer=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]}),this.handleLeave=(...e)=>r(this,void 0,void 0,(function*(){const[t,n]=e;if(this.events.onLeave.execute(t),n){const e=yield this.setOffer(n);this.sendAnswer(e)}})),this.handleJoin=(...e)=>r(this,void 0,void 0,(function*(){const[t]=e;this.events.onJoin.execute(t)})),this.handlePublish=(...e)=>{const[t]=e;this.events.onPublish.execute(t)},this.handleUnPublish=(...e)=>r(this,void 0,void 0,(function*(){const[t,n]=e;this.events.onUnPublish.execute(t);const r=yield this.setOffer(n);yield this.sendAnswer(r)})),this.sendCandidate=e=>{this.sendRPC({type:"handleCandidate",payload:[this.peerId,e]})},this.sendAnswer=e=>r(this,void 0,void 0,(function*(){this.sendRPC({type:"handleAnswer",payload:[this.peerId,e]}),yield this.waitRPC("handleAnswerDone")})),this.publish=e=>r(this,void 0,void 0,(function*(){return this.sendRPC({type:"publish",payload:e}),this.waitRPC("handlePublishDone")})),this.unPublish=e=>r(this,void 0,void 0,(function*(){this.sendRPC({type:"unPublish",payload:e});const[t]=yield this.waitRPC("handleUnPublishDone"),n=yield this.setOffer(t);yield this.sendAnswer(n)})),this.subscribe=e=>r(this,void 0,void 0,(function*(){return this.sendRPC({type:"subscribe",payload:e}),yield this.waitRPC("handleSubscribe")})),this.unsubscribe=e=>r(this,void 0,void 0,(function*(){return this.sendRPC({type:"unsubscribe",payload:e}),yield this.waitRPC("handleUnsubscribe")})),this.getMedias=()=>r(this,void 0,void 0,(function*(){this.sendRPC({type:"getMedias",payload:[this.peerId]});const[e]=yield this.waitRPC("handleMedias");return e})),this.changeQuality=e=>{this.sendRPC({type:"changeQuality",payload:e})},this.listenMixedAudio=e=>r(this,void 0,void 0,(function*(){return this.sendRPC({type:"listenMixedAudio",payload:e}),yield this.waitRPC("handleListenMixedAudio")})),this.waitRPC=e=>new Promise((t=>{const{unSubscribe:n}=this.onmessage.subscribe((r=>{const{type:i,payload:o}=JSON.parse(r);i===e&&(n(),t(o))}))})),this.peer.ondatachannel=({channel:t})=>{"__sfu"===t.label?(this.channel=t,e.onConnect.execute(),this.peer.onicecandidate=({candidate:e})=>{e&&this.sendCandidate(e)},t.onmessage=({data:e})=>{const{type:t,payload:n}=JSON.parse(e);console.log("from sfu!",t,n),this[t]&&this[t](...n),this.onmessage.execute(e)}):(this.datachannels[t.label]=t,this.ondatachannel.execute(t))},this.peer.ontrack=e=>this.ontrack.execute(e)}setOffer(e){return r(this,void 0,void 0,(function*(){yield this.peer.setRemoteDescription(e);const t=yield this.peer.createAnswer();return yield this.peer.setLocalDescription(t),this.peer.localDescription}))}addMixedAudioTrack(e){this.sendRPC({type:"addMixedAudioTrack",payload:e})}removeMixedAudioTrack(e){this.sendRPC({type:"removeMixedAudioTrack",payload:e})}sendRPC(e){console.log("sendRPC",e),this.channel.send(JSON.stringify(e))}}},182:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ClientSDK=void 0;const i=n(7886),o=n(9674),s=n(5893),a=n(6698),f=n(4861);t.ClientSDK=class{constructor(){this.events=new s.Events,this.connection=new f.Connection(this.events),this.sfu=new a.SFUManager(this.events,this.connection),this.medias={},this.streams={},this.events.onPublish.subscribe((e=>{this.medias[e.mediaId]=e})),this.events.onUnPublish.subscribe((e=>{delete this.medias[e.mediaId],delete this.streams[e.mediaId]})),this.events.onLeave.subscribe((e=>{e.forEach((e=>{delete this.medias[e.mediaId],this.events.onUnPublish.execute(e)}))})),this.events.onTrack.subscribe(((e,t)=>{this.streams[t.mediaId]={info:t,stream:e}}))}get peerId(){var e;return null===(e=this.user)||void 0===e?void 0:e.peerId}join(e,t,n){return r(this,void 0,void 0,(function*(){const{answer:r,user:i,candidates:s}=yield(0,o.join)(this.connection)(e,t,n);return this.user=i,{answer:r,candidates:s,user:i}}))}publish(e){return r(this,void 0,void 0,(function*(){return yield(0,o.publish)(this.connection,this.user,this.events,this.sfu)(e)}))}unPublish(e){return r(this,void 0,void 0,(function*(){yield(0,o.unPublish)(this.connection,this.user,this.events)(e)}))}subscribe(e){return r(this,void 0,void 0,(function*(){yield(0,i.subscribe)(this.connection,this.sfu)(e)}))}unsubscribe(e){return r(this,void 0,void 0,(function*(){yield(0,i.unsubscribe)(this.connection,this.sfu)(e)}))}getMedias(){return r(this,void 0,void 0,(function*(){const e=yield this.connection.getMedias();return this.medias=e.reduce(((e,t)=>(e[t.mediaId]=t,e)),{}),e}))}addMixedAudioTrack(e,t){this.connection.addMixedAudioTrack([e,t])}removeMixedAudioTrack(e,t){this.connection.removeMixedAudioTrack([e,t])}changeQuality(e,t){this.connection.changeQuality([this.peerId,e,t])}}},4308:function(e,t,n){"use strict";var r,i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectTypes=t.getEndpoints=t.DEFAULT_HOST_PORT=void 0,t.DEFAULT_HOST_PORT="8088",t.getEndpoints=e=>{const t="local"===e?"http://localhost:8088":"https://us-central1-macro-coil-194519.cloudfunctions.net";return{ADMIN_UTILS:`${t}/adminUtils`,GET_MACHINES:`${t}/getMachines`,GET_UPLOAD_URL:`${t}/getUploadUrl`,GET_UPLOAD_DATA_URL:`${t}/getUploadDataUrl`,REGISTER_AGENT:`${t}/registerAgent`,LIST_AGENTS:`${t}/listAgents`,SET_AGENT_ACTION:`${t}/setAgentAction`,GET_AGENT_ID_BY_TAG:`${t}/getAgentIdByTag`,CLEAN_AGENT_ACTIONS:`${t}/cleanAgentActions`,GET_DOWNLOAD_URL:`${t}/getDownloadUrl`,GET_PROJECT_DOWNLOAD_URL:`${t}/getProjectDownloadUrl`,GENERATE_DATA_ID:`${t}/generateDataId`,LIST_MODULES:`${t}/listModules`,GET_TOKEN:`${t}/getToken`,VERIFY_TOKEN:`${t}/verifyToken`,VERIFY_API_KEY:`${t}/verifyApiKey`,SET_STORAGE_OBJECT:`${t}/setStorageObject`,SET_DATA_METADATA:`${t}/setDataMetadata`,LIST_STORAGE_OBJECTS:`${t}/listStorageObjects`,QUERY_DATA:`${t}/queryData`,v2:{LIST_MODULES:`${t}/listModulesV2`}}},(r=t.ObjectTypes||(t.ObjectTypes={})).DATA="data",r.MODULES="modules",o(n(7280),t),o(n(1371),t)},7374:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.deserializeByteBuffer=t.deserializeWireMessage=t.deserializeBlob=t.makeBusMessageFromBuffer=t.makeBusMessageFromJsonObject=t.BusMessageType=t.BusMessage=void 0;const o=i(n(1546));class s extends o.default{}var a;t.BusMessage=s,function(e){e[e.BUS_MESSAGE_TYPES_BEGIN=100]="BUS_MESSAGE_TYPES_BEGIN",e[e.Json=101]="Json",e[e.Buffer=102]="Buffer",e[e.BUS_MESSAGE_TYPES_END=103]="BUS_MESSAGE_TYPES_END"}(a=t.BusMessageType||(t.BusMessageType={})),t.makeBusMessageFromJsonObject=(e,t)=>(new o.default).writeUint32(a.Json).writeIString(e).writeIString(JSON.stringify(t)).flip().toBuffer(),t.makeBusMessageFromBuffer=(e,t)=>(new o.default).writeUint32(a.Buffer).writeIString(e).append(t).flip().toBuffer(),t.deserializeBlob=e=>r(void 0,void 0,void 0,(function*(){const n=yield e.arrayBuffer(),r=new o.default(n.byteLength);return new Uint8Array(n).forEach((e=>{r.writeUint8(e)})),r.flip(),(0,t.deserializeByteBuffer)(r)})),t.deserializeWireMessage=e=>{if(e instanceof ArrayBuffer){const n=new o.default(e.byteLength);return new Uint8Array(e).forEach((e=>{n.writeUint8(e)})),n.flip(),(0,t.deserializeByteBuffer)(n)}{const n=new o.default(e.byteLength);return n.buffer=e,(0,t.deserializeByteBuffer)(n)}},t.deserializeByteBuffer=e=>{const t=e.readInt32();if(t<=a.BUS_MESSAGE_TYPES_BEGIN||t>=a.BUS_MESSAGE_TYPES_END)throw`unknown busMessageType ${t}: ${e}`;const n=e.readIString();let r;switch(t){case a.Json:r=JSON.parse(e.readIString());break;case a.Buffer:r=e.buffer.slice(e.offset)}return{channel:n,busMessageType:t,contents:r}}},9187:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StorageService=t.NstrumentaClientBase=t.getToken=t.ClientStatus=void 0;const o=i(n(4206)),s=n(338),a=n(4308),f=n(7374);var u;!function(e){e[e.INIT=0]="INIT",e[e.READY=1]="READY",e[e.CONNECTED=2]="CONNECTED",e[e.DISCONNECTED=3]="DISCONNECTED",e[e.CONNECTING=4]="CONNECTING",e[e.ERROR=5]="ERROR"}(u=t.ClientStatus||(t.ClientStatus={})),t.getToken=e=>r(void 0,void 0,void 0,(function*(){const t={"x-api-key":e,"Content-Type":"application/json"};try{"undefined"!=typeof process&&(yield process.nextTick((()=>{})));const{data:e}=yield o.default.get((0,a.getEndpoints)("prod").GET_TOKEN,{headers:t});return e.token}catch(e){const t=`Problem getting token, check api key, err: ${e.message}`;throw new Error(t)}})),t.NstrumentaClientBase=class{constructor(){this.ws=null,this.apiKey=null,this.reconnection={hasVerified:!1,attempts:0,timeout:null},this.clientId=null,this.connection={status:u.INIT},this.addSubscription=(e,t)=>r(this,void 0,void 0,(function*(){const{subscriptionId:n}=yield this.callRPC("subscribe",{channel:e});console.log(`Nstrumenta client subscribe <${e}> subscriptionId:${n}`);const i=this.subscriptions.get(e)||new Map;return i.set(n,t),this.subscriptions.set(e,i),()=>r(this,void 0,void 0,(function*(){var t;yield this.callRPC("unsubscribe",{channel:e,subscriptionId:n}),null===(t=this.subscriptions.get(e))||void 0===t||t.delete(n)}))})),this.listeners=new Map,this.subscriptions=new Map,this.datalogs=new Map,this.messageBuffer=[],this.endpoints=(0,a.getEndpoints)("prod"),this.addSubscription=this.addSubscription.bind(this),this.addListener=this.addListener.bind(this),this.connect=this.connect.bind(this)}shutdown(){var e,t;return r(this,void 0,void 0,(function*(){this.listeners.clear(),this.subscriptions.clear(),this.datalogs.clear(),this.messageBuffer=[],this.reconnection.timeout&&(clearTimeout(this.reconnection.timeout),this.reconnection.timeout=null),null===(e=this.ws)||void 0===e||e.removeAllListeners(),null===(t=this.ws)||void 0===t||t.close()}))}rollOff(e){return 0==e?0:Math.min(1e3*Math.pow(e,2),18e5)}send(e,t){this.bufferedSend((0,a.makeBusMessageFromJsonObject)(e,t))}sendBuffer(e,t){this.bufferedSend((0,f.makeBusMessageFromBuffer)(e,t))}bufferedSend(e){var t,n,r;(null===(t=this.ws)||void 0===t?void 0:t.readyState)!==(null===(n=this.ws)||void 0===n?void 0:n.OPEN)?(console.log("adding to messageBuffer, length:",this.messageBuffer.length),this.messageBuffer.push(e)):null===(r=this.ws)||void 0===r||r.send(e)}addListener(e,t){this.listeners.get(e)||this.listeners.set(e,[]);const n=this.listeners.get(e);n&&n.push(t)}addStringToDataLog(e,t){const n=this.datalogs.get(e);n?n.push(t):(console.log(`starting new log: ${e}`),this.datalogs.set(e,[t]))}uploadData(e,t,n){var i;return r(this,void 0,void 0,(function*(){const r=t.size;let s;const a=yield o.default.post(this.endpoints.GET_UPLOAD_URL,{path:e,size:r,meta:n},{headers:{contentType:"application/json","x-api-key":this.apiKey}});s=null===(i=a.data)||void 0===i?void 0:i.uploadUrl,yield o.default.put(s,t,{maxBodyLength:1/0,maxContentLength:1/0,headers:{contentType:"application/octet-stream",contentLength:`${r}`,contentLengthRange:`bytes 0-${r-1}/${r}`}})}))}ping(){return r(this,void 0,void 0,(function*(){return this.callRPC("ping",{sendTimestamp:Date.now()})}))}startLog(e,t,n){return r(this,void 0,void 0,(function*(){this.send("_nstrumenta",{command:"startLog",name:e,channels:t,config:n})}))}finishLog(e){return r(this,void 0,void 0,(function*(){console.log("finish log"),this.send("_nstrumenta",{command:"finishLog",name:e})}))}callRPC(e,t){return r(this,void 0,void 0,(function*(){console.log("callRPC",e,t);const n=(0,s.v4)(),i=`__rpc/${e}/${n}`,o=`${i}/request`,f=`${i}/response`;return new Promise((e=>r(this,void 0,void 0,(function*(){var r;const i=this.subscriptions.get(f)||new Map;i.set(n,(t=>{null==i||i.delete(n),e(t)})),this.subscriptions.set(f,i),null===(r=this.ws)||void 0===r||r.send((0,a.makeBusMessageFromJsonObject)(o,t))}))))}))}},t.StorageService=class{constructor(e){this.apiKey=e.apiKey,this.endpoints=(0,a.getEndpoints)("prod")}download(e){return r(this,void 0,void 0,(function*(){const t=yield(0,o.default)(this.endpoints.GET_PROJECT_DOWNLOAD_URL,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{path:e}});console.log("REQ:",t.request);const{data:n}=yield(0,o.default)(t.data,{method:"GET",responseType:"blob"});return n}))}query({filenames:e,tag:t,before:n,after:i,limit:s=1,metadata:a}){return r(this,void 0,void 0,(function*(){const r="string"==typeof a?JSON.parse(a):"object"==typeof a?a:{},f={tags:t,before:n,after:i,limit:s,filenames:e,metadata:r},u={method:"post",headers:{"x-api-key":this.apiKey},data:f};try{return(yield(0,o.default)(this.endpoints.QUERY_DATA,u)).data}catch(e){return console.log(`Something went wrong: ${e.message}`),[]}}))}list(e){return r(this,void 0,void 0,(function*(){return(yield(0,o.default)(this.endpoints.LIST_STORAGE_OBJECTS,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{type:e}})).data}))}upload({filename:e,data:t,meta:n,dataId:i}){var s,a;return r(this,void 0,void 0,(function*(){const r=t.size;let f,u=i;u||(u=(yield(0,o.default)(this.endpoints.GENERATE_DATA_ID,{headers:{"x-api-key":this.apiKey,method:"post"}})).data.dataId);const h={method:"post",headers:{"x-api-key":this.apiKey,"Content-Type":"application/json"},data:{name:e,dataId:u,size:r,metadata:n}};let l=yield(0,o.default)(this.endpoints.GET_UPLOAD_DATA_URL,h);if(f=null===(s=l.data)||void 0===s?void 0:s.uploadUrl,!f)return console.warn(`no upload url returned, can't upload ${e}`),void console.log(l.data);const c=null===(a=l.data)||void 0===a?void 0:a.remoteFilePath,d={maxBodyLength:1/0,maxContentLength:1/0,headers:{contentLength:`${r}`,contentLengthRange:`bytes 0-${r-1}/${r}`,"content-type":"application/octet-stream"},url:f,method:"PUT",data:t};console.log({remoteFilePath:c,uploadConfig:d}),yield(0,o.default)(d)}))}}},7280:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.makeBusMessageFromJsonObject=t.deserializeWireMessage=t.deserializeBlob=t.BusMessage=void 0;var o=n(7374);Object.defineProperty(t,"BusMessage",{enumerable:!0,get:function(){return o.BusMessage}}),Object.defineProperty(t,"deserializeBlob",{enumerable:!0,get:function(){return o.deserializeBlob}}),Object.defineProperty(t,"deserializeWireMessage",{enumerable:!0,get:function(){return o.deserializeWireMessage}}),Object.defineProperty(t,"makeBusMessageFromJsonObject",{enumerable:!0,get:function(){return o.makeBusMessageFromJsonObject}}),i(n(9187),t)},1371:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4206:(e,t,n)=>{e.exports=n(8057)},4387:(e,t,n)=>{"use strict";var r=n(7485),i=n(4570),o=n(2940),s=n(581),a=n(574),f=n(3845),u=n(8338),h=n(8524),l=n(4832),c=n(7132);e.exports=function(e){return new Promise((function(t,n){var d,g=e.data,p=e.headers,v=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}r.isFormData(g)&&delete p["Content-Type"];var b=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(w+":"+m)}var E=a(e.baseURL,e.url);function T(){if(b){var r="getAllResponseHeaders"in b?f(b.getAllResponseHeaders()):null,o={data:v&&"text"!==v&&"json"!==v?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:r,config:e,request:b};i((function(e){t(e),y()}),(function(e){n(e),y()}),o),b=null}}if(b.open(e.method.toUpperCase(),s(E,e.params,e.paramsSerializer),!0),b.timeout=e.timeout,"onloadend"in b?b.onloadend=T:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(T)},b.onabort=function(){b&&(n(h("Request aborted",e,"ECONNABORTED",b)),b=null)},b.onerror=function(){n(h("Network Error",e,null,b)),b=null},b.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(h(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",b)),b=null},r.isStandardBrowserEnv()){var _=(e.withCredentials||u(E))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;_&&(p[e.xsrfHeaderName]=_)}"setRequestHeader"in b&&r.forEach(p,(function(e,t){void 0===g&&"content-type"===t.toLowerCase()?delete p[t]:b.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(b.withCredentials=!!e.withCredentials),v&&"json"!==v&&(b.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&b.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){b&&(n(!e||e&&e.type?new c("canceled"):e),b.abort(),b=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),g||(g=null),b.send(g)}))}},8057:(e,t,n)=>{"use strict";var r=n(7485),i=n(875),o=n(5029),s=n(4941),a=function e(t){var n=new o(t),a=i(o.prototype.request,n);return r.extend(a,o.prototype,n),r.extend(a,n),a.create=function(n){return e(s(t,n))},a}(n(8396));a.Axios=o,a.Cancel=n(7132),a.CancelToken=n(4603),a.isCancel=n(1475),a.VERSION=n(3345).version,a.all=function(e){return Promise.all(e)},a.spread=n(5739),a.isAxiosError=n(5835),e.exports=a,e.exports.default=a},7132:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4603:(e,t,n)=>{"use strict";var r=n(7132);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},i.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},1475:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},5029:(e,t,n)=>{"use strict";var r=n(7485),i=n(581),o=n(8096),s=n(5009),a=n(4941),f=n(6144),u=f.validators;function h(e){this.defaults=e,this.interceptors={request:new o,response:new o}}h.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&f.assertOptions(n,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var r=[],i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var o,h=[];if(this.interceptors.response.forEach((function(e){h.push(e.fulfilled,e.rejected)})),!i){var l=[s,void 0];for(Array.prototype.unshift.apply(l,r),l=l.concat(h),o=Promise.resolve(t);l.length;)o=o.then(l.shift(),l.shift());return o}for(var c=t;r.length;){var d=r.shift(),g=r.shift();try{c=d(c)}catch(e){g(e);break}}try{o=s(c)}catch(e){return Promise.reject(e)}for(;h.length;)o=o.then(h.shift(),h.shift());return o},h.prototype.getUri=function(e){return e=a(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){h.prototype[e]=function(t,n){return this.request(a(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){h.prototype[e]=function(t,n,r){return this.request(a(r||{},{method:e,url:t,data:n}))}})),e.exports=h},8096:(e,t,n)=>{"use strict";var r=n(7485);function i(){this.handlers=[]}i.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},574:(e,t,n)=>{"use strict";var r=n(2642),i=n(2288);e.exports=function(e,t){return e&&!r(t)?i(e,t):t}},8524:(e,t,n)=>{"use strict";var r=n(9953);e.exports=function(e,t,n,i,o){var s=new Error(e);return r(s,t,n,i,o)}},5009:(e,t,n)=>{"use strict";var r=n(7485),i=n(9212),o=n(1475),s=n(8396),a=n(7132);function f(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a("canceled")}e.exports=function(e){return f(e),e.headers=e.headers||{},e.data=i.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return f(e),t.data=i.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(f(e),t&&t.response&&(t.response.data=i.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},9953:e=>{"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},4941:(e,t,n)=>{"use strict";var r=n(7485);e.exports=function(e,t){t=t||{};var n={};function i(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function o(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:i(void 0,e[n]):i(e[n],t[n])}function s(e){if(!r.isUndefined(t[e]))return i(void 0,t[e])}function a(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:i(void 0,e[n]):i(void 0,t[n])}function f(n){return n in t?i(e[n],t[n]):n in e?i(void 0,e[n]):void 0}var u={url:s,method:s,data:s,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:f};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||o,i=t(e);r.isUndefined(i)&&t!==f||(n[e]=i)})),n}},4570:(e,t,n)=>{"use strict";var r=n(8524);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},9212:(e,t,n)=>{"use strict";var r=n(7485),i=n(8396);e.exports=function(e,t,n){var o=this||i;return r.forEach(n,(function(n){e=n.call(o,e,t)})),e}},8396:(e,t,n)=>{"use strict";var r=n(7485),i=n(1446),o=n(9953),s=n(4832),a={"Content-Type":"application/x-www-form-urlencoded"};function f(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,h={transitional:s,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=n(4387)),u),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(f(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(f(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||h.transitional,n=t&&t.silentJSONParsing,i=t&&t.forcedJSONParsing,s=!n&&"json"===this.responseType;if(s||i&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(s){if("SyntaxError"===e.name)throw o(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){h.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){h.headers[e]=r.merge(a)})),e.exports=h},4832:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},3345:e=>{e.exports={version:"0.26.1"}},875:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},581:(e,t,n)=>{"use strict";var r=n(7485);function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))})))})),o=s.join("&")}if(o){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},2288:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},2940:(e,t,n)=>{"use strict";var r=n(7485);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},2642:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},5835:(e,t,n)=>{"use strict";var r=n(7485);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},8338:(e,t,n)=>{"use strict";var r=n(7485);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},1446:(e,t,n)=>{"use strict";var r=n(7485);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},3845:(e,t,n)=>{"use strict";var r=n(7485),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&i.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}})),s):s}},5739:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},6144:(e,t,n)=>{"use strict";var r=n(3345).version,i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var o={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,s){if(!1===e)throw new Error(i(r," has been removed"+(t?" in "+t:"")));return t&&!o[r]&&(o[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,s)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),i=r.length;i-- >0;){var o=r[i],s=t[o];if(s){var a=e[o],f=void 0===a||s(a,o,e);if(!0!==f)throw new TypeError("option "+o+" must be "+f)}else if(!0!==n)throw Error("Unknown option "+o)}},validators:i}},7485:(e,t,n)=>{"use strict";var r=n(875),i=Object.prototype.toString;function o(e){return Array.isArray(e)}function s(e){return void 0===e}function a(e){return"[object ArrayBuffer]"===i.call(e)}function f(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==i.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function h(e){return"[object Function]"===i.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:o,isArrayBuffer:a,isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===i.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&a(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isPlainObject:u,isUndefined:s,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:h,isStream:function(e){return f(e)&&h(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===i.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):o(n)?t[r]=n.slice():t[r]=n}for(var r=0,i=arguments.length;r<i;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},1546:function(e,t,n){var r,i,o;i=[n(6734)],r=function(e){"use strict";var t=function(e,n,i){if(void 0===e&&(e=t.DEFAULT_CAPACITY),void 0===n&&(n=t.DEFAULT_ENDIAN),void 0===i&&(i=t.DEFAULT_NOASSERT),!i){if((e|=0)<0)throw RangeError("Illegal capacity");n=!!n,i=!!i}this.buffer=0===e?r:new ArrayBuffer(e),this.view=0===e?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=e,this.littleEndian=n,this.noAssert=i};t.VERSION="5.0.1",t.LITTLE_ENDIAN=!0,t.BIG_ENDIAN=!1,t.DEFAULT_CAPACITY=16,t.DEFAULT_ENDIAN=t.BIG_ENDIAN,t.DEFAULT_NOASSERT=!1,t.Long=e||null;var n=t.prototype;n.__isByteBuffer__,Object.defineProperty(n,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var r=new ArrayBuffer(0),i=String.fromCharCode;function o(e){var t=0;return function(){return t<e.length?e.charCodeAt(t++):null}}function s(){var e=[],t=[];return function(){if(0===arguments.length)return t.join("")+i.apply(String,e);e.length+arguments.length>1024&&(t.push(i.apply(String,e)),e.length=0),Array.prototype.push.apply(e,arguments)}}function a(e,t,n,r,i){var o,s,a=8*i-r-1,f=(1<<a)-1,u=f>>1,h=-7,l=n?i-1:0,c=n?-1:1,d=e[t+l];for(l+=c,o=d&(1<<-h)-1,d>>=-h,h+=a;h>0;o=256*o+e[t+l],l+=c,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+e[t+l],l+=c,h-=8);if(0===o)o=1-u;else{if(o===f)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=u}return(d?-1:1)*s*Math.pow(2,o-r)}function f(e,t,n,r,i,o){var s,a,f,u=8*o-i-1,h=(1<<u)-1,l=h>>1,c=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,g=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=h):(s=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-s))<1&&(s--,f*=2),(t+=s+l>=1?c/f:c*Math.pow(2,1-l))*f>=2&&(s++,f/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(t*f-1)*Math.pow(2,i),s+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,i),s=0));i>=8;e[n+d]=255&a,d+=g,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[n+d]=255&s,d+=g,s/=256,u-=8);e[n+d-g]|=128*p}t.accessor=function(){return Uint8Array},t.allocate=function(e,n,r){return new t(e,n,r)},t.concat=function(e,n,r,i){"boolean"!=typeof n&&"string"==typeof n||(i=r,r=n,n=void 0);for(var o,s=0,a=0,f=e.length;a<f;++a)t.isByteBuffer(e[a])||(e[a]=t.wrap(e[a],n)),(o=e[a].limit-e[a].offset)>0&&(s+=o);if(0===s)return new t(0,r,i);var u,h=new t(s,r,i);for(a=0;a<f;)(o=(u=e[a++]).limit-u.offset)<=0||(h.view.set(u.view.subarray(u.offset,u.limit),h.offset),h.offset+=o);return h.limit=h.offset,h.offset=0,h},t.isByteBuffer=function(e){return!0===(e&&e.__isByteBuffer__)},t.type=function(){return ArrayBuffer},t.wrap=function(e,r,i,o){if("string"!=typeof r&&(o=i,i=r,r=void 0),"string"==typeof e)switch(void 0===r&&(r="utf8"),r){case"base64":return t.fromBase64(e,i);case"hex":return t.fromHex(e,i);case"binary":return t.fromBinary(e,i);case"utf8":return t.fromUTF8(e,i);case"debug":return t.fromDebug(e,i);default:throw Error("Unsupported encoding: "+r)}if(null===e||"object"!=typeof e)throw TypeError("Illegal buffer");var s;if(t.isByteBuffer(e))return(s=n.clone.call(e)).markedOffset=-1,s;if(e instanceof Uint8Array)s=new t(0,i,o),e.length>0&&(s.buffer=e.buffer,s.offset=e.byteOffset,s.limit=e.byteOffset+e.byteLength,s.view=new Uint8Array(e.buffer));else if(e instanceof ArrayBuffer)s=new t(0,i,o),e.byteLength>0&&(s.buffer=e,s.offset=0,s.limit=e.byteLength,s.view=e.byteLength>0?new Uint8Array(e):null);else{if("[object Array]"!==Object.prototype.toString.call(e))throw TypeError("Illegal buffer");(s=new t(e.length,i,o)).limit=e.length;for(var a=0;a<e.length;++a)s.view[a]=e[a]}return s},n.writeBitSet=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if(!(e instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var r,i=t,o=e.length,s=o>>3,a=0;for(t+=this.writeVarint32(o,t);s--;)r=1&!!e[a++]|(1&!!e[a++])<<1|(1&!!e[a++])<<2|(1&!!e[a++])<<3|(1&!!e[a++])<<4|(1&!!e[a++])<<5|(1&!!e[a++])<<6|(1&!!e[a++])<<7,this.writeByte(r,t++);if(a<o){var f=0;for(r=0;a<o;)r|=(1&!!e[a++])<<f++;this.writeByte(r,t++)}return n?(this.offset=t,this):t-i},n.readBitSet=function(e){var t=void 0===e;t&&(e=this.offset);var n,r=this.readVarint32(e),i=r.value,o=i>>3,s=0,a=[];for(e+=r.length;o--;)n=this.readByte(e++),a[s++]=!!(1&n),a[s++]=!!(2&n),a[s++]=!!(4&n),a[s++]=!!(8&n),a[s++]=!!(16&n),a[s++]=!!(32&n),a[s++]=!!(64&n),a[s++]=!!(128&n);if(s<i){var f=0;for(n=this.readByte(e++);s<i;)a[s++]=!!(n>>f++&1)}return t&&(this.offset=e),a},n.readBytes=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+e>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+"+e+") <= "+this.buffer.byteLength)}var r=this.slice(t,t+e);return n&&(this.offset+=e),r},n.writeBytes=n.append,n.writeInt8=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=1;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=1,this.view[t]=e,n&&(this.offset+=1),this},n.writeByte=n.writeInt8,n.readInt8=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n=this.view[e];return 128==(128&n)&&(n=-(255-n+1)),t&&(this.offset+=1),n},n.readByte=n.readInt8,n.writeUint8=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=1;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=1,this.view[t]=e,n&&(this.offset+=1),this},n.writeUInt8=n.writeUint8,n.readUint8=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n=this.view[e];return t&&(this.offset+=1),n},n.readUInt8=n.readUint8,n.writeInt16=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=2;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=2,this.littleEndian?(this.view[t+1]=(65280&e)>>>8,this.view[t]=255&e):(this.view[t]=(65280&e)>>>8,this.view[t+1]=255&e),n&&(this.offset+=2),this},n.writeShort=n.writeInt16,n.readInt16=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e],n|=this.view[e+1]<<8):(n=this.view[e]<<8,n|=this.view[e+1]),32768==(32768&n)&&(n=-(65535-n+1)),t&&(this.offset+=2),n},n.readShort=n.readInt16,n.writeUint16=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=2;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=2,this.littleEndian?(this.view[t+1]=(65280&e)>>>8,this.view[t]=255&e):(this.view[t]=(65280&e)>>>8,this.view[t+1]=255&e),n&&(this.offset+=2),this},n.writeUInt16=n.writeUint16,n.readUint16=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e],n|=this.view[e+1]<<8):(n=this.view[e]<<8,n|=this.view[e+1]),t&&(this.offset+=2),n},n.readUInt16=n.readUint16,n.writeInt32=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=4,this.littleEndian?(this.view[t+3]=e>>>24&255,this.view[t+2]=e>>>16&255,this.view[t+1]=e>>>8&255,this.view[t]=255&e):(this.view[t]=e>>>24&255,this.view[t+1]=e>>>16&255,this.view[t+2]=e>>>8&255,this.view[t+3]=255&e),n&&(this.offset+=4),this},n.writeInt=n.writeInt32,n.readInt32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0),n|=0,t&&(this.offset+=4),n},n.readInt=n.readInt32,n.writeUint32=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=4,this.littleEndian?(this.view[t+3]=e>>>24&255,this.view[t+2]=e>>>16&255,this.view[t+1]=e>>>8&255,this.view[t]=255&e):(this.view[t]=e>>>24&255,this.view[t+1]=e>>>16&255,this.view[t+2]=e>>>8&255,this.view[t+3]=255&e),n&&(this.offset+=4),this},n.writeUInt32=n.writeUint32,n.readUint32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0),t&&(this.offset+=4),n},n.readUInt32=n.readUint32,e&&(n.writeInt64=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof t)t=e.fromNumber(t);else if("string"==typeof t)t=e.fromString(t);else if(!(t&&t instanceof e))throw TypeError("Illegal value: "+t+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=t.low,s=t.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=s>>>24&255,this.view[n+2]=s>>>16&255,this.view[n+1]=s>>>8&255,this.view[n]=255&s):(this.view[n]=s>>>24&255,this.view[n+1]=s>>>16&255,this.view[n+2]=s>>>8&255,this.view[n+3]=255&s,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeLong=n.writeInt64,n.readInt64=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0,t+=4,i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0):(i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0,t+=4,r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0);var o=new e(r,i,!1);return n&&(this.offset+=8),o},n.readLong=n.readInt64,n.writeUint64=function(t,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"==typeof t)t=e.fromNumber(t);else if("string"==typeof t)t=e.fromString(t);else if(!(t&&t instanceof e))throw TypeError("Illegal value: "+t+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t)),n+=8;var i=this.buffer.byteLength;n>i&&this.resize((i*=2)>n?i:n),n-=8;var o=t.low,s=t.high;return this.littleEndian?(this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o,n+=4,this.view[n+3]=s>>>24&255,this.view[n+2]=s>>>16&255,this.view[n+1]=s>>>8&255,this.view[n]=255&s):(this.view[n]=s>>>24&255,this.view[n+1]=s>>>16&255,this.view[n+2]=s>>>8&255,this.view[n+3]=255&s,n+=4,this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o),r&&(this.offset+=8),this},n.writeUInt64=n.writeUint64,n.readUint64=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var r=0,i=0;this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0,t+=4,i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0):(i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0,t+=4,r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0);var o=new e(r,i,!0);return n&&(this.offset+=8),o},n.readUInt64=n.readUint64),n.writeFloat32=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e)throw TypeError("Illegal value: "+e+" (not a number)");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=4,f(this.view,e,t,this.littleEndian,23,4),n&&(this.offset+=4),this},n.writeFloat=n.writeFloat32,n.readFloat32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var n=a(this.view,e,this.littleEndian,23,4);return t&&(this.offset+=4),n},n.readFloat=n.readFloat32,n.writeFloat64=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e)throw TypeError("Illegal value: "+e+" (not a number)");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=8;var r=this.buffer.byteLength;return t>r&&this.resize((r*=2)>t?r:t),t-=8,f(this.view,e,t,this.littleEndian,52,8),n&&(this.offset+=8),this},n.writeDouble=n.writeFloat64,n.readFloat64=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var n=a(this.view,e,this.littleEndian,52,8);return t&&(this.offset+=8),n},n.readDouble=n.readFloat64,t.MAX_VARINT32_BYTES=5,t.calculateVarint32=function(e){return(e>>>=0)<128?1:e<16384?2:e<1<<21?3:e<1<<28?4:5},t.zigZagEncode32=function(e){return((e|=0)<<1^e>>31)>>>0},t.zigZagDecode32=function(e){return e>>>1^-(1&e)|0},n.writeVarint32=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,o=t.calculateVarint32(e);n+=o;var s=this.buffer.byteLength;for(n>s&&this.resize((s*=2)>n?s:n),n-=o,e>>>=0;e>=128;)i=127&e|128,this.view[n++]=i,e>>>=7;return this.view[n++]=e,r?(this.offset=n,this):o},n.writeVarint32ZigZag=function(e,n){return this.writeVarint32(t.zigZagEncode32(e),n)},n.readVarint32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n,r=0,i=0;do{if(!this.noAssert&&e>this.limit){var o=Error("Truncated");throw o.truncated=!0,o}n=this.view[e++],r<5&&(i|=(127&n)<<7*r),++r}while(0!=(128&n));return i|=0,t?(this.offset=e,i):{value:i,length:r}},n.readVarint32ZigZag=function(e){var n=this.readVarint32(e);return"object"==typeof n?n.value=t.zigZagDecode32(n.value):n=t.zigZagDecode32(n),n},e&&(t.MAX_VARINT64_BYTES=10,t.calculateVarint64=function(t){"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t));var n=t.toInt()>>>0,r=t.shiftRightUnsigned(28).toInt()>>>0,i=t.shiftRightUnsigned(56).toInt()>>>0;return 0==i?0==r?n<16384?n<128?1:2:n<1<<21?3:4:r<16384?r<128?5:6:r<1<<21?7:8:i<128?9:10},t.zigZagEncode64=function(t){return"number"==typeof t?t=e.fromNumber(t,!1):"string"==typeof t?t=e.fromString(t,!1):!1!==t.unsigned&&(t=t.toSigned()),t.shiftLeft(1).xor(t.shiftRight(63)).toUnsigned()},t.zigZagDecode64=function(t){return"number"==typeof t?t=e.fromNumber(t,!1):"string"==typeof t?t=e.fromString(t,!1):!1!==t.unsigned&&(t=t.toSigned()),t.shiftRightUnsigned(1).xor(t.and(e.ONE).toSigned().negate()).toSigned()},n.writeVarint64=function(n,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof n)n=e.fromNumber(n);else if("string"==typeof n)n=e.fromString(n);else if(!(n&&n instanceof e))throw TypeError("Illegal value: "+n+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof n?n=e.fromNumber(n,!1):"string"==typeof n?n=e.fromString(n,!1):!1!==n.unsigned&&(n=n.toSigned());var o=t.calculateVarint64(n),s=n.toInt()>>>0,a=n.shiftRightUnsigned(28).toInt()>>>0,f=n.shiftRightUnsigned(56).toInt()>>>0;r+=o;var u=this.buffer.byteLength;switch(r>u&&this.resize((u*=2)>r?u:r),r-=o,o){case 10:this.view[r+9]=f>>>7&1;case 9:this.view[r+8]=9!==o?128|f:127&f;case 8:this.view[r+7]=8!==o?a>>>21|128:a>>>21&127;case 7:this.view[r+6]=7!==o?a>>>14|128:a>>>14&127;case 6:this.view[r+5]=6!==o?a>>>7|128:a>>>7&127;case 5:this.view[r+4]=5!==o?128|a:127&a;case 4:this.view[r+3]=4!==o?s>>>21|128:s>>>21&127;case 3:this.view[r+2]=3!==o?s>>>14|128:s>>>14&127;case 2:this.view[r+1]=2!==o?s>>>7|128:s>>>7&127;case 1:this.view[r]=1!==o?128|s:127&s}return i?(this.offset+=o,this):o},n.writeVarint64ZigZag=function(e,n){return this.writeVarint64(t.zigZagEncode64(e),n)},n.readVarint64=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=t,i=0,o=0,s=0,a=0;if(i=127&(a=this.view[t++]),128&a&&(i|=(127&(a=this.view[t++]))<<7,(128&a||this.noAssert&&void 0===a)&&(i|=(127&(a=this.view[t++]))<<14,(128&a||this.noAssert&&void 0===a)&&(i|=(127&(a=this.view[t++]))<<21,(128&a||this.noAssert&&void 0===a)&&(o=127&(a=this.view[t++]),(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[t++]))<<7,(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[t++]))<<14,(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[t++]))<<21,(128&a||this.noAssert&&void 0===a)&&(s=127&(a=this.view[t++]),(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[t++]))<<7,128&a||this.noAssert&&void 0===a))))))))))throw Error("Buffer overrun");var f=e.fromBits(i|o<<28,o>>>4|s<<24,!1);return n?(this.offset=t,f):{value:f,length:t-r}},n.readVarint64ZigZag=function(n){var r=this.readVarint64(n);return r&&r.value instanceof e?r.value=t.zigZagDecode64(r.value):r=t.zigZagDecode64(r),r}),n.writeCString=function(e,t){var n=void 0===t;n&&(t=this.offset);var r,i=e.length;if(!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");for(r=0;r<i;++r)if(0===e.charCodeAt(r))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}i=h.calculateUTF16asUTF8(o(e))[1],t+=i+1;var s=this.buffer.byteLength;return t>s&&this.resize((s*=2)>t?s:t),t-=i+1,h.encodeUTF16toUTF8(o(e),function(e){this.view[t++]=e}.bind(this)),this.view[t++]=0,n?(this.offset=t,this):i},n.readCString=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n,r=e,i=-1;return h.decodeUTF8toUTF16(function(){if(0===i)return null;if(e>=this.limit)throw RangeError("Illegal range: Truncated data, "+e+" < "+this.limit);return 0===(i=this.view[e++])?null:i}.bind(this),n=s(),!0),t?(this.offset=e,n()):{string:n(),length:e-r}},n.writeIString=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var r,i=t;r=h.calculateUTF16asUTF8(o(e),this.noAssert)[1],t+=4+r;var s=this.buffer.byteLength;if(t>s&&this.resize((s*=2)>t?s:t),t-=4+r,this.littleEndian?(this.view[t+3]=r>>>24&255,this.view[t+2]=r>>>16&255,this.view[t+1]=r>>>8&255,this.view[t]=255&r):(this.view[t]=r>>>24&255,this.view[t+1]=r>>>16&255,this.view[t+2]=r>>>8&255,this.view[t+3]=255&r),t+=4,h.encodeUTF16toUTF8(o(e),function(e){this.view[t++]=e}.bind(this)),t!==i+4+r)throw RangeError("Illegal range: Truncated data, "+t+" == "+(t+4+r));return n?(this.offset=t,this):t-i},n.readIString=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var r=e,i=this.readUint32(e),o=this.readUTF8String(i,t.METRICS_BYTES,e+=4);return e+=o.length,n?(this.offset=e,o.string):{string:o.string,length:e-r}},t.METRICS_CHARS="c",t.METRICS_BYTES="b",n.writeUTF8String=function(e,t){var n,r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var i=t;n=h.calculateUTF16asUTF8(o(e))[1],t+=n;var s=this.buffer.byteLength;return t>s&&this.resize((s*=2)>t?s:t),t-=n,h.encodeUTF16toUTF8(o(e),function(e){this.view[t++]=e}.bind(this)),r?(this.offset=t,this):t-i},n.writeString=n.writeUTF8String,t.calculateUTF8Chars=function(e){return h.calculateUTF16asUTF8(o(e))[0]},t.calculateUTF8Bytes=function(e){return h.calculateUTF16asUTF8(o(e))[1]},t.calculateString=t.calculateUTF8Bytes,n.readUTF8String=function(e,n,r){"number"==typeof n&&(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),void 0===n&&(n=t.METRICS_CHARS),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal length: "+e+" (not an integer)");if(e|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var o,a=0,f=r;if(n===t.METRICS_CHARS){if(o=s(),h.decodeUTF8(function(){return a<e&&r<this.limit?this.view[r++]:null}.bind(this),(function(e){++a,h.UTF8toUTF16(e,o)})),a!==e)throw RangeError("Illegal range: Truncated data, "+a+" == "+e);return i?(this.offset=r,o()):{string:o(),length:r-f}}if(n===t.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+e>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+"+e+") <= "+this.buffer.byteLength)}var u=r+e;if(h.decodeUTF8toUTF16(function(){return r<u?this.view[r++]:null}.bind(this),o=s(),this.noAssert),r!==u)throw RangeError("Illegal range: Truncated data, "+r+" == "+u);return i?(this.offset=r,o()):{string:o(),length:r-f}}throw TypeError("Unsupported metrics: "+n)},n.readString=n.readUTF8String,n.writeVString=function(e,n){var r=void 0===n;if(r&&(n=this.offset),!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var i,s,a=n;i=h.calculateUTF16asUTF8(o(e),this.noAssert)[1],s=t.calculateVarint32(i),n+=s+i;var f=this.buffer.byteLength;if(n>f&&this.resize((f*=2)>n?f:n),n-=s+i,n+=this.writeVarint32(i,n),h.encodeUTF16toUTF8(o(e),function(e){this.view[n++]=e}.bind(this)),n!==a+i+s)throw RangeError("Illegal range: Truncated data, "+n+" == "+(n+i+s));return r?(this.offset=n,this):n-a},n.readVString=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r=e,i=this.readVarint32(e),o=this.readUTF8String(i.value,t.METRICS_BYTES,e+=i.length);return e+=o.length,n?(this.offset=e,o.string):{string:o.string,length:e-r}},n.append=function(e,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}e instanceof t||(e=t.wrap(e,n));var o=e.limit-e.offset;if(o<=0)return this;r+=o;var s=this.buffer.byteLength;return r>s&&this.resize((s*=2)>r?s:r),r-=o,this.view.set(e.view.subarray(e.offset,e.limit),r),e.offset+=o,i&&(this.offset+=o),this},n.appendTo=function(e,t){return e.append(this,t),this},n.assert=function(e){return this.noAssert=!e,this},n.capacity=function(){return this.buffer.byteLength},n.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},n.clone=function(e){var n=new t(0,this.littleEndian,this.noAssert);return e?(n.buffer=new ArrayBuffer(this.buffer.byteLength),n.view=new Uint8Array(n.buffer)):(n.buffer=this.buffer,n.view=this.view),n.offset=this.offset,n.markedOffset=this.markedOffset,n.limit=this.limit,n},n.compact=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}if(0===e&&t===this.buffer.byteLength)return this;var n=t-e;if(0===n)return this.buffer=r,this.view=null,this.markedOffset>=0&&(this.markedOffset-=e),this.offset=0,this.limit=0,this;var i=new ArrayBuffer(n),o=new Uint8Array(i);return o.set(this.view.subarray(e,t)),this.buffer=i,this.view=o,this.markedOffset>=0&&(this.markedOffset-=e),this.offset=0,this.limit=n,this},n.copy=function(e,n){if(void 0===e&&(e=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(e===n)return new t(0,this.littleEndian,this.noAssert);var r=n-e,i=new t(r,this.littleEndian,this.noAssert);return i.offset=0,i.limit=r,i.markedOffset>=0&&(i.markedOffset-=e),this.copyTo(i,0,e,n),i},n.copyTo=function(e,n,r,i){var o,s;if(!this.noAssert&&!t.isByteBuffer(e))throw TypeError("Illegal target: Not a ByteBuffer");if(n=(s=void 0===n)?e.offset:0|n,r=(o=void 0===r)?this.offset:0|r,i=void 0===i?this.limit:0|i,n<0||n>e.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+n+" <= "+e.buffer.byteLength);if(r<0||i>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+r+" <= "+this.buffer.byteLength);var a=i-r;return 0===a?e:(e.ensureCapacity(n+a),e.view.set(this.view.subarray(r,i),n),o&&(this.offset+=a),s&&(e.offset+=a),this)},n.ensureCapacity=function(e){var t=this.buffer.byteLength;return t<e?this.resize((t*=2)>e?t:e):this},n.fill=function(e,t,n){var r=void 0===t;if(r&&(t=this.offset),"string"==typeof e&&e.length>0&&(e=e.charCodeAt(0)),void 0===t&&(t=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,t<0||t>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+n+" <= "+this.buffer.byteLength)}if(t>=n)return this;for(;t<n;)this.view[t++]=e;return r&&(this.offset=t),this},n.flip=function(){return this.limit=this.offset,this.offset=0,this},n.mark=function(e){if(e=void 0===e?this.offset:e,!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=e,this},n.order=function(e){if(!this.noAssert&&"boolean"!=typeof e)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!e,this},n.LE=function(e){return this.littleEndian=void 0===e||!!e,this},n.BE=function(e){return this.littleEndian=void 0!==e&&!e,this},n.prepend=function(e,n,r){"number"!=typeof n&&"string"==typeof n||(r=n,n=void 0);var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}e instanceof t||(e=t.wrap(e,n));var o=e.limit-e.offset;if(o<=0)return this;var s=o-r;if(s>0){var a=new ArrayBuffer(this.buffer.byteLength+s),f=new Uint8Array(a);f.set(this.view.subarray(r,this.buffer.byteLength),o),this.buffer=a,this.view=f,this.offset+=s,this.markedOffset>=0&&(this.markedOffset+=s),this.limit+=s,r+=s}else new Uint8Array(this.buffer);return this.view.set(e.view.subarray(e.offset,e.limit),r-o),e.offset=e.limit,i&&(this.offset-=o),this},n.prependTo=function(e,t){return e.prepend(this,t),this},n.printDebug=function(e){"function"!=typeof e&&(e=console.log.bind(console)),e(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},n.remaining=function(){return this.limit-this.offset},n.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},n.resize=function(e){if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal capacity: "+e+" (not an integer)");if((e|=0)<0)throw RangeError("Illegal capacity: 0 <= "+e)}if(this.buffer.byteLength<e){var t=new ArrayBuffer(e),n=new Uint8Array(t);n.set(this.view),this.buffer=t,this.view=n}return this},n.reverse=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}return e===t||Array.prototype.reverse.call(this.view.subarray(e,t)),this},n.skip=function(e){if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal length: "+e+" (not an integer)");e|=0}var t=this.offset+e;if(!this.noAssert&&(t<0||t>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+e+" <= "+this.buffer.byteLength);return this.offset=t,this},n.slice=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}var n=this.clone();return n.offset=e,n.limit=t,n},n.toBuffer=function(e){var t=this.offset,n=this.limit;if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: Not an integer");if(t>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal limit: Not an integer");if(n>>>=0,t<0||t>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+n+" <= "+this.buffer.byteLength)}if(!e&&0===t&&n===this.buffer.byteLength)return this.buffer;if(t===n)return r;var i=new ArrayBuffer(n-t);return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(t,n),0),i},n.toArrayBuffer=n.toBuffer,n.toString=function(e,t,n){if(void 0===e)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof e&&(n=t=e="utf8"),e){case"utf8":return this.toUTF8(t,n);case"base64":return this.toBase64(t,n);case"hex":return this.toHex(t,n);case"binary":return this.toBinary(t,n);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+e)}};var u=function(){for(var e={},t=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],n=[],r=0,i=t.length;r<i;++r)n[t[r]]=r;return e.encode=function(e,n){for(var r,i;null!==(r=e());)n(t[r>>2&63]),i=(3&r)<<4,null!==(r=e())?(n(t[63&((i|=r>>4&15)|r>>4&15)]),i=(15&r)<<2,null!==(r=e())?(n(t[63&(i|r>>6&3)]),n(t[63&r])):(n(t[63&i]),n(61))):(n(t[63&i]),n(61),n(61))},e.decode=function(e,t){var r,i,o;function s(e){throw Error("Illegal character code: "+e)}for(;null!==(r=e());)if(void 0===(i=n[r])&&s(r),null!==(r=e())&&(void 0===(o=n[r])&&s(r),t(i<<2>>>0|(48&o)>>4),null!==(r=e()))){if(void 0===(i=n[r])){if(61===r)break;s(r)}if(t((15&o)<<4>>>0|(60&i)>>2),null!==(r=e())){if(void 0===(o=n[r])){if(61===r)break;s(r)}t((3&i)<<6>>>0|o)}}},e.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)},e}();n.toBase64=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),t|=0,(e|=0)<0||t>this.capacity||e>t)throw RangeError("begin, end");var n;return u.encode(function(){return e<t?this.view[e++]:null}.bind(this),n=s()),n()},t.fromBase64=function(e,n){if("string"!=typeof e)throw TypeError("str");var r=new t(e.length/4*3,n),i=0;return u.decode(o(e),(function(e){r.view[i++]=e})),r.limit=i,r},t.btoa=function(e){return t.fromBinary(e).toBase64()},t.atob=function(e){return t.fromBase64(e).toBinary()},n.toBinary=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),t|=0,(e|=0)<0||t>this.capacity()||e>t)throw RangeError("begin, end");if(e===t)return"";for(var n=[],r=[];e<t;)n.push(this.view[e++]),n.length>=1024&&(r.push(String.fromCharCode.apply(String,n)),n=[]);return r.join("")+String.fromCharCode.apply(String,n)},t.fromBinary=function(e,n){if("string"!=typeof e)throw TypeError("str");for(var r,i=0,o=e.length,s=new t(o,n);i<o;){if((r=e.charCodeAt(i))>255)throw RangeError("illegal char code: "+r);s.view[i++]=r}return s.limit=o,s},n.toDebug=function(e){for(var t,n=-1,r=this.buffer.byteLength,i="",o="",s="";n<r;){if(-1!==n&&(i+=(t=this.view[n])<16?"0"+t.toString(16).toUpperCase():t.toString(16).toUpperCase(),e&&(o+=t>32&&t<127?String.fromCharCode(t):".")),++n,e&&n>0&&n%16==0&&n!==r){for(;i.length<51;)i+=" ";s+=i+o+"\n",i=o=""}n===this.offset&&n===this.limit?i+=n===this.markedOffset?"!":"|":n===this.offset?i+=n===this.markedOffset?"[":"<":n===this.limit?i+=n===this.markedOffset?"]":">":i+=n===this.markedOffset?"'":e||0!==n&&n!==r?" ":""}if(e&&" "!==i){for(;i.length<51;)i+=" ";s+=i+o+"\n"}return e?s:i},t.fromDebug=function(e,n,r){for(var i,o,s=e.length,a=new t((s+1)/3|0,n,r),f=0,u=0,h=!1,l=!1,c=!1,d=!1,g=!1;f<s;){switch(i=e.charAt(f++)){case"!":if(!r){if(l||c||d){g=!0;break}l=c=d=!0}a.offset=a.markedOffset=a.limit=u,h=!1;break;case"|":if(!r){if(l||d){g=!0;break}l=d=!0}a.offset=a.limit=u,h=!1;break;case"[":if(!r){if(l||c){g=!0;break}l=c=!0}a.offset=a.markedOffset=u,h=!1;break;case"<":if(!r){if(l){g=!0;break}l=!0}a.offset=u,h=!1;break;case"]":if(!r){if(d||c){g=!0;break}d=c=!0}a.limit=a.markedOffset=u,h=!1;break;case">":if(!r){if(d){g=!0;break}d=!0}a.limit=u,h=!1;break;case"'":if(!r){if(c){g=!0;break}c=!0}a.markedOffset=u,h=!1;break;case" ":h=!1;break;default:if(!r&&h){g=!0;break}if(o=parseInt(i+e.charAt(f++),16),!r&&(isNaN(o)||o<0||o>255))throw TypeError("Illegal str: Not a debug encoded string");a.view[u++]=o,h=!0}if(g)throw TypeError("Illegal str: Invalid symbol at "+f)}if(!r){if(!l||!d)throw TypeError("Illegal str: Missing offset or limit");if(u<a.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+u+" < "+s)}return a},n.toHex=function(e,t){if(e=void 0===e?this.offset:e,t=void 0===t?this.limit:t,!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}for(var n,r=new Array(t-e);e<t;)(n=this.view[e++])<16?r.push("0",n.toString(16)):r.push(n.toString(16));return r.join("")},t.fromHex=function(e,n,r){if(!r){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if(e.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var i,o=e.length,s=new t(o/2|0,n),a=0,f=0;a<o;a+=2){if(i=parseInt(e.substring(a,a+2),16),!r&&(!isFinite(i)||i<0||i>255))throw TypeError("Illegal str: Contains non-hex characters");s.view[f++]=i}return s.limit=f,s};var h=function(){var e={MAX_CODEPOINT:1114111,encodeUTF8:function(e,t){var n=null;for("number"==typeof e&&(n=e,e=function(){return null});null!==n||null!==(n=e());)n<128?t(127&n):n<2048?(t(n>>6&31|192),t(63&n|128)):n<65536?(t(n>>12&15|224),t(n>>6&63|128),t(63&n|128)):(t(n>>18&7|240),t(n>>12&63|128),t(n>>6&63|128),t(63&n|128)),n=null},decodeUTF8:function(e,t){for(var n,r,i,o,s=function(e){e=e.slice(0,e.indexOf(null));var t=Error(e.toString());throw t.name="TruncatedError",t.bytes=e,t};null!==(n=e());)if(0==(128&n))t(n);else if(192==(224&n))null===(r=e())&&s([n,r]),t((31&n)<<6|63&r);else if(224==(240&n))(null===(r=e())||null===(i=e()))&&s([n,r,i]),t((15&n)<<12|(63&r)<<6|63&i);else{if(240!=(248&n))throw RangeError("Illegal starting byte: "+n);(null===(r=e())||null===(i=e())||null===(o=e()))&&s([n,r,i,o]),t((7&n)<<18|(63&r)<<12|(63&i)<<6|63&o)}},UTF16toUTF8:function(e,t){for(var n,r=null;null!==(n=null!==r?r:e());)n>=55296&&n<=57343&&null!==(r=e())&&r>=56320&&r<=57343?(t(1024*(n-55296)+r-56320+65536),r=null):t(n);null!==r&&t(r)},UTF8toUTF16:function(e,t){var n=null;for("number"==typeof e&&(n=e,e=function(){return null});null!==n||null!==(n=e());)n<=65535?t(n):(t(55296+((n-=65536)>>10)),t(n%1024+56320)),n=null},encodeUTF16toUTF8:function(t,n){e.UTF16toUTF8(t,(function(t){e.encodeUTF8(t,n)}))},decodeUTF8toUTF16:function(t,n){e.decodeUTF8(t,(function(t){e.UTF8toUTF16(t,n)}))},calculateCodePoint:function(e){return e<128?1:e<2048?2:e<65536?3:4},calculateUTF8:function(e){for(var t,n=0;null!==(t=e());)n+=t<128?1:t<2048?2:t<65536?3:4;return n},calculateUTF16asUTF8:function(t){var n=0,r=0;return e.UTF16toUTF8(t,(function(e){++n,r+=e<128?1:e<2048?2:e<65536?3:4})),[n,r]}};return e}();return n.toUTF8=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}var n;try{h.decodeUTF8toUTF16(function(){return e<t?this.view[e++]:null}.bind(this),n=s())}catch(n){if(e!==t)throw RangeError("Illegal range: Truncated data, "+e+" != "+t)}return n()},t.fromUTF8=function(e,n,r){if(!r&&"string"!=typeof e)throw TypeError("Illegal str: Not a string");var i=new t(h.calculateUTF16asUTF8(o(e),!0)[1],n,r),s=0;return h.encodeUTF16toUTF8(o(e),(function(e){i.view[s++]=e})),i.limit=s,i},t},void 0===(o=r.apply(t,i))||(e.exports=o)},6734:function(e,t){var n,r;void 0===(r="function"==typeof(n=function(){"use strict";function e(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function t(e){return!0===(e&&e.__isLong__)}e.prototype.__isLong__,Object.defineProperty(e.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),e.isLong=t;var n={},r={};function i(e,t){var i,o,a;return t?(a=0<=(e>>>=0)&&e<256)&&(o=r[e])?o:(i=s(e,(0|e)<0?-1:0,!0),a&&(r[e]=i),i):(a=-128<=(e|=0)&&e<128)&&(o=n[e])?o:(i=s(e,e<0?-1:0,!1),a&&(n[e]=i),i)}function o(e,t){if(isNaN(e)||!isFinite(e))return t?p:g;if(t){if(e<0)return p;if(e>=l)return m}else{if(e<=-c)return E;if(e+1>=c)return w}return e<0?o(-e,t).neg():s(e%h|0,e/h|0,t)}function s(t,n,r){return new e(t,n,r)}e.fromInt=i,e.fromNumber=o,e.fromBits=s;var a=Math.pow;function f(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return f(e.substring(1),t,n).neg();for(var i=o(a(n,8)),s=g,u=0;u<e.length;u+=8){var h=Math.min(8,e.length-u),l=parseInt(e.substring(u,u+h),n);if(h<8){var c=o(a(n,h));s=s.mul(c).add(o(l))}else s=(s=s.mul(i)).add(o(l))}return s.unsigned=t,s}function u(t){return t instanceof e?t:"number"==typeof t?o(t):"string"==typeof t?f(t):s(t.low,t.high,t.unsigned)}e.fromString=f,e.fromValue=u;var h=4294967296,l=h*h,c=l/2,d=i(1<<24),g=i(0);e.ZERO=g;var p=i(0,!0);e.UZERO=p;var v=i(1);e.ONE=v;var y=i(1,!0);e.UONE=y;var b=i(-1);e.NEG_ONE=b;var w=s(-1,2147483647,!1);e.MAX_VALUE=w;var m=s(-1,-1,!0);e.MAX_UNSIGNED_VALUE=m;var E=s(0,-2147483648,!1);e.MIN_VALUE=E;var T=e.prototype;return T.toInt=function(){return this.unsigned?this.low>>>0:this.low},T.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},T.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var t=o(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=o(a(e,6),this.unsigned),s=this,f="";;){var u=s.div(i),h=(s.sub(u.mul(i)).toInt()>>>0).toString(e);if((s=u).isZero())return h+f;for(;h.length<6;)h="0"+h;f=""+h+f}},T.getHighBits=function(){return this.high},T.getHighBitsUnsigned=function(){return this.high>>>0},T.getLowBits=function(){return this.low},T.getLowBitsUnsigned=function(){return this.low>>>0},T.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},T.isZero=function(){return 0===this.high&&0===this.low},T.isNegative=function(){return!this.unsigned&&this.high<0},T.isPositive=function(){return this.unsigned||this.high>=0},T.isOdd=function(){return 1==(1&this.low)},T.isEven=function(){return 0==(1&this.low)},T.equals=function(e){return t(e)||(e=u(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},T.eq=T.equals,T.notEquals=function(e){return!this.eq(e)},T.neq=T.notEquals,T.lessThan=function(e){return this.comp(e)<0},T.lt=T.lessThan,T.lessThanOrEqual=function(e){return this.comp(e)<=0},T.lte=T.lessThanOrEqual,T.greaterThan=function(e){return this.comp(e)>0},T.gt=T.greaterThan,T.greaterThanOrEqual=function(e){return this.comp(e)>=0},T.gte=T.greaterThanOrEqual,T.compare=function(e){if(t(e)||(e=u(e)),this.eq(e))return 0;var n=this.isNegative(),r=e.isNegative();return n&&!r?-1:!n&&r?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},T.comp=T.compare,T.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(v)},T.neg=T.negate,T.add=function(e){t(e)||(e=u(e));var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,o=65535&this.low,a=e.high>>>16,f=65535&e.high,h=e.low>>>16,l=0,c=0,d=0,g=0;return d+=(g+=o+(65535&e.low))>>>16,c+=(d+=i+h)>>>16,l+=(c+=r+f)>>>16,l+=n+a,s((d&=65535)<<16|(g&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},T.subtract=function(e){return t(e)||(e=u(e)),this.add(e.neg())},T.sub=T.subtract,T.multiply=function(e){if(this.isZero())return g;if(t(e)||(e=u(e)),e.isZero())return g;if(this.eq(E))return e.isOdd()?E:g;if(e.eq(E))return this.isOdd()?E:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(d)&&e.lt(d))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,i=this.low>>>16,a=65535&this.low,f=e.high>>>16,h=65535&e.high,l=e.low>>>16,c=65535&e.low,p=0,v=0,y=0,b=0;return y+=(b+=a*c)>>>16,v+=(y+=i*c)>>>16,y&=65535,v+=(y+=a*l)>>>16,p+=(v+=r*c)>>>16,v&=65535,p+=(v+=i*l)>>>16,v&=65535,p+=(v+=a*h)>>>16,p+=n*c+r*l+i*h+a*f,s((y&=65535)<<16|(b&=65535),(p&=65535)<<16|(v&=65535),this.unsigned)},T.mul=T.multiply,T.divide=function(e){if(t(e)||(e=u(e)),e.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?p:g;var n,r,i;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return p;if(e.gt(this.shru(1)))return y;i=p}else{if(this.eq(E))return e.eq(v)||e.eq(b)?E:e.eq(E)?v:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?v:b:(r=this.sub(e.mul(n)),i=n.add(r.div(e)));if(e.eq(E))return this.unsigned?p:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();i=g}for(r=this;r.gte(e);){n=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(n)/Math.LN2),f=s<=48?1:a(2,s-48),h=o(n),l=h.mul(e);l.isNegative()||l.gt(r);)l=(h=o(n-=f,this.unsigned)).mul(e);h.isZero()&&(h=v),i=i.add(h),r=r.sub(l)}return i},T.div=T.divide,T.modulo=function(e){return t(e)||(e=u(e)),this.sub(this.div(e).mul(e))},T.mod=T.modulo,T.not=function(){return s(~this.low,~this.high,this.unsigned)},T.and=function(e){return t(e)||(e=u(e)),s(this.low&e.low,this.high&e.high,this.unsigned)},T.or=function(e){return t(e)||(e=u(e)),s(this.low|e.low,this.high|e.high,this.unsigned)},T.xor=function(e){return t(e)||(e=u(e)),s(this.low^e.low,this.high^e.high,this.unsigned)},T.shiftLeft=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?s(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):s(0,this.low<<e-32,this.unsigned)},T.shl=T.shiftLeft,T.shiftRight=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?s(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):s(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},T.shr=T.shiftRight,T.shiftRightUnsigned=function(e){if(t(e)&&(e=e.toInt()),0==(e&=63))return this;var n=this.high;return e<32?s(this.low>>>e|n<<32-e,n>>>e,this.unsigned):s(32===e?n:n>>>e-32,0,this.unsigned)},T.shru=T.shiftRightUnsigned,T.toSigned=function(){return this.unsigned?s(this.low,this.high,!1):this},T.toUnsigned=function(){return this.unsigned?this:s(this.low,this.high,!0)},T.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},T.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24&255,255&e,e>>>8&255,e>>>16&255,e>>>24&255]},T.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t]},e})?n.apply(t,[]):n)||(e.exports=r)},5618:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventDisposer=t.Event=void 0;var n=function(){function e(){var e=this;this.event={stack:[],index:0},this.ended=!1,this.execute=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(e.ended)throw new Error("event completed");for(var r=0,i=e.event.stack;r<i.length;r++){var o=i[r];o.execute.apply(o,t)}},this.complete=function(){if(e.ended)throw new Error("event completed");for(var t=0,n=e.event.stack;t<n.length;t++){var r=n[t];r.complete&&r.complete()}e.allUnsubscribe(),e.ended=!0},this.error=function(t){if(e.ended)throw new Error("event completed");for(var n=0,r=e.event.stack;n<r.length;n++){var i=r[n];i.error&&i.error(t)}e.allUnsubscribe()},this.allUnsubscribe=function(){if(e.ended)throw new Error("event completed");e.event={stack:[],index:0}},this.subscribe=function(t,n,r){if(e.ended)throw new Error("event completed");var i=e.event.index;e.event.stack.push({execute:t,id:i,complete:n,error:r}),e.event.index++;var o=function(){e.event.stack=e.event.stack.filter((function(e){return e.id!==i&&e}))};return{unSubscribe:o,disposer:function(e){e.push(o)}}},this.once=function(t,n,r){var i=e.subscribe((function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];i.unSubscribe(),t.apply(void 0,e)}),n,r)},this.watch=function(t,n){return new Promise((function(r,i){var o=n&&setTimeout((function(){i("Event watch timeout")}),n),s=e.subscribe((function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var i=t.apply(void 0,e);i&&(o&&clearTimeout(o),s(),r(e))})).unSubscribe}))},this.asPromise=function(t){return new Promise((function(n,r){var i=t&&setTimeout((function(){r("Event asPromise timeout")}),t);e.once((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i&&clearTimeout(i),n(e)}),(function(){i&&clearTimeout(i),n([])}),(function(e){i&&clearTimeout(i),r(e)}))}))}}return Object.defineProperty(e.prototype,"returnTrigger",{get:function(){var e=this;return{execute:e.execute,error:e.error,complete:e.complete}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"returnListener",{get:function(){var e=this;return{subscribe:e.subscribe,once:e.once,asPromise:e.asPromise}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this.event.stack.length},enumerable:!1,configurable:!0}),e}();t.Event=n;var r=function(){function e(){this._disposer=[]}return e.prototype.push=function(e){this._disposer.push(e)},e.prototype.dispose=function(){this._disposer.forEach((function(e){return e()})),this._disposer=[]},e}();t.EventDisposer=r},5373:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Buffer=void 0;var r=n(5618);t.Buffer=function(e,t){var n=new r.Event,i=[],o=!1;return t.subscribe((function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];o||i.length!==e||(i.forEach((function(e){return n.execute.apply(n,e)})),o=!0),o?n.execute.apply(n,t):i.push(t)})),{subscribe:n.subscribe,asPromise:n.asPromise,once:n.once}}},5124:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5618);t.default=function(){var e=[];return{event:function(){var t=new r.Event;return e.push(t),t},finishAll:function(){e.forEach((function(e){return e.allUnsubscribe()})),e=[]}}}},167:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9312),i=r.__importDefault(n(1389)),o=function(){function e(){this.candidates={}}return e.prototype.exist=function(e){return Object.keys(this.candidates).includes(e)},e.prototype.delete=function(e){delete this.candidates[e]},e.prototype.create=function(e,t){return r.__awaiter(this,void 0,void 0,(function(){var n,o;return r.__generator(this,(function(r){switch(r.label){case 0:return this.exist(e)?[2,{exist:this.candidates[e]}]:[3,1];case 1:return n=new i.default,this.candidates[e]=n,[4,t()];case 2:return o=r.sent(),n.execute.apply(n,o),this.delete(e),[2,{result:o}]}}))}))},e}();t.default=o},1389:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9312),i=n(5618);t.default=i.Event,r.__exportStar(n(5618),t),r.__exportStar(n(5124),t),r.__exportStar(n(167),t),r.__exportStar(n(5373),t)},9312:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>o,__asyncDelegator:()=>E,__asyncGenerator:()=>m,__asyncValues:()=>T,__await:()=>w,__awaiter:()=>h,__classPrivateFieldGet:()=>O,__classPrivateFieldSet:()=>U,__createBinding:()=>c,__decorate:()=>a,__exportStar:()=>d,__extends:()=>i,__generator:()=>l,__importDefault:()=>A,__importStar:()=>S,__makeTemplateObject:()=>_,__metadata:()=>u,__param:()=>f,__read:()=>p,__rest:()=>s,__spread:()=>v,__spreadArray:()=>b,__spreadArrays:()=>y,__values:()=>g});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};function s(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function a(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s}function f(e,t){return function(n,r){t(n,r,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function h(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{f(r.next(e))}catch(e){o(e)}}function a(e){try{f(r.throw(e))}catch(e){o(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))}function l(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}var c=Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function d(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||c(t,e,n)}function g(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function p(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(p(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}function b(e,t){for(var n=0,r=t.length,i=e.length;n<r;n++,i++)e[i]=t[n];return e}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function m(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=i[e](t)).value instanceof w?Promise.resolve(n.value.v).then(f,u):h(o[0][2],n)}catch(e){h(o[0][3],e)}var n}function f(e){a("next",e)}function u(e){a("throw",e)}function h(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}function E(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:w(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function T(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=g(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}function _(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var I=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&c(t,e,n);return I(t,e),t}function A(e){return e&&e.__esModule?e:{default:e}}function O(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function U(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},338:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return f.default}});var r=c(n(3925)),i=c(n(2220)),o=c(n(8015)),s=c(n(197)),a=c(n(5529)),f=c(n(923)),u=c(n(3447)),h=c(n(3584)),l=c(n(5842));function c(e){return e&&e.__esModule?e:{default:e}}},7809:(e,t)=>{"use strict";function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function i(e,t,n,i,o,s){return r((a=r(r(t,e),r(i,s)))<<(f=o)|a>>>32-f,n);var a,f}function o(e,t,n,r,o,s,a){return i(t&n|~t&r,e,t,o,s,a)}function s(e,t,n,r,o,s,a){return i(t&r|n&~r,e,t,o,s,a)}function a(e,t,n,r,o,s,a){return i(t^n^r,e,t,o,s,a)}function f(e,t,n,r,o,s,a){return i(n^(t|~r),e,t,o,s,a)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length,r="0123456789abcdef";for(let i=0;i<n;i+=8){const n=e[i>>5]>>>i%32&255,o=parseInt(r.charAt(n>>>4&15)+r.charAt(15&n),16);t.push(o)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[n(t)-1]=t;let i=1732584193,u=-271733879,h=-1732584194,l=271733878;for(let t=0;t<e.length;t+=16){const n=i,c=u,d=h,g=l;i=o(i,u,h,l,e[t],7,-680876936),l=o(l,i,u,h,e[t+1],12,-389564586),h=o(h,l,i,u,e[t+2],17,606105819),u=o(u,h,l,i,e[t+3],22,-1044525330),i=o(i,u,h,l,e[t+4],7,-176418897),l=o(l,i,u,h,e[t+5],12,1200080426),h=o(h,l,i,u,e[t+6],17,-1473231341),u=o(u,h,l,i,e[t+7],22,-45705983),i=o(i,u,h,l,e[t+8],7,1770035416),l=o(l,i,u,h,e[t+9],12,-1958414417),h=o(h,l,i,u,e[t+10],17,-42063),u=o(u,h,l,i,e[t+11],22,-1990404162),i=o(i,u,h,l,e[t+12],7,1804603682),l=o(l,i,u,h,e[t+13],12,-40341101),h=o(h,l,i,u,e[t+14],17,-1502002290),u=o(u,h,l,i,e[t+15],22,1236535329),i=s(i,u,h,l,e[t+1],5,-165796510),l=s(l,i,u,h,e[t+6],9,-1069501632),h=s(h,l,i,u,e[t+11],14,643717713),u=s(u,h,l,i,e[t],20,-373897302),i=s(i,u,h,l,e[t+5],5,-701558691),l=s(l,i,u,h,e[t+10],9,38016083),h=s(h,l,i,u,e[t+15],14,-660478335),u=s(u,h,l,i,e[t+4],20,-405537848),i=s(i,u,h,l,e[t+9],5,568446438),l=s(l,i,u,h,e[t+14],9,-1019803690),h=s(h,l,i,u,e[t+3],14,-187363961),u=s(u,h,l,i,e[t+8],20,1163531501),i=s(i,u,h,l,e[t+13],5,-1444681467),l=s(l,i,u,h,e[t+2],9,-51403784),h=s(h,l,i,u,e[t+7],14,1735328473),u=s(u,h,l,i,e[t+12],20,-1926607734),i=a(i,u,h,l,e[t+5],4,-378558),l=a(l,i,u,h,e[t+8],11,-2022574463),h=a(h,l,i,u,e[t+11],16,1839030562),u=a(u,h,l,i,e[t+14],23,-35309556),i=a(i,u,h,l,e[t+1],4,-1530992060),l=a(l,i,u,h,e[t+4],11,1272893353),h=a(h,l,i,u,e[t+7],16,-155497632),u=a(u,h,l,i,e[t+10],23,-1094730640),i=a(i,u,h,l,e[t+13],4,681279174),l=a(l,i,u,h,e[t],11,-358537222),h=a(h,l,i,u,e[t+3],16,-722521979),u=a(u,h,l,i,e[t+6],23,76029189),i=a(i,u,h,l,e[t+9],4,-640364487),l=a(l,i,u,h,e[t+12],11,-421815835),h=a(h,l,i,u,e[t+15],16,530742520),u=a(u,h,l,i,e[t+2],23,-995338651),i=f(i,u,h,l,e[t],6,-198630844),l=f(l,i,u,h,e[t+7],10,1126891415),h=f(h,l,i,u,e[t+14],15,-1416354905),u=f(u,h,l,i,e[t+5],21,-57434055),i=f(i,u,h,l,e[t+12],6,1700485571),l=f(l,i,u,h,e[t+3],10,-1894986606),h=f(h,l,i,u,e[t+10],15,-1051523),u=f(u,h,l,i,e[t+1],21,-2054922799),i=f(i,u,h,l,e[t+8],6,1873313359),l=f(l,i,u,h,e[t+15],10,-30611744),h=f(h,l,i,u,e[t+6],15,-1560198380),u=f(u,h,l,i,e[t+13],21,1309151649),i=f(i,u,h,l,e[t+4],6,-145523070),l=f(l,i,u,h,e[t+11],10,-1120210379),h=f(h,l,i,u,e[t+2],15,718787259),u=f(u,h,l,i,e[t+9],21,-343485551),i=r(i,n),u=r(u,c),h=r(h,d),l=r(l,g)}return[i,u,h,l]}(function(e){if(0===e.length)return[];const t=8*e.length,r=new Uint32Array(n(t));for(let n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))}},9871:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=n},5529:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},5842:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(3447))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,i.default)(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n}},4261:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},9469:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(r)};const r=new Uint8Array(16)},7230:(e,t)=>{"use strict";function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],i=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const o=e.length/4+2,s=Math.ceil(o/16),a=new Array(s);for(let t=0;t<s;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];a[t]=n}a[s-1][14]=8*(e.length-1)/Math.pow(2,32),a[s-1][14]=Math.floor(a[s-1][14]),a[s-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<s;++e){const o=new Uint32Array(80);for(let t=0;t<16;++t)o[t]=a[e][t];for(let e=16;e<80;++e)o[e]=r(o[e-3]^o[e-8]^o[e-14]^o[e-16],1);let s=i[0],f=i[1],u=i[2],h=i[3],l=i[4];for(let e=0;e<80;++e){const i=Math.floor(e/20),a=r(s,5)+n(i,f,u,h)+l+t[i]+o[e]>>>0;l=h,h=u,u=r(f,30)>>>0,f=s,s=a}i[0]=i[0]+s>>>0,i[1]=i[1]+f>>>0,i[2]=i[2]+u>>>0,i[3]=i[3]+h>>>0,i[4]=i[4]+l>>>0}return[i[0]>>24&255,i[0]>>16&255,i[0]>>8&255,255&i[0],i[1]>>24&255,i[1]>>16&255,i[1]>>8&255,255&i[1],i[2]>>24&255,i[2]>>16&255,i[2]>>8&255,255&i[2],i[3]>>24&255,i[3]>>16&255,i[3]>>8&255,255&i[3],i[4]>>24&255,i[4]>>16&255,i[4]>>8&255,255&i[4]]}},3584:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=s;var r,i=(r=n(3447))&&r.__esModule?r:{default:r};const o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function s(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.default=function(e,t=0){const n=s(e,t);if(!(0,i.default)(n))throw TypeError("Stringified UUID is invalid");return n}},3925:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(9469))&&r.__esModule?r:{default:r},o=n(3584);let s,a,f=0,u=0;t.default=function(e,t,n){let r=t&&n||0;const h=t||new Array(16);let l=(e=e||{}).node||s,c=void 0!==e.clockseq?e.clockseq:a;if(null==l||null==c){const t=e.random||(e.rng||i.default)();null==l&&(l=s=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==c&&(c=a=16383&(t[6]<<8|t[7]))}let d=void 0!==e.msecs?e.msecs:Date.now(),g=void 0!==e.nsecs?e.nsecs:u+1;const p=d-f+(g-u)/1e4;if(p<0&&void 0===e.clockseq&&(c=c+1&16383),(p<0||d>f)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=d,u=g,a=c,d+=122192928e5;const v=(1e4*(268435455&d)+g)%4294967296;h[r++]=v>>>24&255,h[r++]=v>>>16&255,h[r++]=v>>>8&255,h[r++]=255&v;const y=d/4294967296*1e4&268435455;h[r++]=y>>>8&255,h[r++]=255&y,h[r++]=y>>>24&15|16,h[r++]=y>>>16&255,h[r++]=c>>>8|128,h[r++]=255&c;for(let e=0;e<6;++e)h[r+e]=l[e];return t||(0,o.unsafeStringify)(h)}},2220:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(2969)),i=o(n(7809));function o(e){return e&&e.__esModule?e:{default:e}}var s=(0,r.default)("v3",48,i.default);t.default=s},2969:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,n){function r(e,r,s,a){var f;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=(0,o.default)(r)),16!==(null===(f=r)||void 0===f?void 0:f.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let u=new Uint8Array(16+e.length);if(u.set(r),u.set(e,r.length),u=n(u),u[6]=15&u[6]|t,u[8]=63&u[8]|128,s){a=a||0;for(let e=0;e<16;++e)s[a+e]=u[e];return s}return(0,i.unsafeStringify)(u)}try{r.name=e}catch(e){}return r.DNS=s,r.URL=a,r};var r,i=n(3584),o=(r=n(5842))&&r.__esModule?r:{default:r};const s="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=s;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=a},8015:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(9871)),i=s(n(9469)),o=n(3584);function s(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,n){if(r.default.randomUUID&&!t&&!e)return r.default.randomUUID();const s=(e=e||{}).random||(e.rng||i.default)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=s[e];return t}return(0,o.unsafeStringify)(s)}},197:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(2969)),i=o(n(7230));function o(e){return e&&e.__esModule?e:{default:e}}var s=(0,r.default)("v5",80,i.default);t.default=s},3447:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(4261))&&r.__esModule?r:{default:r};t.default=function(e){return"string"==typeof e&&i.default.test(e)}},923:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,i=(r=n(3447))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,i.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(4430),t=new e.NstrumentaBrowserClient;document.addEventListener("readystatechange",(function(){return e=void 0,n=void 0,i=function(){var e,n,r,i,o,s,a;return function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(f){switch(f.label){case 0:return"complete"!==document.readyState?[2]:(e=document.getElementById("outputTextArea"),t.addListener("open",(function(){var n=!1;console.log("client open"),t.addSubscription("_nstrumenta",(function(e){"health"===e.type&&(document.getElementById("health").innerText=new Date(Date.now()).toLocaleString())})),t.addSubscription("_status",(function(r){var i=r.agentId;document.getElementById("status").innerText=JSON.stringify(r),i&&!n&&(n=!0,t.addSubscription("_".concat(i,"/stdout"),(function(t){var n=(new TextDecoder).decode(t);e.textContent+="".concat(n,"\n")})))}))})),n=new URL(window.location.href).searchParams,r=n.get("wsUrl"),i=r||window.location.origin.replace("http","ws"),(o=n.get("apiKey"))&&localStorage.setItem("apiKey",o),s=localStorage.getItem("apiKey"),a=o||s,[4,t.connect({apiKey:a,wsUrl:i})]);case 1:return f.sent(),[2]}}))},new((r=void 0)||(r=Promise))((function(t,o){function s(e){try{f(i.next(e))}catch(e){o(e)}}function a(e){try{f(i.throw(e))}catch(e){o(e)}}function f(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(e){e(n)}))).then(s,a)}f((i=i.apply(e,n||[])).next())}));var e,n,r,i}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,