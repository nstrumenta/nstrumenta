/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={4430:(e,t,r)=>{"use strict";t.lh=void 0;const n=r(4308),i=r(7374);(0,n.getEndpoints)("prod");r(4607);class s extends n.NstrumentaClientBase{constructor(){super(),this.joinWebRTC=async e=>(console.log("browserClient joinWebRTC"),this.callRPC("joinWebRTC",{room:e})),this.candidateWebRTC=async(e,t,r)=>this.callRPC("candidateWebRTC",{peerId:e,room:t,candidate:r}),this.answerWebRTC=async(e,t,r)=>this.callRPC("answerWebRTC",{peerId:e,room:t,answer:r})}async connect(e){return new Promise((async(t,r)=>{const{wsUrl:s,apiKey:o,verify:a=!0}=e||{},{search:f}=window.location,u=new URLSearchParams(f).get("wsUrl"),h=s||u||window.location.origin.replace("http","ws"),l=new URLSearchParams(f).get("apiKey"),c=localStorage.getItem("apiKey"),d=o||l||c||prompt("Enter your nstrumenta apiKey");if(d&&localStorage.setItem("apiKey",d),this.reconnection.attempts>100)throw new Error("Too many reconnection attempts, stopping");if(!d)throw new Error('nstrumenta api key is missing, pass it as an argument to NstrumentaClient.connect({apiKey: "your key"}) for javascript clients in the browser, or set the NSTRUMENTA_API_KEY environment variable get a key from your nstrumenta project settings https://nstrumenta.com/projects/ *your projectId here* /settings');this.apiKey=d;let g="unverified";if(a)try{g=await(0,n.getToken)(this.apiKey),this.storage=new n.StorageService({apiKey:this.apiKey})}catch(e){throw console.error(e.message),e}this.ws=new WebSocket(h),this.ws.binaryType="arraybuffer",this.ws.addEventListener("open",(async()=>{console.log(`client websocket opened <${h}>`),this.ws?.send(g),this.reconnection.attempts=0,this.connection.status=n.ClientStatus.CONNECTING})),this.ws.addEventListener("close",(t=>{this.connection.status=n.ClientStatus.DISCONNECTED,this.listeners.get("close")?.forEach((e=>e())),console.log(`client websocket closed ${h} code:${t.code} wasClean:${t.wasClean}`),this.subscriptions.clear(),this.reconnection.hasVerified&&(this.reconnection.timeout=setTimeout((()=>{this.reconnection.timeout=null,console.log(`attempting to reconnect, attempts: ${this.reconnection.attempts}`),this.connect(e)}),this.rollOff(this.reconnection.attempts)),this.reconnection.attempts+=1)})),this.ws.addEventListener("error",(e=>{this.connection.status=n.ClientStatus.ERROR,r(`Error in websocket connection: ${e.message}`)})),this.ws.addEventListener("message",(e=>{const r=e.data;let s;try{s=(0,i.deserializeWireMessage)(r)}catch(e){return void console.log(`Couldn't deserialize message ${JSON.stringify(e)}`)}const{channel:o,contents:a}=s;if("_nstrumenta"==o){const{verified:e,error:r,clientId:i}=a;r&&console.error(r),e&&(this.connection.status=n.ClientStatus.CONNECTED,this.reconnection.hasVerified=!0,this.listeners.get("open")?.forEach((e=>e())),this.messageBuffer.forEach((e=>{this.ws?.send(e)})),this.messageBuffer=[],this.clientId=i,t(this.connection))}this.subscriptions.get(o)?.forEach((e=>{e(a)}))}))}))}}t.lh=s},3307:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.listenMixedAudio=void 0,t.listenMixedAudio=(e,t,r)=>async n=>{const[i,s]=await e.listenMixedAudio([e.peerId,n]),o=t.listen(i.mixId,i.mid,n),a=await e.setOffer(s);return await e.sendAnswer(a),r.onMixerCreated.execute(o),o}},7886:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsubscribe=t.subscribe=void 0,t.subscribe=(e,t)=>async r=>{if(t.isSubscribed(r))return;const n=r.map((e=>"application"===e.kind?{info:e}:{info:e,type:e.simulcast?"high":"single"})),[i,s]=await e.subscribe([e.peerId,n]),o=(await Promise.all(i.map((async({label:t,mediaId:r,mid:n})=>{if(t){const[n]=[e.datachannels[t]]||0;return{dc:n,mediaId:r}}return{mid:n,mediaId:r}})))).reduce(((e,t)=>(t.dc?e[t.mediaId]={dc:t.dc}:e[t.mediaId]={mid:t.mid},e)),{}),a=t.subscribe(r,o);if(s){const t=await e.setOffer(s);await e.sendAnswer(t)}return a},t.unsubscribe=(e,t)=>async r=>{const[n]=await e.unsubscribe([r,e.peerId]);t.unsubscribe(r);const i=await e.setOffer(n);await e.sendAnswer(i)}},9674:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unPublish=t.publish=t.join=void 0;const n=r(3386);t.join=e=>async(t,r,i)=>{const s=new n.User(t,e),{answer:o,candidates:a}=await s.join(r,i);return{user:s,answer:o,candidates:a}},t.publish=(e,t,r,n)=>async i=>{const s={kind:i.kind,simulcast:!!i.simulcast},[o,a]=await e.publish([t.peerId,s]);let f;if("application"===i.kind)f=e.datachannels[`__messaging:${o.mediaId}`];else{const r=await t.publish(i,a);await e.sendAnswer(r.localDescription)}return t.published=[...t.published,o],r.onPublish.execute(o),n.publish(o,{datachannel:f})},t.unPublish=(e,t,r)=>async n=>{n.publisherId===e.peerId&&(t.published=t.published.filter((e=>e.mediaId!==n.mediaId)),r.onUnPublish.execute(n),await e.unPublish([n]))}},5893:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Events=void 0;const i=n(r(1389));t.Events=class{constructor(){this.onConnect=new i.default,this.onPublish=new i.default,this.onUnPublish=new i.default,this.onLeave=new i.default,this.onJoin=new i.default,this.onTrack=new i.default,this.onDataChannel=new i.default,this.onUnsubscribe=new i.default,this.onMixerCreated=new i.default}}},55:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MCUManager=void 0;const n=r(1999);t.MCUManager=class{constructor(e,t){this.events=e,this.connection=t,this._mixers={}}get mixers(){return Object.values(this._mixers)}listen(e,t,r){return this._mixers[e]=new n.MCU(this.connection,this.events,e,t),r.forEach((t=>this._mixers[e].add(t))),this._mixers[e]}unListen(e){delete this._mixers[e]}getMixer(e){return this._mixers[e]}}},1999:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MCU=void 0;const i=n(r(1389));t.MCU=class{constructor(e,t,r,n){this.connection=e,this.events=t,this.id=r,this.mid=n,this.infos={},this.onAdded=new i.default,this.onRemoved=new i.default,this.listen()}listen(){this.connection.ontrack.subscribe((({transceiver:e,streams:t})=>{const r=e.mid;this.mid===r&&this.events.onTrack.execute(t[0],this.info)}))}get info(){return{mediaId:"mixer",kind:"mixer",publisherId:this.id,simulcast:!1}}add(e){this.infos[e.mediaId]=e,this.onAdded.execute(e)}remove(e){delete this.infos[e.mediaId],this.onRemoved.execute(e)}}},7276:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Consumer=void 0;const i=n(r(1389));t.Consumer=class{constructor(e,t,r){this.connection=e,this.events=t,this.info=r,this.onMessage=new i.default}initAV(e){return this.connection.ontrack.subscribe((({transceiver:t,streams:r})=>{const n=t.mid;e===n&&this.events.onTrack.execute(r[0],this.info)})),this}initData(e){return this.events.onDataChannel.execute(e),this.datachannel=e,e.onmessage=e=>{this.onMessage.execute(e.data)},this}stop(){this.events.onUnsubscribe.execute(this.info)}}},6698:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SFUManager=void 0;const n=r(7276),i=r(9770);t.SFUManager=class{constructor(e,t){this.events=e,this.connection=t,this.consumers={},this.producers={},this.subscribed=[]}isSubscribed(e){return!!e.find((e=>this.subscribed.find((t=>t.mediaId===e.mediaId))))}publish(e,{datachannel:t}){const r=new i.Producer(e);return t&&(r.datachannel=t),this.producers[e.mediaId]=r,r}subscribe(e,t){return this.subscribed=[...this.subscribed,...e],e.map((e=>{const r=this.consumers[e.mediaId]=new n.Consumer(this.connection,this.events,e),{dc:i,mid:s}=t[e.mediaId];return i?r.initData(i):r.initAV(s),r}))}unsubscribe(e){const t=this.consumers[e.mediaId];this.subscribed=this.subscribed.filter((t=>t.mediaId!==e.mediaId)),delete this.consumers[e.mediaId],t.stop()}getConsumer(e){return this.consumers[e]}getProducer(e){return this.producers[e]}}},9770:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Producer=void 0,t.Producer=class{constructor(e){this.info=e}sendData(e){this.datachannel?.send(e)}}},3386:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.User=void 0;const i=n(r(1389));t.User=class{constructor(e,t){this.roomName=e,this.connection=t,this.peer=this.connection.peer,this.candidates=[],this.onCandidate=new i.default,this.published=[],this.join=async(e,t)=>(this.peerId=e,this.connection.peerId=e,this.peer.onicecandidate=({candidate:e})=>{e&&(this.candidates.push(e),this.onCandidate.execute(e))},{answer:await this.connection.setOffer(t),candidates:this.candidates})}async publish(e,t){if(t&&await this.peer.setRemoteDescription(t),e.track){const t=this.peer.getTransceivers().slice(-1)[0];if(t.sender.replaceTrack(e.track),t.direction="sendonly",e.simulcast){const e=t.sender.getParameters();e.encodings[0]={...e.encodings[0],maxBitrate:68e4,scaleResolutionDownBy:1},e.encodings[1]={...e.encodings[1],maxBitrate:36e3,scaleResolutionDownBy:4},t.sender.setParameters(e)}}return t&&await this.peer.setLocalDescription(await this.peer.createAnswer()),this.peer}}},4607:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MCU=t.ClientSDK=void 0;var n=r(182);Object.defineProperty(t,"ClientSDK",{enumerable:!0,get:function(){return n.ClientSDK}});var i=r(1999);Object.defineProperty(t,"MCU",{enumerable:!0,get:function(){return i.MCU}})},4861:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Connection=void 0;const i=n(r(1389));t.Connection=class{constructor(e){this.events=e,this.onmessage=new i.default,this.ontrack=new i.default,this.ondatachannel=new i.default,this.datachannels={},this.peer=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]}),this.handleLeave=async(...e)=>{const[t,r]=e;if(this.events.onLeave.execute(t),r){const e=await this.setOffer(r);this.sendAnswer(e)}},this.handleJoin=async(...e)=>{const[t]=e;this.events.onJoin.execute(t)},this.handlePublish=(...e)=>{const[t]=e;this.events.onPublish.execute(t)},this.handleUnPublish=async(...e)=>{const[t,r]=e;this.events.onUnPublish.execute(t);const n=await this.setOffer(r);await this.sendAnswer(n)},this.sendCandidate=e=>{this.sendRPC({type:"handleCandidate",payload:[this.peerId,e]})},this.sendAnswer=async e=>{this.sendRPC({type:"handleAnswer",payload:[this.peerId,e]}),await this.waitRPC("handleAnswerDone")},this.publish=async e=>(this.sendRPC({type:"publish",payload:e}),this.waitRPC("handlePublishDone")),this.unPublish=async e=>{this.sendRPC({type:"unPublish",payload:e});const[t]=await this.waitRPC("handleUnPublishDone"),r=await this.setOffer(t);await this.sendAnswer(r)},this.subscribe=async e=>(this.sendRPC({type:"subscribe",payload:e}),await this.waitRPC("handleSubscribe")),this.unsubscribe=async e=>(this.sendRPC({type:"unsubscribe",payload:e}),await this.waitRPC("handleUnsubscribe")),this.getMedias=async()=>{this.sendRPC({type:"getMedias",payload:[this.peerId]});const[e]=await this.waitRPC("handleMedias");return e},this.changeQuality=e=>{this.sendRPC({type:"changeQuality",payload:e})},this.listenMixedAudio=async e=>(this.sendRPC({type:"listenMixedAudio",payload:e}),await this.waitRPC("handleListenMixedAudio")),this.waitRPC=e=>new Promise((t=>{const{unSubscribe:r}=this.onmessage.subscribe((n=>{const{type:i,payload:s}=JSON.parse(n);i===e&&(r(),t(s))}))})),this.peer.ondatachannel=({channel:t})=>{"__sfu"===t.label?(this.channel=t,e.onConnect.execute(),this.peer.onicecandidate=({candidate:e})=>{e&&this.sendCandidate(e)},t.onmessage=({data:e})=>{const{type:t,payload:r}=JSON.parse(e);console.log("from sfu",t,r),this[t]&&this[t](...r),this.onmessage.execute(e)}):(this.datachannels[t.label]=t,this.ondatachannel.execute(t))},this.peer.ontrack=e=>this.ontrack.execute(e)}async setOffer(e){await this.peer.setRemoteDescription(e);const t=await this.peer.createAnswer();return await this.peer.setLocalDescription(t),this.peer.localDescription}addMixedAudioTrack(e){this.sendRPC({type:"addMixedAudioTrack",payload:e})}removeMixedAudioTrack(e){this.sendRPC({type:"removeMixedAudioTrack",payload:e})}sendRPC(e){console.log("sendRPC",e),this.channel.send(JSON.stringify(e))}}},182:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ClientSDK=void 0;const n=r(3307),i=r(7886),s=r(9674),o=r(5893),a=r(55),f=r(6698),u=r(4861);t.ClientSDK=class{constructor(){this.events=new o.Events,this.connection=new u.Connection(this.events),this.sfu=new f.SFUManager(this.events,this.connection),this.mcu=new a.MCUManager(this.events,this.connection),this.medias={},this.streams={},this.events.onPublish.subscribe((e=>{this.medias[e.mediaId]=e})),this.events.onUnPublish.subscribe((e=>{delete this.medias[e.mediaId],delete this.streams[e.mediaId]})),this.events.onLeave.subscribe((e=>{e.forEach((e=>{delete this.medias[e.mediaId],this.events.onUnPublish.execute(e)}))})),this.events.onTrack.subscribe(((e,t)=>{this.streams[t.mediaId]={info:t,stream:e}}))}get peerId(){return this.user?.peerId}async join(e,t,r){const{answer:n,user:i,candidates:o}=await(0,s.join)(this.connection)(e,t,r);return this.user=i,{answer:n,candidates:o,user:i}}async publish(e){return await(0,s.publish)(this.connection,this.user,this.events,this.sfu)(e)}async unPublish(e){await(0,s.unPublish)(this.connection,this.user,this.events)(e)}async subscribe(e){await(0,i.subscribe)(this.connection,this.sfu)(e)}async unsubscribe(e){await(0,i.unsubscribe)(this.connection,this.sfu)(e)}async getMedias(){const e=await this.connection.getMedias();return this.medias=e.reduce(((e,t)=>(e[t.mediaId]=t,e)),{}),e}async listenMixedAudio(e){return await(0,n.listenMixedAudio)(this.connection,this.mcu,this.events)(e)}addMixedAudioTrack(e,t){this.mcu.getMixer(e).add(t),this.connection.addMixedAudioTrack([e,t])}removeMixedAudioTrack(e,t){this.mcu.getMixer(e).remove(t),this.connection.removeMixedAudioTrack([e,t])}changeQuality(e,t){this.connection.changeQuality([this.peerId,e,t])}}},4308:function(e,t,r){"use strict";var n,i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectTypes=t.getEndpoints=t.DEFAULT_HOST_PORT=void 0,t.DEFAULT_HOST_PORT="8088",t.getEndpoints=e=>{const t="local"===e?"http://localhost:8088":"https://us-central1-macro-coil-194519.cloudfunctions.net";return{ADMIN_UTILS:`${t}/adminUtils`,GET_MACHINES:`${t}/getMachines`,GET_UPLOAD_URL:`${t}/getUploadUrl`,GET_UPLOAD_DATA_URL:`${t}/getUploadDataUrl`,REGISTER_AGENT:`${t}/registerAgent`,LIST_AGENTS:`${t}/listAgents`,SET_AGENT_ACTION:`${t}/setAgentAction`,GET_AGENT_ID_BY_TAG:`${t}/getAgentIdByTag`,CLEAN_AGENT_ACTIONS:`${t}/cleanAgentActions`,GET_DOWNLOAD_URL:`${t}/getDownloadUrl`,GET_PROJECT_DOWNLOAD_URL:`${t}/getProjectDownloadUrl`,GENERATE_DATA_ID:`${t}/generateDataId`,LIST_MODULES:`${t}/listModules`,GET_TOKEN:`${t}/getToken`,VERIFY_TOKEN:`${t}/verifyToken`,VERIFY_API_KEY:`${t}/verifyApiKey`,SET_STORAGE_OBJECT:`${t}/setStorageObject`,SET_DATA_METADATA:`${t}/setDataMetadata`,LIST_STORAGE_OBJECTS:`${t}/listStorageObjects`,QUERY_DATA:`${t}/queryData`,v2:{LIST_MODULES:`${t}/listModulesV2`}}},(n=t.ObjectTypes||(t.ObjectTypes={})).DATA="data",n.MODULES="modules",s(r(7280),t),s(r(1371),t)},7374:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.deserializeByteBuffer=t.deserializeWireMessage=t.deserializeBlob=t.makeBusMessageFromBuffer=t.makeBusMessageFromJsonObject=t.BusMessageType=t.BusMessage=void 0;const i=n(r(1546));class s extends i.default{}var o;t.BusMessage=s,function(e){e[e.BUS_MESSAGE_TYPES_BEGIN=100]="BUS_MESSAGE_TYPES_BEGIN",e[e.Json=101]="Json",e[e.Buffer=102]="Buffer",e[e.BUS_MESSAGE_TYPES_END=103]="BUS_MESSAGE_TYPES_END"}(o=t.BusMessageType||(t.BusMessageType={})),t.makeBusMessageFromJsonObject=(e,t)=>(new i.default).writeUint32(o.Json).writeIString(e).writeIString(JSON.stringify(t)).flip().toBuffer(),t.makeBusMessageFromBuffer=(e,t)=>(new i.default).writeUint32(o.Buffer).writeIString(e).append(t).flip().toBuffer(),t.deserializeBlob=async e=>{const r=await e.arrayBuffer(),n=new i.default(r.byteLength);return new Uint8Array(r).forEach((e=>{n.writeUint8(e)})),n.flip(),(0,t.deserializeByteBuffer)(n)},t.deserializeWireMessage=e=>{if(e instanceof ArrayBuffer){const r=new i.default(e.byteLength);return new Uint8Array(e).forEach((e=>{r.writeUint8(e)})),r.flip(),(0,t.deserializeByteBuffer)(r)}{const r=new i.default(e.byteLength);return r.buffer=e,(0,t.deserializeByteBuffer)(r)}},t.deserializeByteBuffer=e=>{const t=e.readInt32();if(t<=o.BUS_MESSAGE_TYPES_BEGIN||t>=o.BUS_MESSAGE_TYPES_END)throw`unknown busMessageType ${t}: ${e}`;const r=e.readIString();let n;switch(t){case o.Json:n=JSON.parse(e.readIString());break;case o.Buffer:n=e.buffer.slice(e.offset)}return{channel:r,busMessageType:t,contents:n}}},9187:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StorageService=t.NstrumentaClientBase=t.getToken=t.ClientStatus=void 0;const i=n(r(4206)),s=r(338),o=r(4308),a=r(7374);var f;!function(e){e[e.INIT=0]="INIT",e[e.READY=1]="READY",e[e.CONNECTED=2]="CONNECTED",e[e.DISCONNECTED=3]="DISCONNECTED",e[e.CONNECTING=4]="CONNECTING",e[e.ERROR=5]="ERROR"}(f=t.ClientStatus||(t.ClientStatus={})),t.getToken=async e=>{const t={"x-api-key":e,"Content-Type":"application/json"};try{"undefined"!=typeof process&&await process.nextTick((()=>{}));const{data:e}=await i.default.get((0,o.getEndpoints)("prod").GET_TOKEN,{headers:t});return e.token}catch(e){const t=`Problem getting token, check api key, err: ${e.message}`;throw new Error(t)}},t.NstrumentaClientBase=class{constructor(){this.ws=null,this.apiKey=null,this.reconnection={hasVerified:!1,attempts:0,timeout:null},this.clientId=null,this.connection={status:f.INIT},this.addSubscription=async(e,t)=>{const{subscriptionId:r}=await this.callRPC("subscribe",{channel:e});console.log(`Nstrumenta client subscribe <${e}> subscriptionId:${r}`);const n=this.subscriptions.get(e)||new Map;return n.set(r,t),this.subscriptions.set(e,n),async()=>{await this.callRPC("unsubscribe",{channel:e,subscriptionId:r}),this.subscriptions.get(e)?.delete(r)}},this.listeners=new Map,this.subscriptions=new Map,this.datalogs=new Map,this.messageBuffer=[],this.endpoints=(0,o.getEndpoints)("prod"),this.addSubscription=this.addSubscription.bind(this),this.addListener=this.addListener.bind(this),this.connect=this.connect.bind(this)}async shutdown(){this.listeners.clear(),this.subscriptions.clear(),this.datalogs.clear(),this.messageBuffer=[],this.reconnection.timeout&&(clearTimeout(this.reconnection.timeout),this.reconnection.timeout=null),this.ws?.removeAllListeners(),this.ws?.close()}rollOff(e){return 0==e?0:Math.min(1e3*Math.pow(e,2),18e5)}send(e,t){this.bufferedSend((0,o.makeBusMessageFromJsonObject)(e,t))}sendBuffer(e,t){this.bufferedSend((0,a.makeBusMessageFromBuffer)(e,t))}bufferedSend(e){this.ws?.readyState!==this.ws?.OPEN?(console.log("adding to messageBuffer, length:",this.messageBuffer.length),this.messageBuffer.push(e)):this.ws?.send(e)}addListener(e,t){this.listeners.get(e)||this.listeners.set(e,[]);const r=this.listeners.get(e);r&&r.push(t)}addStringToDataLog(e,t){const r=this.datalogs.get(e);r?r.push(t):(console.log(`starting new log: ${e}`),this.datalogs.set(e,[t]))}async uploadData(e,t,r){const n=t.size;let s;s=(await i.default.post(this.endpoints.GET_UPLOAD_URL,{path:e,size:n,meta:r},{headers:{contentType:"application/json","x-api-key":this.apiKey}})).data?.uploadUrl,await i.default.put(s,t,{maxBodyLength:1/0,maxContentLength:1/0,headers:{contentType:"application/octet-stream",contentLength:`${n}`,contentLengthRange:`bytes 0-${n-1}/${n}`}})}async ping(){return this.callRPC("ping",{sendTimestamp:Date.now()})}async startLog(e,t,r){this.send("_nstrumenta",{command:"startLog",name:e,channels:t,config:r})}async finishLog(e){console.log("finish log"),this.send("_nstrumenta",{command:"finishLog",name:e})}async callRPC(e,t){console.log("callRPC",e,t);const r=(0,s.v4)(),n=`__rpc/${e}/${r}`,i=`${n}/request`,a=`${n}/response`;return new Promise((async e=>{const n=this.subscriptions.get(a)||new Map;n.set(r,(t=>{n?.delete(r),e(t)})),this.subscriptions.set(a,n),this.ws?.send((0,o.makeBusMessageFromJsonObject)(i,t))}))}},t.StorageService=class{constructor(e){this.apiKey=e.apiKey,this.endpoints=(0,o.getEndpoints)("prod")}async download(e){const t=await(0,i.default)(this.endpoints.GET_PROJECT_DOWNLOAD_URL,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{path:e}});console.log("REQ:",t.request);const{data:r}=await(0,i.default)(t.data,{method:"GET",responseType:"blob"});return r}async query({filenames:e,tag:t,before:r,after:n,limit:s=1,metadata:o}){const a={tags:t,before:r,after:n,limit:s,filenames:e,metadata:"string"==typeof o?JSON.parse(o):"object"==typeof o?o:{}},f={method:"post",headers:{"x-api-key":this.apiKey},data:a};try{return(await(0,i.default)(this.endpoints.QUERY_DATA,f)).data}catch(e){return console.log(`Something went wrong: ${e.message}`),[]}}async list(e){return(await(0,i.default)(this.endpoints.LIST_STORAGE_OBJECTS,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{type:e}})).data}async upload({filename:e,data:t,meta:r,dataId:n}){const s=t.size;let o,a=n;a||(a=(await(0,i.default)(this.endpoints.GENERATE_DATA_ID,{headers:{"x-api-key":this.apiKey,method:"post"}})).data.dataId);const f={method:"post",headers:{"x-api-key":this.apiKey,"Content-Type":"application/json"},data:{name:e,dataId:a,size:s,metadata:r}};let u=await(0,i.default)(this.endpoints.GET_UPLOAD_DATA_URL,f);if(o=u.data?.uploadUrl,!o)return console.warn(`no upload url returned, can't upload ${e}`),void console.log(u.data);const h=u.data?.remoteFilePath,l={maxBodyLength:1/0,maxContentLength:1/0,headers:{contentLength:`${s}`,contentLengthRange:`bytes 0-${s-1}/${s}`,"content-type":"application/octet-stream"},url:o,method:"PUT",data:t};console.log({remoteFilePath:h,uploadConfig:l}),await(0,i.default)(l)}}},7280:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.makeBusMessageFromJsonObject=t.deserializeWireMessage=t.deserializeBlob=t.BusMessage=void 0;var s=r(7374);Object.defineProperty(t,"BusMessage",{enumerable:!0,get:function(){return s.BusMessage}}),Object.defineProperty(t,"deserializeBlob",{enumerable:!0,get:function(){return s.deserializeBlob}}),Object.defineProperty(t,"deserializeWireMessage",{enumerable:!0,get:function(){return s.deserializeWireMessage}}),Object.defineProperty(t,"makeBusMessageFromJsonObject",{enumerable:!0,get:function(){return s.makeBusMessageFromJsonObject}}),i(r(9187),t)},1371:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4206:(e,t,r)=>{e.exports=r(8057)},4387:(e,t,r)=>{"use strict";var n=r(7485),i=r(4570),s=r(2940),o=r(581),a=r(574),f=r(3845),u=r(8338),h=r(8524),l=r(4832),c=r(7132);e.exports=function(e){return new Promise((function(t,r){var d,g=e.data,p=e.headers,b=e.responseType;function v(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}n.isFormData(g)&&delete p["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(w+":"+m)}var E=a(e.baseURL,e.url);function T(){if(y){var n="getAllResponseHeaders"in y?f(y.getAllResponseHeaders()):null,s={data:b&&"text"!==b&&"json"!==b?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:n,config:e,request:y};i((function(e){t(e),v()}),(function(e){r(e),v()}),s),y=null}}if(y.open(e.method.toUpperCase(),o(E,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,"onloadend"in y?y.onloadend=T:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(T)},y.onabort=function(){y&&(r(h("Request aborted",e,"ECONNABORTED",y)),y=null)},y.onerror=function(){r(h("Network Error",e,null,y)),y=null},y.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",n=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(h(t,e,n.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",y)),y=null},n.isStandardBrowserEnv()){var _=(e.withCredentials||u(E))&&e.xsrfCookieName?s.read(e.xsrfCookieName):void 0;_&&(p[e.xsrfHeaderName]=_)}"setRequestHeader"in y&&n.forEach(p,(function(e,t){void 0===g&&"content-type"===t.toLowerCase()?delete p[t]:y.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),b&&"json"!==b&&(y.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){y&&(r(!e||e&&e.type?new c("canceled"):e),y.abort(),y=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),g||(g=null),y.send(g)}))}},8057:(e,t,r)=>{"use strict";var n=r(7485),i=r(875),s=r(5029),o=r(4941),a=function e(t){var r=new s(t),a=i(s.prototype.request,r);return n.extend(a,s.prototype,r),n.extend(a,r),a.create=function(r){return e(o(t,r))},a}(r(8396));a.Axios=s,a.Cancel=r(7132),a.CancelToken=r(4603),a.isCancel=r(1475),a.VERSION=r(3345).version,a.all=function(e){return Promise.all(e)},a.spread=r(5739),a.isAxiosError=r(5835),e.exports=a,e.exports.default=a},7132:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4603:(e,t,r)=>{"use strict";var n=r(7132);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;this.promise.then((function(e){if(r._listeners){var t,n=r._listeners.length;for(t=0;t<n;t++)r._listeners[t](e);r._listeners=null}})),this.promise.then=function(e){var t,n=new Promise((function(e){r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},i.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},1475:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},5029:(e,t,r)=>{"use strict";var n=r(7485),i=r(581),s=r(8096),o=r(5009),a=r(4941),f=r(6144),u=f.validators;function h(e){this.defaults=e,this.interceptors={request:new s,response:new s}}h.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var r=t.transitional;void 0!==r&&f.assertOptions(r,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var n=[],i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,n.unshift(e.fulfilled,e.rejected))}));var s,h=[];if(this.interceptors.response.forEach((function(e){h.push(e.fulfilled,e.rejected)})),!i){var l=[o,void 0];for(Array.prototype.unshift.apply(l,n),l=l.concat(h),s=Promise.resolve(t);l.length;)s=s.then(l.shift(),l.shift());return s}for(var c=t;n.length;){var d=n.shift(),g=n.shift();try{c=d(c)}catch(e){g(e);break}}try{s=o(c)}catch(e){return Promise.reject(e)}for(;h.length;)s=s.then(h.shift(),h.shift());return s},h.prototype.getUri=function(e){return e=a(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){h.prototype[e]=function(t,r){return this.request(a(r||{},{method:e,url:t,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(e){h.prototype[e]=function(t,r,n){return this.request(a(n||{},{method:e,url:t,data:r}))}})),e.exports=h},8096:(e,t,r)=>{"use strict";var n=r(7485);function i(){this.handlers=[]}i.prototype.use=function(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},574:(e,t,r)=>{"use strict";var n=r(2642),i=r(2288);e.exports=function(e,t){return e&&!n(t)?i(e,t):t}},8524:(e,t,r)=>{"use strict";var n=r(9953);e.exports=function(e,t,r,i,s){var o=new Error(e);return n(o,t,r,i,s)}},5009:(e,t,r)=>{"use strict";var n=r(7485),i=r(9212),s=r(1475),o=r(8396),a=r(7132);function f(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a("canceled")}e.exports=function(e){return f(e),e.headers=e.headers||{},e.data=i.call(e,e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return f(e),t.data=i.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return s(t)||(f(e),t&&t.response&&(t.response.data=i.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},9953:e=>{"use strict";e.exports=function(e,t,r,n,i){return e.config=t,r&&(e.code=r),e.request=n,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},4941:(e,t,r)=>{"use strict";var n=r(7485);e.exports=function(e,t){t=t||{};var r={};function i(e,t){return n.isPlainObject(e)&&n.isPlainObject(t)?n.merge(e,t):n.isPlainObject(t)?n.merge({},t):n.isArray(t)?t.slice():t}function s(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:i(void 0,e[r]):i(e[r],t[r])}function o(e){if(!n.isUndefined(t[e]))return i(void 0,t[e])}function a(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:i(void 0,e[r]):i(void 0,t[r])}function f(r){return r in t?i(e[r],t[r]):r in e?i(void 0,e[r]):void 0}var u={url:o,method:o,data:o,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:f};return n.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||s,i=t(e);n.isUndefined(i)&&t!==f||(r[e]=i)})),r}},4570:(e,t,r)=>{"use strict";var n=r(8524);e.exports=function(e,t,r){var i=r.config.validateStatus;r.status&&i&&!i(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},9212:(e,t,r)=>{"use strict";var n=r(7485),i=r(8396);e.exports=function(e,t,r){var s=this||i;return n.forEach(r,(function(r){e=r.call(s,e,t)})),e}},8396:(e,t,r)=>{"use strict";var n=r(7485),i=r(1446),s=r(9953),o=r(4832),a={"Content-Type":"application/x-www-form-urlencoded"};function f(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,h={transitional:o,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=r(4387)),u),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(f(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)||t&&"application/json"===t["Content-Type"]?(f(t,"application/json"),function(e,t,r){if(n.isString(e))try{return(0,JSON.parse)(e),n.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||h.transitional,r=t&&t.silentJSONParsing,i=t&&t.forcedJSONParsing,o=!r&&"json"===this.responseType;if(o||i&&n.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(o){if("SyntaxError"===e.name)throw s(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(e){h.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){h.headers[e]=n.merge(a)})),e.exports=h},4832:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},3345:e=>{e.exports={version:"0.26.1"}},875:e=>{"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},581:(e,t,r)=>{"use strict";var n=r(7485);function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var s;if(r)s=r(t);else if(n.isURLSearchParams(t))s=t.toString();else{var o=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),o.push(i(t)+"="+i(e))})))})),s=o.join("&")}if(s){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},2288:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},2940:(e,t,r)=>{"use strict";var n=r(7485);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,i,s,o){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(i)&&a.push("path="+i),n.isString(s)&&a.push("domain="+s),!0===o&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},2642:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},5835:(e,t,r)=>{"use strict";var n=r(7485);e.exports=function(e){return n.isObject(e)&&!0===e.isAxiosError}},8338:(e,t,r)=>{"use strict";var n=r(7485);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function i(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=i(window.location.href),function(t){var r=n.isString(t)?i(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},1446:(e,t,r)=>{"use strict";var n=r(7485);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},3845:(e,t,r)=>{"use strict";var n=r(7485),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,s,o={};return e?(n.forEach(e.split("\n"),(function(e){if(s=e.indexOf(":"),t=n.trim(e.substr(0,s)).toLowerCase(),r=n.trim(e.substr(s+1)),t){if(o[t]&&i.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([r]):o[t]?o[t]+", "+r:r}})),o):o}},5739:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},6144:(e,t,r)=>{"use strict";var n=r(3345).version,i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));var s={};i.transitional=function(e,t,r){function i(e,t){return"[Axios v"+n+"] Transitional option '"+e+"'"+t+(r?". "+r:"")}return function(r,n,o){if(!1===e)throw new Error(i(n," has been removed"+(t?" in "+t:"")));return t&&!s[n]&&(s[n]=!0,console.warn(i(n," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,n,o)}},e.exports={assertOptions:function(e,t,r){if("object"!=typeof e)throw new TypeError("options must be an object");for(var n=Object.keys(e),i=n.length;i-- >0;){var s=n[i],o=t[s];if(o){var a=e[s],f=void 0===a||o(a,s,e);if(!0!==f)throw new TypeError("option "+s+" must be "+f)}else if(!0!==r)throw Error("Unknown option "+s)}},validators:i}},7485:(e,t,r)=>{"use strict";var n=r(875),i=Object.prototype.toString;function s(e){return Array.isArray(e)}function o(e){return void 0===e}function a(e){return"[object ArrayBuffer]"===i.call(e)}function f(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==i.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function h(e){return"[object Function]"===i.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:a,isBuffer:function(e){return null!==e&&!o(e)&&null!==e.constructor&&!o(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===i.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&a(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isPlainObject:u,isUndefined:o,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:h,isStream:function(e){return f(e)&&h(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===i.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function r(r,n){u(t[n])&&u(r)?t[n]=e(t[n],r):u(r)?t[n]=e({},r):s(r)?t[n]=r.slice():t[n]=r}for(var n=0,i=arguments.length;n<i;n++)l(arguments[n],r);return t},extend:function(e,t,r){return l(t,(function(t,i){e[i]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},1546:function(e,t,r){var n,i,s;i=[r(6734)],n=function(e){"use strict";var t=function(e,r,i){if(void 0===e&&(e=t.DEFAULT_CAPACITY),void 0===r&&(r=t.DEFAULT_ENDIAN),void 0===i&&(i=t.DEFAULT_NOASSERT),!i){if((e|=0)<0)throw RangeError("Illegal capacity");r=!!r,i=!!i}this.buffer=0===e?n:new ArrayBuffer(e),this.view=0===e?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=e,this.littleEndian=r,this.noAssert=i};t.VERSION="5.0.1",t.LITTLE_ENDIAN=!0,t.BIG_ENDIAN=!1,t.DEFAULT_CAPACITY=16,t.DEFAULT_ENDIAN=t.BIG_ENDIAN,t.DEFAULT_NOASSERT=!1,t.Long=e||null;var r=t.prototype;r.__isByteBuffer__,Object.defineProperty(r,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var n=new ArrayBuffer(0),i=String.fromCharCode;function s(e){var t=0;return function(){return t<e.length?e.charCodeAt(t++):null}}function o(){var e=[],t=[];return function(){if(0===arguments.length)return t.join("")+i.apply(String,e);e.length+arguments.length>1024&&(t.push(i.apply(String,e)),e.length=0),Array.prototype.push.apply(e,arguments)}}function a(e,t,r,n,i){var s,o,a=8*i-n-1,f=(1<<a)-1,u=f>>1,h=-7,l=r?i-1:0,c=r?-1:1,d=e[t+l];for(l+=c,s=d&(1<<-h)-1,d>>=-h,h+=a;h>0;s=256*s+e[t+l],l+=c,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=n;h>0;o=256*o+e[t+l],l+=c,h-=8);if(0===s)s=1-u;else{if(s===f)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,n),s-=u}return(d?-1:1)*o*Math.pow(2,s-n)}function f(e,t,r,n,i,s){var o,a,f,u=8*s-i-1,h=(1<<u)-1,l=h>>1,c=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:s-1,g=n?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=h):(o=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-o))<1&&(o--,f*=2),(t+=o+l>=1?c/f:c*Math.pow(2,1-l))*f>=2&&(o++,f/=2),o+l>=h?(a=0,o=h):o+l>=1?(a=(t*f-1)*Math.pow(2,i),o+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,i),o=0));i>=8;e[r+d]=255&a,d+=g,a/=256,i-=8);for(o=o<<i|a,u+=i;u>0;e[r+d]=255&o,d+=g,o/=256,u-=8);e[r+d-g]|=128*p}t.accessor=function(){return Uint8Array},t.allocate=function(e,r,n){return new t(e,r,n)},t.concat=function(e,r,n,i){"boolean"!=typeof r&&"string"==typeof r||(i=n,n=r,r=void 0);for(var s,o=0,a=0,f=e.length;a<f;++a)t.isByteBuffer(e[a])||(e[a]=t.wrap(e[a],r)),(s=e[a].limit-e[a].offset)>0&&(o+=s);if(0===o)return new t(0,n,i);var u,h=new t(o,n,i);for(a=0;a<f;)(s=(u=e[a++]).limit-u.offset)<=0||(h.view.set(u.view.subarray(u.offset,u.limit),h.offset),h.offset+=s);return h.limit=h.offset,h.offset=0,h},t.isByteBuffer=function(e){return!0===(e&&e.__isByteBuffer__)},t.type=function(){return ArrayBuffer},t.wrap=function(e,n,i,s){if("string"!=typeof n&&(s=i,i=n,n=void 0),"string"==typeof e)switch(void 0===n&&(n="utf8"),n){case"base64":return t.fromBase64(e,i);case"hex":return t.fromHex(e,i);case"binary":return t.fromBinary(e,i);case"utf8":return t.fromUTF8(e,i);case"debug":return t.fromDebug(e,i);default:throw Error("Unsupported encoding: "+n)}if(null===e||"object"!=typeof e)throw TypeError("Illegal buffer");var o;if(t.isByteBuffer(e))return(o=r.clone.call(e)).markedOffset=-1,o;if(e instanceof Uint8Array)o=new t(0,i,s),e.length>0&&(o.buffer=e.buffer,o.offset=e.byteOffset,o.limit=e.byteOffset+e.byteLength,o.view=new Uint8Array(e.buffer));else if(e instanceof ArrayBuffer)o=new t(0,i,s),e.byteLength>0&&(o.buffer=e,o.offset=0,o.limit=e.byteLength,o.view=e.byteLength>0?new Uint8Array(e):null);else{if("[object Array]"!==Object.prototype.toString.call(e))throw TypeError("Illegal buffer");(o=new t(e.length,i,s)).limit=e.length;for(var a=0;a<e.length;++a)o.view[a]=e[a]}return o},r.writeBitSet=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if(!(e instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var n,i=t,s=e.length,o=s>>3,a=0;for(t+=this.writeVarint32(s,t);o--;)n=1&!!e[a++]|(1&!!e[a++])<<1|(1&!!e[a++])<<2|(1&!!e[a++])<<3|(1&!!e[a++])<<4|(1&!!e[a++])<<5|(1&!!e[a++])<<6|(1&!!e[a++])<<7,this.writeByte(n,t++);if(a<s){var f=0;for(n=0;a<s;)n|=(1&!!e[a++])<<f++;this.writeByte(n,t++)}return r?(this.offset=t,this):t-i},r.readBitSet=function(e){var t=void 0===e;t&&(e=this.offset);var r,n=this.readVarint32(e),i=n.value,s=i>>3,o=0,a=[];for(e+=n.length;s--;)r=this.readByte(e++),a[o++]=!!(1&r),a[o++]=!!(2&r),a[o++]=!!(4&r),a[o++]=!!(8&r),a[o++]=!!(16&r),a[o++]=!!(32&r),a[o++]=!!(64&r),a[o++]=!!(128&r);if(o<i){var f=0;for(r=this.readByte(e++);o<i;)a[o++]=!!(r>>f++&1)}return t&&(this.offset=e),a},r.readBytes=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+e>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+"+e+") <= "+this.buffer.byteLength)}var n=this.slice(t,t+e);return r&&(this.offset+=e),n},r.writeBytes=r.append,r.writeInt8=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=1;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=1,this.view[t]=e,r&&(this.offset+=1),this},r.writeByte=r.writeInt8,r.readInt8=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r=this.view[e];return 128==(128&r)&&(r=-(255-r+1)),t&&(this.offset+=1),r},r.readByte=r.readInt8,r.writeUint8=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=1;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=1,this.view[t]=e,r&&(this.offset+=1),this},r.writeUInt8=r.writeUint8,r.readUint8=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r=this.view[e];return t&&(this.offset+=1),r},r.readUInt8=r.readUint8,r.writeInt16=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=2;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=2,this.littleEndian?(this.view[t+1]=(65280&e)>>>8,this.view[t]=255&e):(this.view[t]=(65280&e)>>>8,this.view[t+1]=255&e),r&&(this.offset+=2),this},r.writeShort=r.writeInt16,r.readInt16=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[e],r|=this.view[e+1]<<8):(r=this.view[e]<<8,r|=this.view[e+1]),32768==(32768&r)&&(r=-(65535-r+1)),t&&(this.offset+=2),r},r.readShort=r.readInt16,r.writeUint16=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=2;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=2,this.littleEndian?(this.view[t+1]=(65280&e)>>>8,this.view[t]=255&e):(this.view[t]=(65280&e)>>>8,this.view[t+1]=255&e),r&&(this.offset+=2),this},r.writeUInt16=r.writeUint16,r.readUint16=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[e],r|=this.view[e+1]<<8):(r=this.view[e]<<8,r|=this.view[e+1]),t&&(this.offset+=2),r},r.readUInt16=r.readUint16,r.writeInt32=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=4,this.littleEndian?(this.view[t+3]=e>>>24&255,this.view[t+2]=e>>>16&255,this.view[t+1]=e>>>8&255,this.view[t]=255&e):(this.view[t]=e>>>24&255,this.view[t+1]=e>>>16&255,this.view[t+2]=e>>>8&255,this.view[t+3]=255&e),r&&(this.offset+=4),this},r.writeInt=r.writeInt32,r.readInt32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0):(r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0),r|=0,t&&(this.offset+=4),r},r.readInt=r.readInt32,r.writeUint32=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=4,this.littleEndian?(this.view[t+3]=e>>>24&255,this.view[t+2]=e>>>16&255,this.view[t+1]=e>>>8&255,this.view[t]=255&e):(this.view[t]=e>>>24&255,this.view[t+1]=e>>>16&255,this.view[t+2]=e>>>8&255,this.view[t+3]=255&e),r&&(this.offset+=4),this},r.writeUInt32=r.writeUint32,r.readUint32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0):(r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0),t&&(this.offset+=4),r},r.readUInt32=r.readUint32,e&&(r.writeInt64=function(t,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"==typeof t)t=e.fromNumber(t);else if("string"==typeof t)t=e.fromString(t);else if(!(t&&t instanceof e))throw TypeError("Illegal value: "+t+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t)),r+=8;var i=this.buffer.byteLength;r>i&&this.resize((i*=2)>r?i:r),r-=8;var s=t.low,o=t.high;return this.littleEndian?(this.view[r+3]=s>>>24&255,this.view[r+2]=s>>>16&255,this.view[r+1]=s>>>8&255,this.view[r]=255&s,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=s>>>24&255,this.view[r+1]=s>>>16&255,this.view[r+2]=s>>>8&255,this.view[r+3]=255&s),n&&(this.offset+=8),this},r.writeLong=r.writeInt64,r.readInt64=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var n=0,i=0;this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0,t+=4,i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0):(i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0,t+=4,n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0);var s=new e(n,i,!1);return r&&(this.offset+=8),s},r.readLong=r.readInt64,r.writeUint64=function(t,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"==typeof t)t=e.fromNumber(t);else if("string"==typeof t)t=e.fromString(t);else if(!(t&&t instanceof e))throw TypeError("Illegal value: "+t+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t)),r+=8;var i=this.buffer.byteLength;r>i&&this.resize((i*=2)>r?i:r),r-=8;var s=t.low,o=t.high;return this.littleEndian?(this.view[r+3]=s>>>24&255,this.view[r+2]=s>>>16&255,this.view[r+1]=s>>>8&255,this.view[r]=255&s,r+=4,this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o):(this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o,r+=4,this.view[r]=s>>>24&255,this.view[r+1]=s>>>16&255,this.view[r+2]=s>>>8&255,this.view[r+3]=255&s),n&&(this.offset+=8),this},r.writeUInt64=r.writeUint64,r.readUint64=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var n=0,i=0;this.littleEndian?(n=this.view[t+2]<<16,n|=this.view[t+1]<<8,n|=this.view[t],n+=this.view[t+3]<<24>>>0,t+=4,i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0):(i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0,t+=4,n=this.view[t+1]<<16,n|=this.view[t+2]<<8,n|=this.view[t+3],n+=this.view[t]<<24>>>0);var s=new e(n,i,!0);return r&&(this.offset+=8),s},r.readUInt64=r.readUint64),r.writeFloat32=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e)throw TypeError("Illegal value: "+e+" (not a number)");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=4,f(this.view,e,t,this.littleEndian,23,4),r&&(this.offset+=4),this},r.writeFloat=r.writeFloat32,r.readFloat32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var r=a(this.view,e,this.littleEndian,23,4);return t&&(this.offset+=4),r},r.readFloat=r.readFloat32,r.writeFloat64=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof e)throw TypeError("Illegal value: "+e+" (not a number)");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=8;var n=this.buffer.byteLength;return t>n&&this.resize((n*=2)>t?n:t),t-=8,f(this.view,e,t,this.littleEndian,52,8),r&&(this.offset+=8),this},r.writeDouble=r.writeFloat64,r.readFloat64=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=a(this.view,e,this.littleEndian,52,8);return t&&(this.offset+=8),r},r.readDouble=r.readFloat64,t.MAX_VARINT32_BYTES=5,t.calculateVarint32=function(e){return(e>>>=0)<128?1:e<16384?2:e<1<<21?3:e<1<<28?4:5},t.zigZagEncode32=function(e){return((e|=0)<<1^e>>31)>>>0},t.zigZagDecode32=function(e){return e>>>1^-(1&e)|0},r.writeVarint32=function(e,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var i,s=t.calculateVarint32(e);r+=s;var o=this.buffer.byteLength;for(r>o&&this.resize((o*=2)>r?o:r),r-=s,e>>>=0;e>=128;)i=127&e|128,this.view[r++]=i,e>>>=7;return this.view[r++]=e,n?(this.offset=r,this):s},r.writeVarint32ZigZag=function(e,r){return this.writeVarint32(t.zigZagEncode32(e),r)},r.readVarint32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r,n=0,i=0;do{if(!this.noAssert&&e>this.limit){var s=Error("Truncated");throw s.truncated=!0,s}r=this.view[e++],n<5&&(i|=(127&r)<<7*n),++n}while(0!=(128&r));return i|=0,t?(this.offset=e,i):{value:i,length:n}},r.readVarint32ZigZag=function(e){var r=this.readVarint32(e);return"object"==typeof r?r.value=t.zigZagDecode32(r.value):r=t.zigZagDecode32(r),r},e&&(t.MAX_VARINT64_BYTES=10,t.calculateVarint64=function(t){"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t));var r=t.toInt()>>>0,n=t.shiftRightUnsigned(28).toInt()>>>0,i=t.shiftRightUnsigned(56).toInt()>>>0;return 0==i?0==n?r<16384?r<128?1:2:r<1<<21?3:4:n<16384?n<128?5:6:n<1<<21?7:8:i<128?9:10},t.zigZagEncode64=function(t){return"number"==typeof t?t=e.fromNumber(t,!1):"string"==typeof t?t=e.fromString(t,!1):!1!==t.unsigned&&(t=t.toSigned()),t.shiftLeft(1).xor(t.shiftRight(63)).toUnsigned()},t.zigZagDecode64=function(t){return"number"==typeof t?t=e.fromNumber(t,!1):"string"==typeof t?t=e.fromString(t,!1):!1!==t.unsigned&&(t=t.toSigned()),t.shiftRightUnsigned(1).xor(t.and(e.ONE).toSigned().negate()).toSigned()},r.writeVarint64=function(r,n){var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"==typeof r)r=e.fromNumber(r);else if("string"==typeof r)r=e.fromString(r);else if(!(r&&r instanceof e))throw TypeError("Illegal value: "+r+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof r?r=e.fromNumber(r,!1):"string"==typeof r?r=e.fromString(r,!1):!1!==r.unsigned&&(r=r.toSigned());var s=t.calculateVarint64(r),o=r.toInt()>>>0,a=r.shiftRightUnsigned(28).toInt()>>>0,f=r.shiftRightUnsigned(56).toInt()>>>0;n+=s;var u=this.buffer.byteLength;switch(n>u&&this.resize((u*=2)>n?u:n),n-=s,s){case 10:this.view[n+9]=f>>>7&1;case 9:this.view[n+8]=9!==s?128|f:127&f;case 8:this.view[n+7]=8!==s?a>>>21|128:a>>>21&127;case 7:this.view[n+6]=7!==s?a>>>14|128:a>>>14&127;case 6:this.view[n+5]=6!==s?a>>>7|128:a>>>7&127;case 5:this.view[n+4]=5!==s?128|a:127&a;case 4:this.view[n+3]=4!==s?o>>>21|128:o>>>21&127;case 3:this.view[n+2]=3!==s?o>>>14|128:o>>>14&127;case 2:this.view[n+1]=2!==s?o>>>7|128:o>>>7&127;case 1:this.view[n]=1!==s?128|o:127&o}return i?(this.offset+=s,this):s},r.writeVarint64ZigZag=function(e,r){return this.writeVarint64(t.zigZagEncode64(e),r)},r.readVarint64=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var n=t,i=0,s=0,o=0,a=0;if(i=127&(a=this.view[t++]),128&a&&(i|=(127&(a=this.view[t++]))<<7,(128&a||this.noAssert&&void 0===a)&&(i|=(127&(a=this.view[t++]))<<14,(128&a||this.noAssert&&void 0===a)&&(i|=(127&(a=this.view[t++]))<<21,(128&a||this.noAssert&&void 0===a)&&(s=127&(a=this.view[t++]),(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[t++]))<<7,(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[t++]))<<14,(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[t++]))<<21,(128&a||this.noAssert&&void 0===a)&&(o=127&(a=this.view[t++]),(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[t++]))<<7,128&a||this.noAssert&&void 0===a))))))))))throw Error("Buffer overrun");var f=e.fromBits(i|s<<28,s>>>4|o<<24,!1);return r?(this.offset=t,f):{value:f,length:t-n}},r.readVarint64ZigZag=function(r){var n=this.readVarint64(r);return n&&n.value instanceof e?n.value=t.zigZagDecode64(n.value):n=t.zigZagDecode64(n),n}),r.writeCString=function(e,t){var r=void 0===t;r&&(t=this.offset);var n,i=e.length;if(!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");for(n=0;n<i;++n)if(0===e.charCodeAt(n))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}i=h.calculateUTF16asUTF8(s(e))[1],t+=i+1;var o=this.buffer.byteLength;return t>o&&this.resize((o*=2)>t?o:t),t-=i+1,h.encodeUTF16toUTF8(s(e),function(e){this.view[t++]=e}.bind(this)),this.view[t++]=0,r?(this.offset=t,this):i},r.readCString=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r,n=e,i=-1;return h.decodeUTF8toUTF16(function(){if(0===i)return null;if(e>=this.limit)throw RangeError("Illegal range: Truncated data, "+e+" < "+this.limit);return 0===(i=this.view[e++])?null:i}.bind(this),r=o(),!0),t?(this.offset=e,r()):{string:r(),length:e-n}},r.writeIString=function(e,t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var n,i=t;n=h.calculateUTF16asUTF8(s(e),this.noAssert)[1],t+=4+n;var o=this.buffer.byteLength;if(t>o&&this.resize((o*=2)>t?o:t),t-=4+n,this.littleEndian?(this.view[t+3]=n>>>24&255,this.view[t+2]=n>>>16&255,this.view[t+1]=n>>>8&255,this.view[t]=255&n):(this.view[t]=n>>>24&255,this.view[t+1]=n>>>16&255,this.view[t+2]=n>>>8&255,this.view[t+3]=255&n),t+=4,h.encodeUTF16toUTF8(s(e),function(e){this.view[t++]=e}.bind(this)),t!==i+4+n)throw RangeError("Illegal range: Truncated data, "+t+" == "+(t+4+n));return r?(this.offset=t,this):t-i},r.readIString=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var n=e,i=this.readUint32(e),s=this.readUTF8String(i,t.METRICS_BYTES,e+=4);return e+=s.length,r?(this.offset=e,s.string):{string:s.string,length:e-n}},t.METRICS_CHARS="c",t.METRICS_BYTES="b",r.writeUTF8String=function(e,t){var r,n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var i=t;r=h.calculateUTF16asUTF8(s(e))[1],t+=r;var o=this.buffer.byteLength;return t>o&&this.resize((o*=2)>t?o:t),t-=r,h.encodeUTF16toUTF8(s(e),function(e){this.view[t++]=e}.bind(this)),n?(this.offset=t,this):t-i},r.writeString=r.writeUTF8String,t.calculateUTF8Chars=function(e){return h.calculateUTF16asUTF8(s(e))[0]},t.calculateUTF8Bytes=function(e){return h.calculateUTF16asUTF8(s(e))[1]},t.calculateString=t.calculateUTF8Bytes,r.readUTF8String=function(e,r,n){"number"==typeof r&&(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),void 0===r&&(r=t.METRICS_CHARS),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal length: "+e+" (not an integer)");if(e|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var s,a=0,f=n;if(r===t.METRICS_CHARS){if(s=o(),h.decodeUTF8(function(){return a<e&&n<this.limit?this.view[n++]:null}.bind(this),(function(e){++a,h.UTF8toUTF16(e,s)})),a!==e)throw RangeError("Illegal range: Truncated data, "+a+" == "+e);return i?(this.offset=n,s()):{string:s(),length:n-f}}if(r===t.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+e>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+"+e+") <= "+this.buffer.byteLength)}var u=n+e;if(h.decodeUTF8toUTF16(function(){return n<u?this.view[n++]:null}.bind(this),s=o(),this.noAssert),n!==u)throw RangeError("Illegal range: Truncated data, "+n+" == "+u);return i?(this.offset=n,s()):{string:s(),length:n-f}}throw TypeError("Unsupported metrics: "+r)},r.readString=r.readUTF8String,r.writeVString=function(e,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var i,o,a=r;i=h.calculateUTF16asUTF8(s(e),this.noAssert)[1],o=t.calculateVarint32(i),r+=o+i;var f=this.buffer.byteLength;if(r>f&&this.resize((f*=2)>r?f:r),r-=o+i,r+=this.writeVarint32(i,r),h.encodeUTF16toUTF8(s(e),function(e){this.view[r++]=e}.bind(this)),r!==a+i+o)throw RangeError("Illegal range: Truncated data, "+r+" == "+(r+i+o));return n?(this.offset=r,this):r-a},r.readVString=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n=e,i=this.readVarint32(e),s=this.readUTF8String(i.value,t.METRICS_BYTES,e+=i.length);return e+=s.length,r?(this.offset=e,s.string):{string:s.string,length:e-n}},r.append=function(e,r,n){"number"!=typeof r&&"string"==typeof r||(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}e instanceof t||(e=t.wrap(e,r));var s=e.limit-e.offset;if(s<=0)return this;n+=s;var o=this.buffer.byteLength;return n>o&&this.resize((o*=2)>n?o:n),n-=s,this.view.set(e.view.subarray(e.offset,e.limit),n),e.offset+=s,i&&(this.offset+=s),this},r.appendTo=function(e,t){return e.append(this,t),this},r.assert=function(e){return this.noAssert=!e,this},r.capacity=function(){return this.buffer.byteLength},r.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},r.clone=function(e){var r=new t(0,this.littleEndian,this.noAssert);return e?(r.buffer=new ArrayBuffer(this.buffer.byteLength),r.view=new Uint8Array(r.buffer)):(r.buffer=this.buffer,r.view=this.view),r.offset=this.offset,r.markedOffset=this.markedOffset,r.limit=this.limit,r},r.compact=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}if(0===e&&t===this.buffer.byteLength)return this;var r=t-e;if(0===r)return this.buffer=n,this.view=null,this.markedOffset>=0&&(this.markedOffset-=e),this.offset=0,this.limit=0,this;var i=new ArrayBuffer(r),s=new Uint8Array(i);return s.set(this.view.subarray(e,t)),this.buffer=i,this.view=s,this.markedOffset>=0&&(this.markedOffset-=e),this.offset=0,this.limit=r,this},r.copy=function(e,r){if(void 0===e&&(e=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(e===r)return new t(0,this.littleEndian,this.noAssert);var n=r-e,i=new t(n,this.littleEndian,this.noAssert);return i.offset=0,i.limit=n,i.markedOffset>=0&&(i.markedOffset-=e),this.copyTo(i,0,e,r),i},r.copyTo=function(e,r,n,i){var s,o;if(!this.noAssert&&!t.isByteBuffer(e))throw TypeError("Illegal target: Not a ByteBuffer");if(r=(o=void 0===r)?e.offset:0|r,n=(s=void 0===n)?this.offset:0|n,i=void 0===i?this.limit:0|i,r<0||r>e.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+r+" <= "+e.buffer.byteLength);if(n<0||i>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+n+" <= "+this.buffer.byteLength);var a=i-n;return 0===a?e:(e.ensureCapacity(r+a),e.view.set(this.view.subarray(n,i),r),s&&(this.offset+=a),o&&(e.offset+=a),this)},r.ensureCapacity=function(e){var t=this.buffer.byteLength;return t<e?this.resize((t*=2)>e?t:e):this},r.fill=function(e,t,r){var n=void 0===t;if(n&&(t=this.offset),"string"==typeof e&&e.length>0&&(e=e.charCodeAt(0)),void 0===t&&(t=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,t<0||t>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+r+" <= "+this.buffer.byteLength)}if(t>=r)return this;for(;t<r;)this.view[t++]=e;return n&&(this.offset=t),this},r.flip=function(){return this.limit=this.offset,this.offset=0,this},r.mark=function(e){if(e=void 0===e?this.offset:e,!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=e,this},r.order=function(e){if(!this.noAssert&&"boolean"!=typeof e)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!e,this},r.LE=function(e){return this.littleEndian=void 0===e||!!e,this},r.BE=function(e){return this.littleEndian=void 0!==e&&!e,this},r.prepend=function(e,r,n){"number"!=typeof r&&"string"==typeof r||(n=r,r=void 0);var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}e instanceof t||(e=t.wrap(e,r));var s=e.limit-e.offset;if(s<=0)return this;var o=s-n;if(o>0){var a=new ArrayBuffer(this.buffer.byteLength+o),f=new Uint8Array(a);f.set(this.view.subarray(n,this.buffer.byteLength),s),this.buffer=a,this.view=f,this.offset+=o,this.markedOffset>=0&&(this.markedOffset+=o),this.limit+=o,n+=o}else new Uint8Array(this.buffer);return this.view.set(e.view.subarray(e.offset,e.limit),n-s),e.offset=e.limit,i&&(this.offset-=s),this},r.prependTo=function(e,t){return e.prepend(this,t),this},r.printDebug=function(e){"function"!=typeof e&&(e=console.log.bind(console)),e(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},r.remaining=function(){return this.limit-this.offset},r.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},r.resize=function(e){if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal capacity: "+e+" (not an integer)");if((e|=0)<0)throw RangeError("Illegal capacity: 0 <= "+e)}if(this.buffer.byteLength<e){var t=new ArrayBuffer(e),r=new Uint8Array(t);r.set(this.view),this.buffer=t,this.view=r}return this},r.reverse=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}return e===t||Array.prototype.reverse.call(this.view.subarray(e,t)),this},r.skip=function(e){if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal length: "+e+" (not an integer)");e|=0}var t=this.offset+e;if(!this.noAssert&&(t<0||t>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+e+" <= "+this.buffer.byteLength);return this.offset=t,this},r.slice=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}var r=this.clone();return r.offset=e,r.limit=t,r},r.toBuffer=function(e){var t=this.offset,r=this.limit;if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: Not an integer");if(t>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal limit: Not an integer");if(r>>>=0,t<0||t>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+r+" <= "+this.buffer.byteLength)}if(!e&&0===t&&r===this.buffer.byteLength)return this.buffer;if(t===r)return n;var i=new ArrayBuffer(r-t);return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(t,r),0),i},r.toArrayBuffer=r.toBuffer,r.toString=function(e,t,r){if(void 0===e)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof e&&(r=t=e="utf8"),e){case"utf8":return this.toUTF8(t,r);case"base64":return this.toBase64(t,r);case"hex":return this.toHex(t,r);case"binary":return this.toBinary(t,r);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+e)}};var u=function(){for(var e={},t=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],r=[],n=0,i=t.length;n<i;++n)r[t[n]]=n;return e.encode=function(e,r){for(var n,i;null!==(n=e());)r(t[n>>2&63]),i=(3&n)<<4,null!==(n=e())?(r(t[63&((i|=n>>4&15)|n>>4&15)]),i=(15&n)<<2,null!==(n=e())?(r(t[63&(i|n>>6&3)]),r(t[63&n])):(r(t[63&i]),r(61))):(r(t[63&i]),r(61),r(61))},e.decode=function(e,t){var n,i,s;function o(e){throw Error("Illegal character code: "+e)}for(;null!==(n=e());)if(void 0===(i=r[n])&&o(n),null!==(n=e())&&(void 0===(s=r[n])&&o(n),t(i<<2>>>0|(48&s)>>4),null!==(n=e()))){if(void 0===(i=r[n])){if(61===n)break;o(n)}if(t((15&s)<<4>>>0|(60&i)>>2),null!==(n=e())){if(void 0===(s=r[n])){if(61===n)break;o(n)}t((3&i)<<6>>>0|s)}}},e.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)},e}();r.toBase64=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),t|=0,(e|=0)<0||t>this.capacity||e>t)throw RangeError("begin, end");var r;return u.encode(function(){return e<t?this.view[e++]:null}.bind(this),r=o()),r()},t.fromBase64=function(e,r){if("string"!=typeof e)throw TypeError("str");var n=new t(e.length/4*3,r),i=0;return u.decode(s(e),(function(e){n.view[i++]=e})),n.limit=i,n},t.btoa=function(e){return t.fromBinary(e).toBase64()},t.atob=function(e){return t.fromBase64(e).toBinary()},r.toBinary=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),t|=0,(e|=0)<0||t>this.capacity()||e>t)throw RangeError("begin, end");if(e===t)return"";for(var r=[],n=[];e<t;)r.push(this.view[e++]),r.length>=1024&&(n.push(String.fromCharCode.apply(String,r)),r=[]);return n.join("")+String.fromCharCode.apply(String,r)},t.fromBinary=function(e,r){if("string"!=typeof e)throw TypeError("str");for(var n,i=0,s=e.length,o=new t(s,r);i<s;){if((n=e.charCodeAt(i))>255)throw RangeError("illegal char code: "+n);o.view[i++]=n}return o.limit=s,o},r.toDebug=function(e){for(var t,r=-1,n=this.buffer.byteLength,i="",s="",o="";r<n;){if(-1!==r&&(i+=(t=this.view[r])<16?"0"+t.toString(16).toUpperCase():t.toString(16).toUpperCase(),e&&(s+=t>32&&t<127?String.fromCharCode(t):".")),++r,e&&r>0&&r%16==0&&r!==n){for(;i.length<51;)i+=" ";o+=i+s+"\n",i=s=""}r===this.offset&&r===this.limit?i+=r===this.markedOffset?"!":"|":r===this.offset?i+=r===this.markedOffset?"[":"<":r===this.limit?i+=r===this.markedOffset?"]":">":i+=r===this.markedOffset?"'":e||0!==r&&r!==n?" ":""}if(e&&" "!==i){for(;i.length<51;)i+=" ";o+=i+s+"\n"}return e?o:i},t.fromDebug=function(e,r,n){for(var i,s,o=e.length,a=new t((o+1)/3|0,r,n),f=0,u=0,h=!1,l=!1,c=!1,d=!1,g=!1;f<o;){switch(i=e.charAt(f++)){case"!":if(!n){if(l||c||d){g=!0;break}l=c=d=!0}a.offset=a.markedOffset=a.limit=u,h=!1;break;case"|":if(!n){if(l||d){g=!0;break}l=d=!0}a.offset=a.limit=u,h=!1;break;case"[":if(!n){if(l||c){g=!0;break}l=c=!0}a.offset=a.markedOffset=u,h=!1;break;case"<":if(!n){if(l){g=!0;break}l=!0}a.offset=u,h=!1;break;case"]":if(!n){if(d||c){g=!0;break}d=c=!0}a.limit=a.markedOffset=u,h=!1;break;case">":if(!n){if(d){g=!0;break}d=!0}a.limit=u,h=!1;break;case"'":if(!n){if(c){g=!0;break}c=!0}a.markedOffset=u,h=!1;break;case" ":h=!1;break;default:if(!n&&h){g=!0;break}if(s=parseInt(i+e.charAt(f++),16),!n&&(isNaN(s)||s<0||s>255))throw TypeError("Illegal str: Not a debug encoded string");a.view[u++]=s,h=!0}if(g)throw TypeError("Illegal str: Invalid symbol at "+f)}if(!n){if(!l||!d)throw TypeError("Illegal str: Missing offset or limit");if(u<a.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+u+" < "+o)}return a},r.toHex=function(e,t){if(e=void 0===e?this.offset:e,t=void 0===t?this.limit:t,!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}for(var r,n=new Array(t-e);e<t;)(r=this.view[e++])<16?n.push("0",r.toString(16)):n.push(r.toString(16));return n.join("")},t.fromHex=function(e,r,n){if(!n){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if(e.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var i,s=e.length,o=new t(s/2|0,r),a=0,f=0;a<s;a+=2){if(i=parseInt(e.substring(a,a+2),16),!n&&(!isFinite(i)||i<0||i>255))throw TypeError("Illegal str: Contains non-hex characters");o.view[f++]=i}return o.limit=f,o};var h=function(){var e={MAX_CODEPOINT:1114111,encodeUTF8:function(e,t){var r=null;for("number"==typeof e&&(r=e,e=function(){return null});null!==r||null!==(r=e());)r<128?t(127&r):r<2048?(t(r>>6&31|192),t(63&r|128)):r<65536?(t(r>>12&15|224),t(r>>6&63|128),t(63&r|128)):(t(r>>18&7|240),t(r>>12&63|128),t(r>>6&63|128),t(63&r|128)),r=null},decodeUTF8:function(e,t){for(var r,n,i,s,o=function(e){e=e.slice(0,e.indexOf(null));var t=Error(e.toString());throw t.name="TruncatedError",t.bytes=e,t};null!==(r=e());)if(0==(128&r))t(r);else if(192==(224&r))null===(n=e())&&o([r,n]),t((31&r)<<6|63&n);else if(224==(240&r))(null===(n=e())||null===(i=e()))&&o([r,n,i]),t((15&r)<<12|(63&n)<<6|63&i);else{if(240!=(248&r))throw RangeError("Illegal starting byte: "+r);(null===(n=e())||null===(i=e())||null===(s=e()))&&o([r,n,i,s]),t((7&r)<<18|(63&n)<<12|(63&i)<<6|63&s)}},UTF16toUTF8:function(e,t){for(var r,n=null;null!==(r=null!==n?n:e());)r>=55296&&r<=57343&&null!==(n=e())&&n>=56320&&n<=57343?(t(1024*(r-55296)+n-56320+65536),n=null):t(r);null!==n&&t(n)},UTF8toUTF16:function(e,t){var r=null;for("number"==typeof e&&(r=e,e=function(){return null});null!==r||null!==(r=e());)r<=65535?t(r):(t(55296+((r-=65536)>>10)),t(r%1024+56320)),r=null},encodeUTF16toUTF8:function(t,r){e.UTF16toUTF8(t,(function(t){e.encodeUTF8(t,r)}))},decodeUTF8toUTF16:function(t,r){e.decodeUTF8(t,(function(t){e.UTF8toUTF16(t,r)}))},calculateCodePoint:function(e){return e<128?1:e<2048?2:e<65536?3:4},calculateUTF8:function(e){for(var t,r=0;null!==(t=e());)r+=t<128?1:t<2048?2:t<65536?3:4;return r},calculateUTF16asUTF8:function(t){var r=0,n=0;return e.UTF16toUTF8(t,(function(e){++r,n+=e<128?1:e<2048?2:e<65536?3:4})),[r,n]}};return e}();return r.toUTF8=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}var r;try{h.decodeUTF8toUTF16(function(){return e<t?this.view[e++]:null}.bind(this),r=o())}catch(r){if(e!==t)throw RangeError("Illegal range: Truncated data, "+e+" != "+t)}return r()},t.fromUTF8=function(e,r,n){if(!n&&"string"!=typeof e)throw TypeError("Illegal str: Not a string");var i=new t(h.calculateUTF16asUTF8(s(e),!0)[1],r,n),o=0;return h.encodeUTF16toUTF8(s(e),(function(e){i.view[o++]=e})),i.limit=o,i},t},void 0===(s=n.apply(t,i))||(e.exports=s)},6734:function(e,t){var r,n;void 0===(n="function"==typeof(r=function(){"use strict";function e(e,t,r){this.low=0|e,this.high=0|t,this.unsigned=!!r}function t(e){return!0===(e&&e.__isLong__)}e.prototype.__isLong__,Object.defineProperty(e.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),e.isLong=t;var r={},n={};function i(e,t){var i,s,a;return t?(a=0<=(e>>>=0)&&e<256)&&(s=n[e])?s:(i=o(e,(0|e)<0?-1:0,!0),a&&(n[e]=i),i):(a=-128<=(e|=0)&&e<128)&&(s=r[e])?s:(i=o(e,e<0?-1:0,!1),a&&(r[e]=i),i)}function s(e,t){if(isNaN(e)||!isFinite(e))return t?p:g;if(t){if(e<0)return p;if(e>=l)return m}else{if(e<=-c)return E;if(e+1>=c)return w}return e<0?s(-e,t).neg():o(e%h|0,e/h|0,t)}function o(t,r,n){return new e(t,r,n)}e.fromInt=i,e.fromNumber=s,e.fromBits=o;var a=Math.pow;function f(e,t,r){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(r=t,t=!1):t=!!t,(r=r||10)<2||36<r)throw RangeError("radix");var n;if((n=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return f(e.substring(1),t,r).neg();for(var i=s(a(r,8)),o=g,u=0;u<e.length;u+=8){var h=Math.min(8,e.length-u),l=parseInt(e.substring(u,u+h),r);if(h<8){var c=s(a(r,h));o=o.mul(c).add(s(l))}else o=(o=o.mul(i)).add(s(l))}return o.unsigned=t,o}function u(t){return t instanceof e?t:"number"==typeof t?s(t):"string"==typeof t?f(t):o(t.low,t.high,t.unsigned)}e.fromString=f,e.fromValue=u;var h=4294967296,l=h*h,c=l/2,d=i(1<<24),g=i(0);e.ZERO=g;var p=i(0,!0);e.UZERO=p;var b=i(1);e.ONE=b;var v=i(1,!0);e.UONE=v;var y=i(-1);e.NEG_ONE=y;var w=o(-1,2147483647,!1);e.MAX_VALUE=w;var m=o(-1,-1,!0);e.MAX_UNSIGNED_VALUE=m;var E=o(0,-2147483648,!1);e.MIN_VALUE=E;var T=e.prototype;return T.toInt=function(){return this.unsigned?this.low>>>0:this.low},T.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},T.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var t=s(e),r=this.div(t),n=r.mul(t).sub(this);return r.toString(e)+n.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=s(a(e,6),this.unsigned),o=this,f="";;){var u=o.div(i),h=(o.sub(u.mul(i)).toInt()>>>0).toString(e);if((o=u).isZero())return h+f;for(;h.length<6;)h="0"+h;f=""+h+f}},T.getHighBits=function(){return this.high},T.getHighBitsUnsigned=function(){return this.high>>>0},T.getLowBits=function(){return this.low},T.getLowBitsUnsigned=function(){return this.low>>>0},T.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},T.isZero=function(){return 0===this.high&&0===this.low},T.isNegative=function(){return!this.unsigned&&this.high<0},T.isPositive=function(){return this.unsigned||this.high>=0},T.isOdd=function(){return 1==(1&this.low)},T.isEven=function(){return 0==(1&this.low)},T.equals=function(e){return t(e)||(e=u(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},T.eq=T.equals,T.notEquals=function(e){return!this.eq(e)},T.neq=T.notEquals,T.lessThan=function(e){return this.comp(e)<0},T.lt=T.lessThan,T.lessThanOrEqual=function(e){return this.comp(e)<=0},T.lte=T.lessThanOrEqual,T.greaterThan=function(e){return this.comp(e)>0},T.gt=T.greaterThan,T.greaterThanOrEqual=function(e){return this.comp(e)>=0},T.gte=T.greaterThanOrEqual,T.compare=function(e){if(t(e)||(e=u(e)),this.eq(e))return 0;var r=this.isNegative(),n=e.isNegative();return r&&!n?-1:!r&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},T.comp=T.compare,T.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(b)},T.neg=T.negate,T.add=function(e){t(e)||(e=u(e));var r=this.high>>>16,n=65535&this.high,i=this.low>>>16,s=65535&this.low,a=e.high>>>16,f=65535&e.high,h=e.low>>>16,l=0,c=0,d=0,g=0;return d+=(g+=s+(65535&e.low))>>>16,c+=(d+=i+h)>>>16,l+=(c+=n+f)>>>16,l+=r+a,o((d&=65535)<<16|(g&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},T.subtract=function(e){return t(e)||(e=u(e)),this.add(e.neg())},T.sub=T.subtract,T.multiply=function(e){if(this.isZero())return g;if(t(e)||(e=u(e)),e.isZero())return g;if(this.eq(E))return e.isOdd()?E:g;if(e.eq(E))return this.isOdd()?E:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(d)&&e.lt(d))return s(this.toNumber()*e.toNumber(),this.unsigned);var r=this.high>>>16,n=65535&this.high,i=this.low>>>16,a=65535&this.low,f=e.high>>>16,h=65535&e.high,l=e.low>>>16,c=65535&e.low,p=0,b=0,v=0,y=0;return v+=(y+=a*c)>>>16,b+=(v+=i*c)>>>16,v&=65535,b+=(v+=a*l)>>>16,p+=(b+=n*c)>>>16,b&=65535,p+=(b+=i*l)>>>16,b&=65535,p+=(b+=a*h)>>>16,p+=r*c+n*l+i*h+a*f,o((v&=65535)<<16|(y&=65535),(p&=65535)<<16|(b&=65535),this.unsigned)},T.mul=T.multiply,T.divide=function(e){if(t(e)||(e=u(e)),e.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?p:g;var r,n,i;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return p;if(e.gt(this.shru(1)))return v;i=p}else{if(this.eq(E))return e.eq(b)||e.eq(y)?E:e.eq(E)?b:(r=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:y:(n=this.sub(e.mul(r)),i=r.add(n.div(e)));if(e.eq(E))return this.unsigned?p:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();i=g}for(n=this;n.gte(e);){r=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(r)/Math.LN2),f=o<=48?1:a(2,o-48),h=s(r),l=h.mul(e);l.isNegative()||l.gt(n);)l=(h=s(r-=f,this.unsigned)).mul(e);h.isZero()&&(h=b),i=i.add(h),n=n.sub(l)}return i},T.div=T.divide,T.modulo=function(e){return t(e)||(e=u(e)),this.sub(this.div(e).mul(e))},T.mod=T.modulo,T.not=function(){return o(~this.low,~this.high,this.unsigned)},T.and=function(e){return t(e)||(e=u(e)),o(this.low&e.low,this.high&e.high,this.unsigned)},T.or=function(e){return t(e)||(e=u(e)),o(this.low|e.low,this.high|e.high,this.unsigned)},T.xor=function(e){return t(e)||(e=u(e)),o(this.low^e.low,this.high^e.high,this.unsigned)},T.shiftLeft=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?o(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):o(0,this.low<<e-32,this.unsigned)},T.shl=T.shiftLeft,T.shiftRight=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?o(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):o(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},T.shr=T.shiftRight,T.shiftRightUnsigned=function(e){if(t(e)&&(e=e.toInt()),0==(e&=63))return this;var r=this.high;return e<32?o(this.low>>>e|r<<32-e,r>>>e,this.unsigned):o(32===e?r:r>>>e-32,0,this.unsigned)},T.shru=T.shiftRightUnsigned,T.toSigned=function(){return this.unsigned?o(this.low,this.high,!1):this},T.toUnsigned=function(){return this.unsigned?this:o(this.low,this.high,!0)},T.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},T.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24&255,255&e,e>>>8&255,e>>>16&255,e>>>24&255]},T.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t]},e})?r.apply(t,[]):r)||(e.exports=n)},5618:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventDisposer=t.Event=void 0;var r=function(){function e(){var e=this;this.event={stack:[],index:0},this.ended=!1,this.execute=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(e.ended)throw new Error("event completed");for(var n=0,i=e.event.stack;n<i.length;n++){var s=i[n];s.execute.apply(s,t)}},this.complete=function(){if(e.ended)throw new Error("event completed");for(var t=0,r=e.event.stack;t<r.length;t++){var n=r[t];n.complete&&n.complete()}e.allUnsubscribe(),e.ended=!0},this.error=function(t){if(e.ended)throw new Error("event completed");for(var r=0,n=e.event.stack;r<n.length;r++){var i=n[r];i.error&&i.error(t)}e.allUnsubscribe()},this.allUnsubscribe=function(){if(e.ended)throw new Error("event completed");e.event={stack:[],index:0}},this.subscribe=function(t,r,n){if(e.ended)throw new Error("event completed");var i=e.event.index;e.event.stack.push({execute:t,id:i,complete:r,error:n}),e.event.index++;var s=function(){e.event.stack=e.event.stack.filter((function(e){return e.id!==i&&e}))};return{unSubscribe:s,disposer:function(e){e.push(s)}}},this.once=function(t,r,n){var i=e.subscribe((function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];i.unSubscribe(),t.apply(void 0,e)}),r,n)},this.watch=function(t,r){return new Promise((function(n,i){var s=r&&setTimeout((function(){i("Event watch timeout")}),r),o=e.subscribe((function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i=t.apply(void 0,e);i&&(s&&clearTimeout(s),o(),n(e))})).unSubscribe}))},this.asPromise=function(t){return new Promise((function(r,n){var i=t&&setTimeout((function(){n("Event asPromise timeout")}),t);e.once((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i&&clearTimeout(i),r(e)}),(function(){i&&clearTimeout(i),r([])}),(function(e){i&&clearTimeout(i),n(e)}))}))}}return Object.defineProperty(e.prototype,"returnTrigger",{get:function(){var e=this;return{execute:e.execute,error:e.error,complete:e.complete}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"returnListener",{get:function(){var e=this;return{subscribe:e.subscribe,once:e.once,asPromise:e.asPromise}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this.event.stack.length},enumerable:!1,configurable:!0}),e}();t.Event=r;var n=function(){function e(){this._disposer=[]}return e.prototype.push=function(e){this._disposer.push(e)},e.prototype.dispose=function(){this._disposer.forEach((function(e){return e()})),this._disposer=[]},e}();t.EventDisposer=n},5373:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Buffer=void 0;var n=r(5618);t.Buffer=function(e,t){var r=new n.Event,i=[],s=!1;return t.subscribe((function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];s||i.length!==e||(i.forEach((function(e){return r.execute.apply(r,e)})),s=!0),s?r.execute.apply(r,t):i.push(t)})),{subscribe:r.subscribe,asPromise:r.asPromise,once:r.once}}},5124:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(5618);t.default=function(){var e=[];return{event:function(){var t=new n.Event;return e.push(t),t},finishAll:function(){e.forEach((function(e){return e.allUnsubscribe()})),e=[]}}}},167:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(9312),i=n.__importDefault(r(1389)),s=function(){function e(){this.candidates={}}return e.prototype.exist=function(e){return Object.keys(this.candidates).includes(e)},e.prototype.delete=function(e){delete this.candidates[e]},e.prototype.create=function(e,t){return n.__awaiter(this,void 0,void 0,(function(){var r,s;return n.__generator(this,(function(n){switch(n.label){case 0:return this.exist(e)?[2,{exist:this.candidates[e]}]:[3,1];case 1:return r=new i.default,this.candidates[e]=r,[4,t()];case 2:return s=n.sent(),r.execute.apply(r,s),this.delete(e),[2,{result:s}]}}))}))},e}();t.default=s},1389:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(9312),i=r(5618);t.default=i.Event,n.__exportStar(r(5618),t),n.__exportStar(r(5124),t),n.__exportStar(r(167),t),n.__exportStar(r(5373),t)},9312:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>s,__asyncDelegator:()=>E,__asyncGenerator:()=>m,__asyncValues:()=>T,__await:()=>w,__awaiter:()=>h,__classPrivateFieldGet:()=>O,__classPrivateFieldSet:()=>U,__createBinding:()=>c,__decorate:()=>a,__exportStar:()=>d,__extends:()=>i,__generator:()=>l,__importDefault:()=>S,__importStar:()=>A,__makeTemplateObject:()=>_,__metadata:()=>u,__param:()=>f,__read:()=>p,__rest:()=>o,__spread:()=>b,__spreadArray:()=>y,__spreadArrays:()=>v,__values:()=>g});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var s=function(){return s=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},s.apply(this,arguments)};function o(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function a(e,t,r,n){var i,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,r,o):i(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o}function f(e,t){return function(r,n){t(r,n,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function h(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{f(n.next(e))}catch(e){s(e)}}function a(e){try{f(n.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}f((n=n.apply(e,t||[])).next())}))}function l(e,t){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}var c=Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]};function d(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||c(t,e,r)}function g(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function p(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,s=r.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)o.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}return o}function b(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(p(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var s=arguments[t],o=0,a=s.length;o<a;o++,i++)n[i]=s[o];return n}function y(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function m(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),s=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){s.push([e,t,r,n])>1||a(e,t)}))})}function a(e,t){try{(r=i[e](t)).value instanceof w?Promise.resolve(r.value.v).then(f,u):h(s[0][2],r)}catch(e){h(s[0][3],e)}var r}function f(e){a("next",e)}function u(e){a("throw",e)}function h(e,t){e(t),s.shift(),s.length&&a(s[0][0],s[0][1])}}function E(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){t[n]=e[n]?function(t){return(r=!r)?{value:w(e[n](t)),done:"return"===n}:i?i(t):t}:i}}function T(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=g(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}function _(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var I=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&c(t,e,r);return I(t,e),t}function S(e){return e&&e.__esModule?e:{default:e}}function O(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function U(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},338:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return f.default}});var n=c(r(3925)),i=c(r(2220)),s=c(r(8015)),o=c(r(197)),a=c(r(5529)),f=c(r(923)),u=c(r(3447)),h=c(r(3584)),l=c(r(5842));function c(e){return e&&e.__esModule?e:{default:e}}},7809:(e,t)=>{"use strict";function r(e){return 14+(e+64>>>9<<4)+1}function n(e,t){const r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function i(e,t,r,i,s,o){return n((a=n(n(t,e),n(i,o)))<<(f=s)|a>>>32-f,r);var a,f}function s(e,t,r,n,s,o,a){return i(t&r|~t&n,e,t,s,o,a)}function o(e,t,r,n,s,o,a){return i(t&n|r&~n,e,t,s,o,a)}function a(e,t,r,n,s,o,a){return i(t^r^n,e,t,s,o,a)}function f(e,t,r,n,s,o,a){return i(r^(t|~n),e,t,s,o,a)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let r=0;r<t.length;++r)e[r]=t.charCodeAt(r)}return function(e){const t=[],r=32*e.length,n="0123456789abcdef";for(let i=0;i<r;i+=8){const r=e[i>>5]>>>i%32&255,s=parseInt(n.charAt(r>>>4&15)+n.charAt(15&r),16);t.push(s)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[r(t)-1]=t;let i=1732584193,u=-271733879,h=-1732584194,l=271733878;for(let t=0;t<e.length;t+=16){const r=i,c=u,d=h,g=l;i=s(i,u,h,l,e[t],7,-680876936),l=s(l,i,u,h,e[t+1],12,-389564586),h=s(h,l,i,u,e[t+2],17,606105819),u=s(u,h,l,i,e[t+3],22,-1044525330),i=s(i,u,h,l,e[t+4],7,-176418897),l=s(l,i,u,h,e[t+5],12,1200080426),h=s(h,l,i,u,e[t+6],17,-1473231341),u=s(u,h,l,i,e[t+7],22,-45705983),i=s(i,u,h,l,e[t+8],7,1770035416),l=s(l,i,u,h,e[t+9],12,-1958414417),h=s(h,l,i,u,e[t+10],17,-42063),u=s(u,h,l,i,e[t+11],22,-1990404162),i=s(i,u,h,l,e[t+12],7,1804603682),l=s(l,i,u,h,e[t+13],12,-40341101),h=s(h,l,i,u,e[t+14],17,-1502002290),u=s(u,h,l,i,e[t+15],22,1236535329),i=o(i,u,h,l,e[t+1],5,-165796510),l=o(l,i,u,h,e[t+6],9,-1069501632),h=o(h,l,i,u,e[t+11],14,643717713),u=o(u,h,l,i,e[t],20,-373897302),i=o(i,u,h,l,e[t+5],5,-701558691),l=o(l,i,u,h,e[t+10],9,38016083),h=o(h,l,i,u,e[t+15],14,-660478335),u=o(u,h,l,i,e[t+4],20,-405537848),i=o(i,u,h,l,e[t+9],5,568446438),l=o(l,i,u,h,e[t+14],9,-1019803690),h=o(h,l,i,u,e[t+3],14,-187363961),u=o(u,h,l,i,e[t+8],20,1163531501),i=o(i,u,h,l,e[t+13],5,-1444681467),l=o(l,i,u,h,e[t+2],9,-51403784),h=o(h,l,i,u,e[t+7],14,1735328473),u=o(u,h,l,i,e[t+12],20,-1926607734),i=a(i,u,h,l,e[t+5],4,-378558),l=a(l,i,u,h,e[t+8],11,-2022574463),h=a(h,l,i,u,e[t+11],16,1839030562),u=a(u,h,l,i,e[t+14],23,-35309556),i=a(i,u,h,l,e[t+1],4,-1530992060),l=a(l,i,u,h,e[t+4],11,1272893353),h=a(h,l,i,u,e[t+7],16,-155497632),u=a(u,h,l,i,e[t+10],23,-1094730640),i=a(i,u,h,l,e[t+13],4,681279174),l=a(l,i,u,h,e[t],11,-358537222),h=a(h,l,i,u,e[t+3],16,-722521979),u=a(u,h,l,i,e[t+6],23,76029189),i=a(i,u,h,l,e[t+9],4,-640364487),l=a(l,i,u,h,e[t+12],11,-421815835),h=a(h,l,i,u,e[t+15],16,530742520),u=a(u,h,l,i,e[t+2],23,-995338651),i=f(i,u,h,l,e[t],6,-198630844),l=f(l,i,u,h,e[t+7],10,1126891415),h=f(h,l,i,u,e[t+14],15,-1416354905),u=f(u,h,l,i,e[t+5],21,-57434055),i=f(i,u,h,l,e[t+12],6,1700485571),l=f(l,i,u,h,e[t+3],10,-1894986606),h=f(h,l,i,u,e[t+10],15,-1051523),u=f(u,h,l,i,e[t+1],21,-2054922799),i=f(i,u,h,l,e[t+8],6,1873313359),l=f(l,i,u,h,e[t+15],10,-30611744),h=f(h,l,i,u,e[t+6],15,-1560198380),u=f(u,h,l,i,e[t+13],21,1309151649),i=f(i,u,h,l,e[t+4],6,-145523070),l=f(l,i,u,h,e[t+11],10,-1120210379),h=f(h,l,i,u,e[t+2],15,718787259),u=f(u,h,l,i,e[t+9],21,-343485551),i=n(i,r),u=n(u,c),h=n(h,d),l=n(l,g)}return[i,u,h,l]}(function(e){if(0===e.length)return[];const t=8*e.length,n=new Uint32Array(r(t));for(let r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))}},9871:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=r},5529:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},5842:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,i=(n=r(3447))&&n.__esModule?n:{default:n};t.default=function(e){if(!(0,i.default)(e))throw TypeError("Invalid UUID");let t;const r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r}},4261:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},9469:(e,t)=>{"use strict";let r;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!r&&(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!r))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(n)};const n=new Uint8Array(16)},7230:(e,t)=>{"use strict";function r(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:case 3:return t^r^n;case 2:return t&r^t&n^r&n}}function n(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],i=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let r=0;r<t.length;++r)e.push(t.charCodeAt(r))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const s=e.length/4+2,o=Math.ceil(s/16),a=new Array(o);for(let t=0;t<o;++t){const r=new Uint32Array(16);for(let n=0;n<16;++n)r[n]=e[64*t+4*n]<<24|e[64*t+4*n+1]<<16|e[64*t+4*n+2]<<8|e[64*t+4*n+3];a[t]=r}a[o-1][14]=8*(e.length-1)/Math.pow(2,32),a[o-1][14]=Math.floor(a[o-1][14]),a[o-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<o;++e){const s=new Uint32Array(80);for(let t=0;t<16;++t)s[t]=a[e][t];for(let e=16;e<80;++e)s[e]=n(s[e-3]^s[e-8]^s[e-14]^s[e-16],1);let o=i[0],f=i[1],u=i[2],h=i[3],l=i[4];for(let e=0;e<80;++e){const i=Math.floor(e/20),a=n(o,5)+r(i,f,u,h)+l+t[i]+s[e]>>>0;l=h,h=u,u=n(f,30)>>>0,f=o,o=a}i[0]=i[0]+o>>>0,i[1]=i[1]+f>>>0,i[2]=i[2]+u>>>0,i[3]=i[3]+h>>>0,i[4]=i[4]+l>>>0}return[i[0]>>24&255,i[0]>>16&255,i[0]>>8&255,255&i[0],i[1]>>24&255,i[1]>>16&255,i[1]>>8&255,255&i[1],i[2]>>24&255,i[2]>>16&255,i[2]>>8&255,255&i[2],i[3]>>24&255,i[3]>>16&255,i[3]>>8&255,255&i[3],i[4]>>24&255,i[4]>>16&255,i[4]>>8&255,255&i[4]]}},3584:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=o;var n,i=(n=r(3447))&&n.__esModule?n:{default:n};const s=[];for(let e=0;e<256;++e)s.push((e+256).toString(16).slice(1));function o(e,t=0){return(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase()}t.default=function(e,t=0){const r=o(e,t);if(!(0,i.default)(r))throw TypeError("Stringified UUID is invalid");return r}},3925:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,i=(n=r(9469))&&n.__esModule?n:{default:n},s=r(3584);let o,a,f=0,u=0;t.default=function(e,t,r){let n=t&&r||0;const h=t||new Array(16);let l=(e=e||{}).node||o,c=void 0!==e.clockseq?e.clockseq:a;if(null==l||null==c){const t=e.random||(e.rng||i.default)();null==l&&(l=o=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==c&&(c=a=16383&(t[6]<<8|t[7]))}let d=void 0!==e.msecs?e.msecs:Date.now(),g=void 0!==e.nsecs?e.nsecs:u+1;const p=d-f+(g-u)/1e4;if(p<0&&void 0===e.clockseq&&(c=c+1&16383),(p<0||d>f)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=d,u=g,a=c,d+=122192928e5;const b=(1e4*(268435455&d)+g)%4294967296;h[n++]=b>>>24&255,h[n++]=b>>>16&255,h[n++]=b>>>8&255,h[n++]=255&b;const v=d/4294967296*1e4&268435455;h[n++]=v>>>8&255,h[n++]=255&v,h[n++]=v>>>24&15|16,h[n++]=v>>>16&255,h[n++]=c>>>8|128,h[n++]=255&c;for(let e=0;e<6;++e)h[n+e]=l[e];return t||(0,s.unsafeStringify)(h)}},2220:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=s(r(2969)),i=s(r(7809));function s(e){return e&&e.__esModule?e:{default:e}}var o=(0,n.default)("v3",48,i.default);t.default=o},2969:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,r){function n(e,n,o,a){var f;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof n&&(n=(0,s.default)(n)),16!==(null===(f=n)||void 0===f?void 0:f.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let u=new Uint8Array(16+e.length);if(u.set(n),u.set(e,n.length),u=r(u),u[6]=15&u[6]|t,u[8]=63&u[8]|128,o){a=a||0;for(let e=0;e<16;++e)o[a+e]=u[e];return o}return(0,i.unsafeStringify)(u)}try{n.name=e}catch(e){}return n.DNS=o,n.URL=a,n};var n,i=r(3584),s=(n=r(5842))&&n.__esModule?n:{default:n};const o="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=o;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=a},8015:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=o(r(9871)),i=o(r(9469)),s=r(3584);function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,r){if(n.default.randomUUID&&!t&&!e)return n.default.randomUUID();const o=(e=e||{}).random||(e.rng||i.default)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=o[e];return t}return(0,s.unsafeStringify)(o)}},197:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=s(r(2969)),i=s(r(7230));function s(e){return e&&e.__esModule?e:{default:e}}var o=(0,n.default)("v5",80,i.default);t.default=o},3447:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,i=(n=r(4261))&&n.__esModule?n:{default:n};t.default=function(e){return"string"==typeof e&&i.default.test(e)}},923:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,i=(n=r(3447))&&n.__esModule?n:{default:n};t.default=function(e){if(!(0,i.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=r(4430),t=new e.lh;document.addEventListener("readystatechange",(function(){return e=void 0,r=void 0,i=function(){var e,r,n,i,s,o,a;return function(e,t){var r,n,i,s,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){o.label=s[1];break}if(6===s[0]&&o.label<i[1]){o.label=i[1],i=s;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(s);break}i[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}(this,(function(f){switch(f.label){case 0:return"complete"!==document.readyState?[2]:(e=document.getElementById("outputTextArea"),t.addListener("open",(function(){var r=!1;console.log("client open"),t.addSubscription("_nstrumenta",(function(e){"health"===e.type&&(document.getElementById("health").innerText=new Date(Date.now()).toLocaleString())})),t.addSubscription("_status",(function(n){var i=n.agentId;document.getElementById("status").innerText=JSON.stringify(n),i&&!r&&(r=!0,t.addSubscription("_".concat(i,"/stdout"),(function(t){var r=(new TextDecoder).decode(t);e.textContent+="".concat(r,"\n")})))}))})),r=new URL(window.location.href).searchParams,n=r.get("wsUrl"),i=n||window.location.origin.replace("http","ws"),(s=r.get("apiKey"))&&localStorage.setItem("apiKey",s),o=localStorage.getItem("apiKey"),a=s||o,[4,t.connect({apiKey:a,wsUrl:i})]);case 1:return f.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(t,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var r;e.done?t(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(o,a)}f((i=i.apply(e,r||[])).next())}));var e,r,n,i}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,