/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={779:function(t,e,i){var r,n,s;n=[i(514)],r=function(t){"use strict";var e=function(t,i,n){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===i&&(i=e.DEFAULT_ENDIAN),void 0===n&&(n=e.DEFAULT_NOASSERT),!n){if((t|=0)<0)throw RangeError("Illegal capacity");i=!!i,n=!!n}this.buffer=0===t?r:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=i,this.noAssert=n};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var i=e.prototype;i.__isByteBuffer__,Object.defineProperty(i,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var r=new ArrayBuffer(0),n=String.fromCharCode;function s(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function o(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+n.apply(String,t);t.length+arguments.length>1024&&(e.push(n.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function f(t,e,i,r,n){var s,o,f=8*n-r-1,a=(1<<f)-1,h=a>>1,u=-7,l=i?n-1:0,g=i?-1:1,c=t[e+l];for(l+=g,s=c&(1<<-u)-1,c>>=-u,u+=f;u>0;s=256*s+t[e+l],l+=g,u-=8);for(o=s&(1<<-u)-1,s>>=-u,u+=r;u>0;o=256*o+t[e+l],l+=g,u-=8);if(0===s)s=1-h;else{if(s===a)return o?NaN:1/0*(c?-1:1);o+=Math.pow(2,r),s-=h}return(c?-1:1)*o*Math.pow(2,s-r)}function a(t,e,i,r,n,s){var o,f,a,h=8*s-n-1,u=(1<<h)-1,l=u>>1,g=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,c=r?0:s-1,d=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(f=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-o))<1&&(o--,a*=2),(e+=o+l>=1?g/a:g*Math.pow(2,1-l))*a>=2&&(o++,a/=2),o+l>=u?(f=0,o=u):o+l>=1?(f=(e*a-1)*Math.pow(2,n),o+=l):(f=e*Math.pow(2,l-1)*Math.pow(2,n),o=0));n>=8;t[i+c]=255&f,c+=d,f/=256,n-=8);for(o=o<<n|f,h+=n;h>0;t[i+c]=255&o,c+=d,o/=256,h-=8);t[i+c-d]|=128*v}e.accessor=function(){return Uint8Array},e.allocate=function(t,i,r){return new e(t,i,r)},e.concat=function(t,i,r,n){"boolean"!=typeof i&&"string"==typeof i||(n=r,r=i,i=void 0);for(var s,o=0,f=0,a=t.length;f<a;++f)e.isByteBuffer(t[f])||(t[f]=e.wrap(t[f],i)),(s=t[f].limit-t[f].offset)>0&&(o+=s);if(0===o)return new e(0,r,n);var h,u=new e(o,r,n);for(f=0;f<a;)(s=(h=t[f++]).limit-h.offset)<=0||(u.view.set(h.view.subarray(h.offset,h.limit),u.offset),u.offset+=s);return u.limit=u.offset,u.offset=0,u},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,r,n,s){if("string"!=typeof r&&(s=n,n=r,r=void 0),"string"==typeof t)switch(void 0===r&&(r="utf8"),r){case"base64":return e.fromBase64(t,n);case"hex":return e.fromHex(t,n);case"binary":return e.fromBinary(t,n);case"utf8":return e.fromUTF8(t,n);case"debug":return e.fromDebug(t,n);default:throw Error("Unsupported encoding: "+r)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var o;if(e.isByteBuffer(t))return(o=i.clone.call(t)).markedOffset=-1,o;if(t instanceof Uint8Array)o=new e(0,n,s),t.length>0&&(o.buffer=t.buffer,o.offset=t.byteOffset,o.limit=t.byteOffset+t.byteLength,o.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)o=new e(0,n,s),t.byteLength>0&&(o.buffer=t,o.offset=0,o.limit=t.byteLength,o.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(o=new e(t.length,n,s)).limit=t.length;for(var f=0;f<t.length;++f)o.view[f]=t[f]}return o},i.writeBitSet=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,n=e,s=t.length,o=s>>3,f=0;for(e+=this.writeVarint32(s,e);o--;)r=1&!!t[f++]|(1&!!t[f++])<<1|(1&!!t[f++])<<2|(1&!!t[f++])<<3|(1&!!t[f++])<<4|(1&!!t[f++])<<5|(1&!!t[f++])<<6|(1&!!t[f++])<<7,this.writeByte(r,e++);if(f<s){var a=0;for(r=0;f<s;)r|=(1&!!t[f++])<<a++;this.writeByte(r,e++)}return i?(this.offset=e,this):e-n},i.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var i,r=this.readVarint32(t),n=r.value,s=n>>3,o=0,f=[];for(t+=r.length;s--;)i=this.readByte(t++),f[o++]=!!(1&i),f[o++]=!!(2&i),f[o++]=!!(4&i),f[o++]=!!(8&i),f[o++]=!!(16&i),f[o++]=!!(32&i),f[o++]=!!(64&i),f[o++]=!!(128&i);if(o<n){var a=0;for(i=this.readByte(t++);o<n;)f[o++]=!!(i>>a++&1)}return e&&(this.offset=t),f},i.readBytes=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var r=this.slice(e,e+t);return i&&(this.offset+=t),r},i.writeBytes=i.append,i.writeInt8=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,i&&(this.offset+=1),this},i.writeByte=i.writeInt8,i.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var i=this.view[t];return 128==(128&i)&&(i=-(255-i+1)),e&&(this.offset+=1),i},i.readByte=i.readInt8,i.writeUint8=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=1,this.view[e]=t,i&&(this.offset+=1),this},i.writeUInt8=i.writeUint8,i.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var i=this.view[t];return e&&(this.offset+=1),i},i.readUInt8=i.readUint8,i.writeInt16=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),i&&(this.offset+=2),this},i.writeShort=i.writeInt16,i.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var i=0;return this.littleEndian?(i=this.view[t],i|=this.view[t+1]<<8):(i=this.view[t]<<8,i|=this.view[t+1]),32768==(32768&i)&&(i=-(65535-i+1)),e&&(this.offset+=2),i},i.readShort=i.readInt16,i.writeUint16=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),i&&(this.offset+=2),this},i.writeUInt16=i.writeUint16,i.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var i=0;return this.littleEndian?(i=this.view[t],i|=this.view[t+1]<<8):(i=this.view[t]<<8,i|=this.view[t+1]),e&&(this.offset+=2),i},i.readUInt16=i.readUint16,i.writeInt32=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),i&&(this.offset+=4),this},i.writeInt=i.writeInt32,i.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var i=0;return this.littleEndian?(i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0):(i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0),i|=0,e&&(this.offset+=4),i},i.readInt=i.readInt32,i.writeUint32=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),i&&(this.offset+=4),this},i.writeUInt32=i.writeUint32,i.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var i=0;return this.littleEndian?(i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0):(i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0),e&&(this.offset+=4),i},i.readUInt32=i.readUint32,t&&(i.writeInt64=function(e,i){var r=void 0===i;if(r&&(i=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),i+=8;var n=this.buffer.byteLength;i>n&&this.resize((n*=2)>i?n:i),i-=8;var s=e.low,o=e.high;return this.littleEndian?(this.view[i+3]=s>>>24&255,this.view[i+2]=s>>>16&255,this.view[i+1]=s>>>8&255,this.view[i]=255&s,i+=4,this.view[i+3]=o>>>24&255,this.view[i+2]=o>>>16&255,this.view[i+1]=o>>>8&255,this.view[i]=255&o):(this.view[i]=o>>>24&255,this.view[i+1]=o>>>16&255,this.view[i+2]=o>>>8&255,this.view[i+3]=255&o,i+=4,this.view[i]=s>>>24&255,this.view[i+1]=s>>>16&255,this.view[i+2]=s>>>8&255,this.view[i+3]=255&s),r&&(this.offset+=8),this},i.writeLong=i.writeInt64,i.readInt64=function(e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,n=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var s=new t(r,n,!1);return i&&(this.offset+=8),s},i.readLong=i.readInt64,i.writeUint64=function(e,i){var r=void 0===i;if(r&&(i=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),i+=8;var n=this.buffer.byteLength;i>n&&this.resize((n*=2)>i?n:i),i-=8;var s=e.low,o=e.high;return this.littleEndian?(this.view[i+3]=s>>>24&255,this.view[i+2]=s>>>16&255,this.view[i+1]=s>>>8&255,this.view[i]=255&s,i+=4,this.view[i+3]=o>>>24&255,this.view[i+2]=o>>>16&255,this.view[i+1]=o>>>8&255,this.view[i]=255&o):(this.view[i]=o>>>24&255,this.view[i+1]=o>>>16&255,this.view[i+2]=o>>>8&255,this.view[i+3]=255&o,i+=4,this.view[i]=s>>>24&255,this.view[i+1]=s>>>16&255,this.view[i+2]=s>>>8&255,this.view[i+3]=255&s),r&&(this.offset+=8),this},i.writeUInt64=i.writeUint64,i.readUint64=function(e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var r=0,n=0;this.littleEndian?(r=this.view[e+2]<<16,r|=this.view[e+1]<<8,r|=this.view[e],r+=this.view[e+3]<<24>>>0,e+=4,n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0,e+=4,r=this.view[e+1]<<16,r|=this.view[e+2]<<8,r|=this.view[e+3],r+=this.view[e]<<24>>>0);var s=new t(r,n,!0);return i&&(this.offset+=8),s},i.readUInt64=i.readUint64),i.writeFloat32=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=4,a(this.view,t,e,this.littleEndian,23,4),i&&(this.offset+=4),this},i.writeFloat=i.writeFloat32,i.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var i=f(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),i},i.readFloat=i.readFloat32,i.writeFloat64=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var r=this.buffer.byteLength;return e>r&&this.resize((r*=2)>e?r:e),e-=8,a(this.view,t,e,this.littleEndian,52,8),i&&(this.offset+=8),this},i.writeDouble=i.writeFloat64,i.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var i=f(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),i},i.readDouble=i.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},i.writeVarint32=function(t,i){var r=void 0===i;if(r&&(i=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}var n,s=e.calculateVarint32(t);i+=s;var o=this.buffer.byteLength;for(i>o&&this.resize((o*=2)>i?o:i),i-=s,t>>>=0;t>=128;)n=127&t|128,this.view[i++]=n,t>>>=7;return this.view[i++]=t,r?(this.offset=i,this):s},i.writeVarint32ZigZag=function(t,i){return this.writeVarint32(e.zigZagEncode32(t),i)},i.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var i,r=0,n=0;do{if(!this.noAssert&&t>this.limit){var s=Error("Truncated");throw s.truncated=!0,s}i=this.view[t++],r<5&&(n|=(127&i)<<7*r),++r}while(0!=(128&i));return n|=0,e?(this.offset=t,n):{value:n,length:r}},i.readVarint32ZigZag=function(t){var i=this.readVarint32(t);return"object"==typeof i?i.value=e.zigZagDecode32(i.value):i=e.zigZagDecode32(i),i},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var i=e.toInt()>>>0,r=e.shiftRightUnsigned(28).toInt()>>>0,n=e.shiftRightUnsigned(56).toInt()>>>0;return 0==n?0==r?i<16384?i<128?1:2:i<1<<21?3:4:r<16384?r<128?5:6:r<1<<21?7:8:n<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},i.writeVarint64=function(i,r){var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"==typeof i)i=t.fromNumber(i);else if("string"==typeof i)i=t.fromString(i);else if(!(i&&i instanceof t))throw TypeError("Illegal value: "+i+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof i?i=t.fromNumber(i,!1):"string"==typeof i?i=t.fromString(i,!1):!1!==i.unsigned&&(i=i.toSigned());var s=e.calculateVarint64(i),o=i.toInt()>>>0,f=i.shiftRightUnsigned(28).toInt()>>>0,a=i.shiftRightUnsigned(56).toInt()>>>0;r+=s;var h=this.buffer.byteLength;switch(r>h&&this.resize((h*=2)>r?h:r),r-=s,s){case 10:this.view[r+9]=a>>>7&1;case 9:this.view[r+8]=9!==s?128|a:127&a;case 8:this.view[r+7]=8!==s?f>>>21|128:f>>>21&127;case 7:this.view[r+6]=7!==s?f>>>14|128:f>>>14&127;case 6:this.view[r+5]=6!==s?f>>>7|128:f>>>7&127;case 5:this.view[r+4]=5!==s?128|f:127&f;case 4:this.view[r+3]=4!==s?o>>>21|128:o>>>21&127;case 3:this.view[r+2]=3!==s?o>>>14|128:o>>>14&127;case 2:this.view[r+1]=2!==s?o>>>7|128:o>>>7&127;case 1:this.view[r]=1!==s?128|o:127&o}return n?(this.offset+=s,this):s},i.writeVarint64ZigZag=function(t,i){return this.writeVarint64(e.zigZagEncode64(t),i)},i.readVarint64=function(e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var r=e,n=0,s=0,o=0,f=0;if(n=127&(f=this.view[e++]),128&f&&(n|=(127&(f=this.view[e++]))<<7,(128&f||this.noAssert&&void 0===f)&&(n|=(127&(f=this.view[e++]))<<14,(128&f||this.noAssert&&void 0===f)&&(n|=(127&(f=this.view[e++]))<<21,(128&f||this.noAssert&&void 0===f)&&(s=127&(f=this.view[e++]),(128&f||this.noAssert&&void 0===f)&&(s|=(127&(f=this.view[e++]))<<7,(128&f||this.noAssert&&void 0===f)&&(s|=(127&(f=this.view[e++]))<<14,(128&f||this.noAssert&&void 0===f)&&(s|=(127&(f=this.view[e++]))<<21,(128&f||this.noAssert&&void 0===f)&&(o=127&(f=this.view[e++]),(128&f||this.noAssert&&void 0===f)&&(o|=(127&(f=this.view[e++]))<<7,128&f||this.noAssert&&void 0===f))))))))))throw Error("Buffer overrun");var a=t.fromBits(n|s<<28,s>>>4|o<<24,!1);return i?(this.offset=e,a):{value:a,length:e-r}},i.readVarint64ZigZag=function(i){var r=this.readVarint64(i);return r&&r.value instanceof t?r.value=e.zigZagDecode64(r.value):r=e.zigZagDecode64(r),r}),i.writeCString=function(t,e){var i=void 0===e;i&&(e=this.offset);var r,n=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(r=0;r<n;++r)if(0===t.charCodeAt(r))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}n=u.calculateUTF16asUTF8(s(t))[1],e+=n+1;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=n+1,u.encodeUTF16toUTF8(s(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,i?(this.offset=e,this):n},i.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var i,r=t,n=-1;return u.decodeUTF8toUTF16(function(){if(0===n)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(n=this.view[t++])?null:n}.bind(this),i=o(),!0),e?(this.offset=t,i()):{string:i(),length:t-r}},i.writeIString=function(t,e){var i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var r,n=e;r=u.calculateUTF16asUTF8(s(t),this.noAssert)[1],e+=4+r;var o=this.buffer.byteLength;if(e>o&&this.resize((o*=2)>e?o:e),e-=4+r,this.littleEndian?(this.view[e+3]=r>>>24&255,this.view[e+2]=r>>>16&255,this.view[e+1]=r>>>8&255,this.view[e]=255&r):(this.view[e]=r>>>24&255,this.view[e+1]=r>>>16&255,this.view[e+2]=r>>>8&255,this.view[e+3]=255&r),e+=4,u.encodeUTF16toUTF8(s(t),function(t){this.view[e++]=t}.bind(this)),e!==n+4+r)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+r));return i?(this.offset=e,this):e-n},i.readIString=function(t){var i=void 0===t;if(i&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=t,n=this.readUint32(t),s=this.readUTF8String(n,e.METRICS_BYTES,t+=4);return t+=s.length,i?(this.offset=t,s.string):{string:s.string,length:t-r}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",i.writeUTF8String=function(t,e){var i,r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var n=e;i=u.calculateUTF16asUTF8(s(t))[1],e+=i;var o=this.buffer.byteLength;return e>o&&this.resize((o*=2)>e?o:e),e-=i,u.encodeUTF16toUTF8(s(t),function(t){this.view[e++]=t}.bind(this)),r?(this.offset=e,this):e-n},i.writeString=i.writeUTF8String,e.calculateUTF8Chars=function(t){return u.calculateUTF16asUTF8(s(t))[0]},e.calculateUTF8Bytes=function(t){return u.calculateUTF16asUTF8(s(t))[1]},e.calculateString=e.calculateUTF8Bytes,i.readUTF8String=function(t,i,r){"number"==typeof i&&(r=i,i=void 0);var n=void 0===r;if(n&&(r=this.offset),void 0===i&&(i=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var s,f=0,a=r;if(i===e.METRICS_CHARS){if(s=o(),u.decodeUTF8(function(){return f<t&&r<this.limit?this.view[r++]:null}.bind(this),(function(t){++f,u.UTF8toUTF16(t,s)})),f!==t)throw RangeError("Illegal range: Truncated data, "+f+" == "+t);return n?(this.offset=r,s()):{string:s(),length:r-a}}if(i===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+"+t+") <= "+this.buffer.byteLength)}var h=r+t;if(u.decodeUTF8toUTF16(function(){return r<h?this.view[r++]:null}.bind(this),s=o(),this.noAssert),r!==h)throw RangeError("Illegal range: Truncated data, "+r+" == "+h);return n?(this.offset=r,s()):{string:s(),length:r-a}}throw TypeError("Unsupported metrics: "+i)},i.readString=i.readUTF8String,i.writeVString=function(t,i){var r=void 0===i;if(r&&(i=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}var n,o,f=i;n=u.calculateUTF16asUTF8(s(t),this.noAssert)[1],o=e.calculateVarint32(n),i+=o+n;var a=this.buffer.byteLength;if(i>a&&this.resize((a*=2)>i?a:i),i-=o+n,i+=this.writeVarint32(n,i),u.encodeUTF16toUTF8(s(t),function(t){this.view[i++]=t}.bind(this)),i!==f+n+o)throw RangeError("Illegal range: Truncated data, "+i+" == "+(i+n+o));return r?(this.offset=i,this):i-f},i.readVString=function(t){var i=void 0===t;if(i&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=t,n=this.readVarint32(t),s=this.readUTF8String(n.value,e.METRICS_BYTES,t+=n.length);return t+=s.length,i?(this.offset=t,s.string):{string:s.string,length:t-r}},i.append=function(t,i,r){"number"!=typeof i&&"string"==typeof i||(r=i,i=void 0);var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,i));var s=t.limit-t.offset;if(s<=0)return this;r+=s;var o=this.buffer.byteLength;return r>o&&this.resize((o*=2)>r?o:r),r-=s,this.view.set(t.view.subarray(t.offset,t.limit),r),t.offset+=s,n&&(this.offset+=s),this},i.appendTo=function(t,e){return t.append(this,e),this},i.assert=function(t){return this.noAssert=!t,this},i.capacity=function(){return this.buffer.byteLength},i.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},i.clone=function(t){var i=new e(0,this.littleEndian,this.noAssert);return t?(i.buffer=new ArrayBuffer(this.buffer.byteLength),i.view=new Uint8Array(i.buffer)):(i.buffer=this.buffer,i.view=this.view),i.offset=this.offset,i.markedOffset=this.markedOffset,i.limit=this.limit,i},i.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var i=e-t;if(0===i)return this.buffer=r,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var n=new ArrayBuffer(i),s=new Uint8Array(n);return s.set(this.view.subarray(t,e)),this.buffer=n,this.view=s,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=i,this},i.copy=function(t,i){if(void 0===t&&(t=this.offset),void 0===i&&(i=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof i||i%1!=0)throw TypeError("Illegal end: Not an integer");if(i>>>=0,t<0||t>i||i>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+i+" <= "+this.buffer.byteLength)}if(t===i)return new e(0,this.littleEndian,this.noAssert);var r=i-t,n=new e(r,this.littleEndian,this.noAssert);return n.offset=0,n.limit=r,n.markedOffset>=0&&(n.markedOffset-=t),this.copyTo(n,0,t,i),n},i.copyTo=function(t,i,r,n){var s,o;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(i=(o=void 0===i)?t.offset:0|i,r=(s=void 0===r)?this.offset:0|r,n=void 0===n?this.limit:0|n,i<0||i>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+i+" <= "+t.buffer.byteLength);if(r<0||n>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+r+" <= "+this.buffer.byteLength);var f=n-r;return 0===f?t:(t.ensureCapacity(i+f),t.view.set(this.view.subarray(r,n),i),s&&(this.offset+=f),o&&(t.offset+=f),this)},i.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},i.fill=function(t,e,i){var r=void 0===e;if(r&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===i&&(i=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof i||i%1!=0)throw TypeError("Illegal end: Not an integer");if(i>>>=0,e<0||e>i||i>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+i+" <= "+this.buffer.byteLength)}if(e>=i)return this;for(;e<i;)this.view[e++]=t;return r&&(this.offset=e),this},i.flip=function(){return this.limit=this.offset,this.offset=0,this},i.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},i.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},i.LE=function(t){return this.littleEndian=void 0===t||!!t,this},i.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},i.prepend=function(t,i,r){"number"!=typeof i&&"string"==typeof i||(r=i,i=void 0);var n=void 0===r;if(n&&(r=this.offset),!this.noAssert){if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,i));var s=t.limit-t.offset;if(s<=0)return this;var o=s-r;if(o>0){var f=new ArrayBuffer(this.buffer.byteLength+o),a=new Uint8Array(f);a.set(this.view.subarray(r,this.buffer.byteLength),s),this.buffer=f,this.view=a,this.offset+=o,this.markedOffset>=0&&(this.markedOffset+=o),this.limit+=o,r+=o}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),r-s),t.offset=t.limit,n&&(this.offset-=s),this},i.prependTo=function(t,e){return t.prepend(this,e),this},i.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},i.remaining=function(){return this.limit-this.offset},i.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},i.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),i=new Uint8Array(e);i.set(this.view),this.buffer=e,this.view=i}return this},i.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e||Array.prototype.reverse.call(this.view.subarray(t,e)),this},i.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},i.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var i=this.clone();return i.offset=t,i.limit=e,i},i.toBuffer=function(t){var e=this.offset,i=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof i||i%1!=0)throw TypeError("Illegal limit: Not an integer");if(i>>>=0,e<0||e>i||i>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+i+" <= "+this.buffer.byteLength)}if(!t&&0===e&&i===this.buffer.byteLength)return this.buffer;if(e===i)return r;var n=new ArrayBuffer(i-e);return new Uint8Array(n).set(new Uint8Array(this.buffer).subarray(e,i),0),n},i.toArrayBuffer=i.toBuffer,i.toString=function(t,e,i){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(i=e=t="utf8"),t){case"utf8":return this.toUTF8(e,i);case"base64":return this.toBase64(e,i);case"hex":return this.toHex(e,i);case"binary":return this.toBinary(e,i);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var h=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],i=[],r=0,n=e.length;r<n;++r)i[e[r]]=r;return t.encode=function(t,i){for(var r,n;null!==(r=t());)i(e[r>>2&63]),n=(3&r)<<4,null!==(r=t())?(i(e[63&((n|=r>>4&15)|r>>4&15)]),n=(15&r)<<2,null!==(r=t())?(i(e[63&(n|r>>6&3)]),i(e[63&r])):(i(e[63&n]),i(61))):(i(e[63&n]),i(61),i(61))},t.decode=function(t,e){var r,n,s;function o(t){throw Error("Illegal character code: "+t)}for(;null!==(r=t());)if(void 0===(n=i[r])&&o(r),null!==(r=t())&&(void 0===(s=i[r])&&o(r),e(n<<2>>>0|(48&s)>>4),null!==(r=t()))){if(void 0===(n=i[r])){if(61===r)break;o(r)}if(e((15&s)<<4>>>0|(60&n)>>2),null!==(r=t())){if(void 0===(s=i[r])){if(61===r)break;o(r)}e((3&n)<<6>>>0|s)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();i.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var i;return h.encode(function(){return t<e?this.view[t++]:null}.bind(this),i=o()),i()},e.fromBase64=function(t,i){if("string"!=typeof t)throw TypeError("str");var r=new e(t.length/4*3,i),n=0;return h.decode(s(t),(function(t){r.view[n++]=t})),r.limit=n,r},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},i.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var i=[],r=[];t<e;)i.push(this.view[t++]),i.length>=1024&&(r.push(String.fromCharCode.apply(String,i)),i=[]);return r.join("")+String.fromCharCode.apply(String,i)},e.fromBinary=function(t,i){if("string"!=typeof t)throw TypeError("str");for(var r,n=0,s=t.length,o=new e(s,i);n<s;){if((r=t.charCodeAt(n))>255)throw RangeError("illegal char code: "+r);o.view[n++]=r}return o.limit=s,o},i.toDebug=function(t){for(var e,i=-1,r=this.buffer.byteLength,n="",s="",o="";i<r;){if(-1!==i&&(n+=(e=this.view[i])<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(s+=e>32&&e<127?String.fromCharCode(e):".")),++i,t&&i>0&&i%16==0&&i!==r){for(;n.length<51;)n+=" ";o+=n+s+"\n",n=s=""}i===this.offset&&i===this.limit?n+=i===this.markedOffset?"!":"|":i===this.offset?n+=i===this.markedOffset?"[":"<":i===this.limit?n+=i===this.markedOffset?"]":">":n+=i===this.markedOffset?"'":t||0!==i&&i!==r?" ":""}if(t&&" "!==n){for(;n.length<51;)n+=" ";o+=n+s+"\n"}return t?o:n},e.fromDebug=function(t,i,r){for(var n,s,o=t.length,f=new e((o+1)/3|0,i,r),a=0,h=0,u=!1,l=!1,g=!1,c=!1,d=!1;a<o;){switch(n=t.charAt(a++)){case"!":if(!r){if(l||g||c){d=!0;break}l=g=c=!0}f.offset=f.markedOffset=f.limit=h,u=!1;break;case"|":if(!r){if(l||c){d=!0;break}l=c=!0}f.offset=f.limit=h,u=!1;break;case"[":if(!r){if(l||g){d=!0;break}l=g=!0}f.offset=f.markedOffset=h,u=!1;break;case"<":if(!r){if(l){d=!0;break}l=!0}f.offset=h,u=!1;break;case"]":if(!r){if(c||g){d=!0;break}c=g=!0}f.limit=f.markedOffset=h,u=!1;break;case">":if(!r){if(c){d=!0;break}c=!0}f.limit=h,u=!1;break;case"'":if(!r){if(g){d=!0;break}g=!0}f.markedOffset=h,u=!1;break;case" ":u=!1;break;default:if(!r&&u){d=!0;break}if(s=parseInt(n+t.charAt(a++),16),!r&&(isNaN(s)||s<0||s>255))throw TypeError("Illegal str: Not a debug encoded string");f.view[h++]=s,u=!0}if(d)throw TypeError("Illegal str: Invalid symbol at "+a)}if(!r){if(!l||!c)throw TypeError("Illegal str: Missing offset or limit");if(h<f.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+h+" < "+o)}return f},i.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var i,r=new Array(e-t);t<e;)(i=this.view[t++])<16?r.push("0",i.toString(16)):r.push(i.toString(16));return r.join("")},e.fromHex=function(t,i,r){if(!r){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var n,s=t.length,o=new e(s/2|0,i),f=0,a=0;f<s;f+=2){if(n=parseInt(t.substring(f,f+2),16),!r&&(!isFinite(n)||n<0||n>255))throw TypeError("Illegal str: Contains non-hex characters");o.view[a++]=n}return o.limit=a,o};var u=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var i=null;for("number"==typeof t&&(i=t,t=function(){return null});null!==i||null!==(i=t());)i<128?e(127&i):i<2048?(e(i>>6&31|192),e(63&i|128)):i<65536?(e(i>>12&15|224),e(i>>6&63|128),e(63&i|128)):(e(i>>18&7|240),e(i>>12&63|128),e(i>>6&63|128),e(63&i|128)),i=null},decodeUTF8:function(t,e){for(var i,r,n,s,o=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(i=t());)if(0==(128&i))e(i);else if(192==(224&i))null===(r=t())&&o([i,r]),e((31&i)<<6|63&r);else if(224==(240&i))(null===(r=t())||null===(n=t()))&&o([i,r,n]),e((15&i)<<12|(63&r)<<6|63&n);else{if(240!=(248&i))throw RangeError("Illegal starting byte: "+i);(null===(r=t())||null===(n=t())||null===(s=t()))&&o([i,r,n,s]),e((7&i)<<18|(63&r)<<12|(63&n)<<6|63&s)}},UTF16toUTF8:function(t,e){for(var i,r=null;null!==(i=null!==r?r:t());)i>=55296&&i<=57343&&null!==(r=t())&&r>=56320&&r<=57343?(e(1024*(i-55296)+r-56320+65536),r=null):e(i);null!==r&&e(r)},UTF8toUTF16:function(t,e){var i=null;for("number"==typeof t&&(i=t,t=function(){return null});null!==i||null!==(i=t());)i<=65535?e(i):(e(55296+((i-=65536)>>10)),e(i%1024+56320)),i=null},encodeUTF16toUTF8:function(e,i){t.UTF16toUTF8(e,(function(e){t.encodeUTF8(e,i)}))},decodeUTF8toUTF16:function(e,i){t.decodeUTF8(e,(function(e){t.UTF8toUTF16(e,i)}))},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,i=0;null!==(e=t());)i+=e<128?1:e<2048?2:e<65536?3:4;return i},calculateUTF16asUTF8:function(e){var i=0,r=0;return t.UTF16toUTF8(e,(function(t){++i,r+=t<128?1:t<2048?2:t<65536?3:4})),[i,r]}};return t}();return i.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var i;try{u.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),i=o())}catch(i){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return i()},e.fromUTF8=function(t,i,r){if(!r&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var n=new e(u.calculateUTF16asUTF8(s(t),!0)[1],i,r),o=0;return u.encodeUTF16toUTF8(s(t),(function(t){n.view[o++]=t})),n.limit=o,n},e},void 0===(s=r.apply(e,n))||(t.exports=s)},514:function(t,e){var i,r;void 0===(r="function"==typeof(i=function(){"use strict";function t(t,e,i){this.low=0|t,this.high=0|e,this.unsigned=!!i}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var i={},r={};function n(t,e){var n,s,f;return e?(f=0<=(t>>>=0)&&t<256)&&(s=r[t])?s:(n=o(t,(0|t)<0?-1:0,!0),f&&(r[t]=n),n):(f=-128<=(t|=0)&&t<128)&&(s=i[t])?s:(n=o(t,t<0?-1:0,!1),f&&(i[t]=n),n)}function s(t,e){if(isNaN(t)||!isFinite(t))return e?v:d;if(e){if(t<0)return v;if(t>=l)return m}else{if(t<=-g)return E;if(t+1>=g)return p}return t<0?s(-t,e).neg():o(t%u|0,t/u|0,e)}function o(e,i,r){return new t(e,i,r)}t.fromInt=n,t.fromNumber=s,t.fromBits=o;var f=Math.pow;function a(t,e,i){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return d;if("number"==typeof e?(i=e,e=!1):e=!!e,(i=i||10)<2||36<i)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return a(t.substring(1),e,i).neg();for(var n=s(f(i,8)),o=d,h=0;h<t.length;h+=8){var u=Math.min(8,t.length-h),l=parseInt(t.substring(h,h+u),i);if(u<8){var g=s(f(i,u));o=o.mul(g).add(s(l))}else o=(o=o.mul(n)).add(s(l))}return o.unsigned=e,o}function h(e){return e instanceof t?e:"number"==typeof e?s(e):"string"==typeof e?a(e):o(e.low,e.high,e.unsigned)}t.fromString=a,t.fromValue=h;var u=4294967296,l=u*u,g=l/2,c=n(1<<24),d=n(0);t.ZERO=d;var v=n(0,!0);t.UZERO=v;var y=n(1);t.ONE=y;var w=n(1,!0);t.UONE=w;var b=n(-1);t.NEG_ONE=b;var p=o(-1,2147483647,!1);t.MAX_VALUE=p;var m=o(-1,-1,!0);t.MAX_UNSIGNED_VALUE=m;var E=o(0,-2147483648,!1);t.MIN_VALUE=E;var T=t.prototype;return T.toInt=function(){return this.unsigned?this.low>>>0:this.low},T.toNumber=function(){return this.unsigned?(this.high>>>0)*u+(this.low>>>0):this.high*u+(this.low>>>0)},T.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var e=s(t),i=this.div(e),r=i.mul(e).sub(this);return i.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var n=s(f(t,6),this.unsigned),o=this,a="";;){var h=o.div(n),u=(o.sub(h.mul(n)).toInt()>>>0).toString(t);if((o=h).isZero())return u+a;for(;u.length<6;)u="0"+u;a=""+u+a}},T.getHighBits=function(){return this.high},T.getHighBitsUnsigned=function(){return this.high>>>0},T.getLowBits=function(){return this.low},T.getLowBitsUnsigned=function(){return this.low>>>0},T.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},T.isZero=function(){return 0===this.high&&0===this.low},T.isNegative=function(){return!this.unsigned&&this.high<0},T.isPositive=function(){return this.unsigned||this.high>=0},T.isOdd=function(){return 1==(1&this.low)},T.isEven=function(){return 0==(1&this.low)},T.equals=function(t){return e(t)||(t=h(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},T.eq=T.equals,T.notEquals=function(t){return!this.eq(t)},T.neq=T.notEquals,T.lessThan=function(t){return this.comp(t)<0},T.lt=T.lessThan,T.lessThanOrEqual=function(t){return this.comp(t)<=0},T.lte=T.lessThanOrEqual,T.greaterThan=function(t){return this.comp(t)>0},T.gt=T.greaterThan,T.greaterThanOrEqual=function(t){return this.comp(t)>=0},T.gte=T.greaterThanOrEqual,T.compare=function(t){if(e(t)||(t=h(t)),this.eq(t))return 0;var i=this.isNegative(),r=t.isNegative();return i&&!r?-1:!i&&r?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},T.comp=T.compare,T.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(y)},T.neg=T.negate,T.add=function(t){e(t)||(t=h(t));var i=this.high>>>16,r=65535&this.high,n=this.low>>>16,s=65535&this.low,f=t.high>>>16,a=65535&t.high,u=t.low>>>16,l=0,g=0,c=0,d=0;return c+=(d+=s+(65535&t.low))>>>16,g+=(c+=n+u)>>>16,l+=(g+=r+a)>>>16,l+=i+f,o((c&=65535)<<16|(d&=65535),(l&=65535)<<16|(g&=65535),this.unsigned)},T.subtract=function(t){return e(t)||(t=h(t)),this.add(t.neg())},T.sub=T.subtract,T.multiply=function(t){if(this.isZero())return d;if(e(t)||(t=h(t)),t.isZero())return d;if(this.eq(E))return t.isOdd()?E:d;if(t.eq(E))return this.isOdd()?E:d;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(c)&&t.lt(c))return s(this.toNumber()*t.toNumber(),this.unsigned);var i=this.high>>>16,r=65535&this.high,n=this.low>>>16,f=65535&this.low,a=t.high>>>16,u=65535&t.high,l=t.low>>>16,g=65535&t.low,v=0,y=0,w=0,b=0;return w+=(b+=f*g)>>>16,y+=(w+=n*g)>>>16,w&=65535,y+=(w+=f*l)>>>16,v+=(y+=r*g)>>>16,y&=65535,v+=(y+=n*l)>>>16,y&=65535,v+=(y+=f*u)>>>16,v+=i*g+r*l+n*u+f*a,o((w&=65535)<<16|(b&=65535),(v&=65535)<<16|(y&=65535),this.unsigned)},T.mul=T.multiply,T.divide=function(t){if(e(t)||(t=h(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?v:d;var i,r,n;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return v;if(t.gt(this.shru(1)))return w;n=v}else{if(this.eq(E))return t.eq(y)||t.eq(b)?E:t.eq(E)?y:(i=this.shr(1).div(t).shl(1)).eq(d)?t.isNegative()?y:b:(r=this.sub(t.mul(i)),n=i.add(r.div(t)));if(t.eq(E))return this.unsigned?v:d;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();n=d}for(r=this;r.gte(t);){i=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var o=Math.ceil(Math.log(i)/Math.LN2),a=o<=48?1:f(2,o-48),u=s(i),l=u.mul(t);l.isNegative()||l.gt(r);)l=(u=s(i-=a,this.unsigned)).mul(t);u.isZero()&&(u=y),n=n.add(u),r=r.sub(l)}return n},T.div=T.divide,T.modulo=function(t){return e(t)||(t=h(t)),this.sub(this.div(t).mul(t))},T.mod=T.modulo,T.not=function(){return o(~this.low,~this.high,this.unsigned)},T.and=function(t){return e(t)||(t=h(t)),o(this.low&t.low,this.high&t.high,this.unsigned)},T.or=function(t){return e(t)||(t=h(t)),o(this.low|t.low,this.high|t.high,this.unsigned)},T.xor=function(t){return e(t)||(t=h(t)),o(this.low^t.low,this.high^t.high,this.unsigned)},T.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):o(0,this.low<<t-32,this.unsigned)},T.shl=T.shiftLeft,T.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?o(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):o(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},T.shr=T.shiftRight,T.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var i=this.high;return t<32?o(this.low>>>t|i<<32-t,i>>>t,this.unsigned):o(32===t?i:i>>>t-32,0,this.unsigned)},T.shru=T.shiftRightUnsigned,T.toSigned=function(){return this.unsigned?o(this.low,this.high,!1):this},T.toUnsigned=function(){return this.unsigned?this:o(this.low,this.high,!0)},T.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},T.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},T.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?i.apply(e,[]):i)||(t.exports=r)},310:function(t,e,i){"use strict";var r=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(n,s){function o(t){try{a(r.next(t))}catch(t){s(t)}}function f(t){try{a(r.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,f)}a((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.NstrumentaBrowserClient=void 0;const n=i(391),s=i(834);class o extends n.NstrumentaClientBase{connect(t){return r(this,void 0,void 0,(function*(){return new Promise(((e,i)=>r(this,void 0,void 0,(function*(){const{wsUrl:o,apiKey:f,verify:a=!0}=t||{},{search:h}=window.location,u=new URLSearchParams(h).get("wsUrl"),l=o||u||window.location.origin.replace("http","ws"),g=new URLSearchParams(h).get("apiKey"),c=localStorage.getItem("apiKey"),d=f||g||c||prompt("Enter your nstrumenta apiKey");if(d&&localStorage.setItem("apiKey",d),this.reconnection.attempts>100)throw new Error("Too many reconnection attempts, stopping");if(!d)throw new Error('nstrumenta api key is missing, pass it as an argument to NstrumentaClient.connect({apiKey: "your key"}) for javascript clients in the browser, or set the NSTRUMENTA_API_KEY environment variable get a key from your nstrumenta project settings https://nstrumenta.com/projects/ *your projectId here* /settings');this.apiKey=d;let v="unverified";if(a)try{v=yield(0,n.getToken)(this.apiKey)}catch(t){return console.error(t.message),void i(t)}this.ws=new WebSocket(l),this.ws.binaryType="arraybuffer",this.ws.addEventListener("open",(()=>r(this,void 0,void 0,(function*(){var t;console.log(`client websocket opened <${l}>`),null===(t=this.ws)||void 0===t||t.send(v),this.reconnection.attempts=0,this.connection.status=n.ClientStatus.CONNECTING})))),this.ws.addEventListener("close",(e=>{var i;this.connection.status=n.ClientStatus.DISCONNECTED,null===(i=this.listeners.get("close"))||void 0===i||i.forEach((t=>t())),console.log(`client websocket closed ${l} code:${e.code} wasClean:${e.wasClean}`),this.subscriptions.clear(),this.reconnection.hasVerified&&(this.reconnection.timeout=setTimeout((()=>{this.reconnection.timeout=null,console.log(`attempting to reconnect, attempts: ${this.reconnection.attempts}`),this.connect(t)}),this.rollOff(this.reconnection.attempts)),this.reconnection.attempts+=1)})),this.ws.addEventListener("error",(t=>{this.connection.status=n.ClientStatus.ERROR,i(`Error in websocket connection: ${t.message}`)})),this.ws.addEventListener("message",(t=>{var i,r,o;const f=t.data;let a;try{a=(0,s.deserializeWireMessage)(f)}catch(t){return void console.log(`Couldn't deserialize message ${JSON.stringify(t)}`)}const{channel:h,contents:u}=a;if("_nstrumenta"==h){const{verified:t,error:r,clientId:s}=u;r&&console.error(r),t&&(this.connection.status=n.ClientStatus.CONNECTED,this.reconnection.hasVerified=!0,null===(i=this.listeners.get("open"))||void 0===i||i.forEach((t=>t())),this.messageBuffer.forEach((t=>{var e;null===(e=this.ws)||void 0===e||e.send(t)})),this.messageBuffer=[],this.clientId=s,e(this.connection))}if("__event"==h){const{event:t}=u;null===(r=this.listeners.get(t))||void 0===r||r.forEach((t=>t()))}null===(o=this.subscriptions.get(h))||void 0===o||o.forEach((t=>{t(u)}))}))}))))}))}}e.NstrumentaBrowserClient=o},391:function(t,e,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||r(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),e.getEndpoints=void 0,e.getEndpoints=t=>{var e;const i=atob(null!==(e=t.split(":")[1])&&void 0!==e?e:"").trim();return{ADMIN_UTILS:`${i}/adminUtils`,GET_MACHINES:`${i}/getMachines`,GET_CLOUD_RUN_SERVICES:`${i}/getCloudRunServices`,GET_UPLOAD_URL:`${i}/getUploadUrl`,GET_UPLOAD_DATA_URL:`${i}/getUploadDataUrl`,GET_PROJECT:`${i}/getProject`,REGISTER_AGENT:`${i}/registerAgent`,LIST_AGENTS:`${i}/listAgents`,SET_ACTION:`${i}/setAction`,SET_AGENT_ACTION:`${i}/setAgentAction`,GET_AGENT_ID_BY_TAG:`${i}/getAgentIdByTag`,CLEAN_AGENT_ACTIONS:`${i}/cleanAgentActions`,GET_DOWNLOAD_URL:`${i}/getDownloadUrl`,GET_PROJECT_DOWNLOAD_URL:`${i}/getProjectDownloadUrl`,GENERATE_DATA_ID:`${i}/generateDataId`,LIST_MODULES:`${i}/listModules`,GET_TOKEN:`${i}/getToken`,VERIFY_TOKEN:`${i}/verifyToken`,VERIFY_API_KEY:`${i}/verifyApiKey`,SET_STORAGE_OBJECT:`${i}/setStorageObject`,SET_DATA_METADATA:`${i}/setDataMetadata`,LIST_STORAGE_OBJECTS:`${i}/listStorageObjects`,GET_DATA_MOUNT:`${i}/getDataMount`,QUERY_COLLECTION:`${i}/queryCollection`}},n(i(928),e),n(i(819),e)},834:function(t,e,i){"use strict";var r=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(n,s){function o(t){try{a(r.next(t))}catch(t){s(t)}}function f(t){try{a(r.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,f)}a((r=r.apply(t,e||[])).next())}))},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.deserializeByteBuffer=e.deserializeWireMessage=e.deserializeBlob=e.makeBusMessageFromBuffer=e.makeBusMessageFromJsonObject=e.BusMessageType=e.BusMessage=void 0;const s=n(i(779));class o extends s.default{}var f;e.BusMessage=o,function(t){t[t.BUS_MESSAGE_TYPES_BEGIN=100]="BUS_MESSAGE_TYPES_BEGIN",t[t.Json=101]="Json",t[t.Buffer=102]="Buffer",t[t.BUS_MESSAGE_TYPES_END=103]="BUS_MESSAGE_TYPES_END"}(f=e.BusMessageType||(e.BusMessageType={})),e.makeBusMessageFromJsonObject=(t,e)=>(new s.default).writeUint32(f.Json).writeIString(t).writeIString(JSON.stringify(e)).flip().toBuffer(),e.makeBusMessageFromBuffer=(t,e)=>(new s.default).writeUint32(f.Buffer).writeIString(t).append(e).flip().toBuffer(),e.deserializeBlob=t=>r(void 0,void 0,void 0,(function*(){const i=yield t.arrayBuffer(),r=new s.default(i.byteLength);return new Uint8Array(i).forEach((t=>{r.writeUint8(t)})),r.flip(),(0,e.deserializeByteBuffer)(r)})),e.deserializeWireMessage=t=>{if(t instanceof ArrayBuffer){const i=new s.default(t.byteLength);return new Uint8Array(t).forEach((t=>{i.writeUint8(t)})),i.flip(),(0,e.deserializeByteBuffer)(i)}{const i=new s.default(t.byteLength);return i.buffer=t,(0,e.deserializeByteBuffer)(i)}},e.deserializeByteBuffer=t=>{const e=t.readInt32();if(e<=f.BUS_MESSAGE_TYPES_BEGIN||e>=f.BUS_MESSAGE_TYPES_END)throw`unknown busMessageType ${e}: ${t}`;const i=t.readIString();let r;switch(e){case f.Json:r=JSON.parse(t.readIString());break;case f.Buffer:r=t.buffer.slice(t.offset)}return{channel:i,busMessageType:e,contents:r}}},380:function(t,e,i){"use strict";var r=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(n,s){function o(t){try{a(r.next(t))}catch(t){s(t)}}function f(t){try{a(r.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,f)}a((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StorageService=e.NstrumentaClientBase=e.getToken=e.ClientStatus=void 0;const n=i(609),s=i(391),o=i(834);var f;!function(t){t[t.INIT=0]="INIT",t[t.READY=1]="READY",t[t.CONNECTED=2]="CONNECTED",t[t.DISCONNECTED=3]="DISCONNECTED",t[t.CONNECTING=4]="CONNECTING",t[t.ERROR=5]="ERROR"}(f=e.ClientStatus||(e.ClientStatus={})),e.getToken=t=>r(void 0,void 0,void 0,(function*(){console.log("getToken",{apiKey:t,endpoint:(0,s.getEndpoints)(t).GET_TOKEN});const e={"x-api-key":t,"Content-Type":"application/json"};try{"undefined"!=typeof process&&(yield process.nextTick((()=>{})));const i=yield fetch((0,s.getEndpoints)(t).GET_TOKEN,{method:"GET",headers:e});if(!i.ok)throw new Error(`HTTP error! status: ${i.status}`);return(yield i.json()).token}catch(t){const e=`Problem getting token, check api key, err: ${t.message}`;throw new Error(e)}})),e.NstrumentaClientBase=class{constructor(t){this.ws=null,this.reconnection={hasVerified:!1,attempts:0,timeout:null},this.clientId=null,this.connection={status:f.INIT},this.addSubscription=(t,e)=>r(this,void 0,void 0,(function*(){const{subscriptionId:i}=yield this.callRPC("subscribe",{channel:t});console.log(`Nstrumenta client subscribe <${t}> subscriptionId:${i}`);const n=this.subscriptions.get(t)||new Map;return n.set(i,e),this.subscriptions.set(t,n),()=>r(this,void 0,void 0,(function*(){var e;yield this.callRPC("unsubscribe",{channel:t,subscriptionId:i}),null===(e=this.subscriptions.get(t))||void 0===e||e.delete(i)}))})),this.apiKey=t,this.listeners=new Map,this.subscriptions=new Map,this.datalogs=new Map,this.messageBuffer=[],this.endpoints=t?(0,s.getEndpoints)(t):(0,s.getEndpoints)("http://localhost:5999"),this.addSubscription=this.addSubscription.bind(this),this.addListener=this.addListener.bind(this),this.connect=this.connect.bind(this),this.storage=new a({apiKey:null!=t?t:""})}shutdown(){var t,e;return r(this,void 0,void 0,(function*(){this.listeners.clear(),this.subscriptions.clear(),this.datalogs.clear(),this.messageBuffer=[],this.reconnection.timeout&&(clearTimeout(this.reconnection.timeout),this.reconnection.timeout=null),null===(t=this.ws)||void 0===t||t.removeAllListeners(),null===(e=this.ws)||void 0===e||e.close()}))}rollOff(t){return 0==t?0:Math.min(1e3*Math.pow(t,2),18e5)}send(t,e){this.bufferedSend((0,s.makeBusMessageFromJsonObject)(t,e))}sendBuffer(t,e){this.bufferedSend((0,o.makeBusMessageFromBuffer)(t,e))}bufferedSend(t){var e,i,r;(null===(e=this.ws)||void 0===e?void 0:e.readyState)!==(null===(i=this.ws)||void 0===i?void 0:i.OPEN)?(console.log("adding to messageBuffer, length:",this.messageBuffer.length),this.messageBuffer.push(t)):null===(r=this.ws)||void 0===r||r.send(t)}addListener(t,e){this.listeners.get(t)||this.listeners.set(t,[]);const i=this.listeners.get(t);i&&i.push(e)}addStringToDataLog(t,e){const i=this.datalogs.get(t);i?i.push(e):(console.log(`starting new log: ${t}`),this.datalogs.set(t,[e]))}uploadData(t,e,i){var n;return r(this,void 0,void 0,(function*(){const r=e.size;let s;const o=yield fetch(this.endpoints.GET_UPLOAD_URL,{method:"POST",headers:{"Content-Type":"application/json","x-api-key":null===(n=this.apiKey)||void 0===n?void 0:n.split(":")[0]},body:JSON.stringify({path:t,size:r,meta:i})});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const f=yield o.json();s=null==f?void 0:f.uploadUrl;const a=yield fetch(s,{method:"PUT",headers:{"Content-Type":"application/octet-stream","Content-Range":`bytes 0-${r-1}/${r}`},body:e});if(!a.ok)throw new Error(`HTTP error! status: ${a.status}`)}))}ping(){return r(this,void 0,void 0,(function*(){return this.callRPC("ping",{sendTimestamp:Date.now()})}))}startLog(t,e,i){return r(this,void 0,void 0,(function*(){this.send("_nstrumenta",{command:"startLog",name:t,channels:e,config:i})}))}startRecording(t,e,i){return r(this,void 0,void 0,(function*(){return this.callRPC("startRecording",{name:t,channels:e,config:i})}))}stopRecording(t){return r(this,void 0,void 0,(function*(){return this.callRPC("stopRecording",{name:t})}))}finishLog(t){return r(this,void 0,void 0,(function*(){console.log("finish log"),this.send("_nstrumenta",{command:"finishLog",name:t})}))}callRPC(t,e){return r(this,void 0,void 0,(function*(){console.log("callRPC",t,e);const i=(0,n.v4)(),o=`__rpc/${t}/${i}`,f=`${o}/request`,a=`${o}/response`;return new Promise((t=>r(this,void 0,void 0,(function*(){var r;const n=this.subscriptions.get(a)||new Map;n.set(i,(e=>{null==n||n.delete(i),t(e)})),this.subscriptions.set(a,n),null===(r=this.ws)||void 0===r||r.send((0,s.makeBusMessageFromJsonObject)(f,e))}))))}))}};class a{constructor(t){var e;this.apiKey=t.apiKey,this.apiKeyHeader=null===(e=this.apiKey)||void 0===e?void 0:e.split(":")[0],this.endpoints=(0,s.getEndpoints)(this.apiKey)}getDownloadUrl(t){return r(this,void 0,void 0,(function*(){if(!this.apiKey)throw new Error("apiKey not set");const e=yield fetch(this.endpoints.GET_PROJECT_DOWNLOAD_URL,{method:"POST",headers:{"x-api-key":this.apiKeyHeader,"content-type":"application/json"},body:JSON.stringify({path:t})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return console.log("REQ:",e),(yield e.json()).url}))}download(t){return r(this,void 0,void 0,(function*(){if(!this.apiKey)throw new Error("apiKey not set");const e=yield fetch(this.endpoints.GET_PROJECT_DOWNLOAD_URL,{method:"POST",headers:{"x-api-key":this.apiKeyHeader,"content-type":"application/json"},body:JSON.stringify({path:t})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const i=yield e.json();console.log("REQ:",e);const r=yield fetch(i.url,{method:"GET"});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);return yield r.blob()}))}query({field:t,comparison:e,compareValue:i}){return r(this,void 0,void 0,(function*(){if(!this.apiKey)throw new Error("apiKey not set");const r={field:t,comparison:e,compareValue:i},n={method:"POST",headers:{"x-api-key":this.apiKeyHeader,"Content-Type":"application/json"},body:JSON.stringify(r)};try{const t=yield fetch(this.endpoints.QUERY_COLLECTION,n);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return yield t.json()}catch(t){return console.log(`Something went wrong: ${t.message}`),[]}}))}list(t){return r(this,void 0,void 0,(function*(){if(!this.apiKey)throw new Error("apiKey not set");const e=yield fetch(this.endpoints.LIST_STORAGE_OBJECTS,{method:"POST",headers:{"x-api-key":this.apiKeyHeader,"Content-Type":"application/json"},body:JSON.stringify({type:t})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return yield e.json()}))}upload({filename:t,data:e,meta:i,overwrite:n}){return r(this,void 0,void 0,(function*(){const r=e.size;let s;const o={method:"POST",headers:{"x-api-key":this.apiKeyHeader,"Content-Type":"application/json"},body:JSON.stringify({name:t,size:r,metadata:i,overwrite:n})};let f=yield fetch(this.endpoints.GET_UPLOAD_DATA_URL,o);if(!f.ok)return void console.warn(`HTTP error! status: ${f.status}`);const a=yield f.json();if(s=null==a?void 0:a.uploadUrl,!s)return console.warn(`no upload url returned, can't upload ${t}`),void console.log(a);const h=null==a?void 0:a.remoteFilePath,u={method:"PUT",headers:{"Content-Range":`bytes 0-${r-1}/${r}`,"Content-Type":"application/octet-stream"},body:e};console.log({remoteFilePath:h,uploadConfig:u});const l=yield fetch(s,u);l.ok||console.warn(`HTTP error! status: ${l.status}`)}))}}e.StorageService=a},928:function(t,e,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,r,n)}:function(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}),n=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||r(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),e.makeBusMessageFromJsonObject=e.deserializeWireMessage=e.deserializeBlob=e.BusMessage=void 0;var s=i(834);Object.defineProperty(e,"BusMessage",{enumerable:!0,get:function(){return s.BusMessage}}),Object.defineProperty(e,"deserializeBlob",{enumerable:!0,get:function(){return s.deserializeBlob}}),Object.defineProperty(e,"deserializeWireMessage",{enumerable:!0,get:function(){return s.deserializeWireMessage}}),Object.defineProperty(e,"makeBusMessageFromJsonObject",{enumerable:!0,get:function(){return s.makeBusMessageFromJsonObject}}),n(i(380),e)},819:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},609:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"NIL",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(e,"parse",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"v1",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"v3",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(e,"v4",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"v5",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"validate",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(e,"version",{enumerable:!0,get:function(){return a.default}});var r=g(i(147)),n=g(i(507)),s=g(i(891)),o=g(i(793)),f=g(i(335)),a=g(i(730)),h=g(i(627)),u=g(i(935)),l=g(i(890));function g(t){return t&&t.__esModule?t:{default:t}}},839:(t,e)=>{"use strict";function i(t){return 14+(t+64>>>9<<4)+1}function r(t,e){const i=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(i>>16)<<16|65535&i}function n(t,e,i,n,s,o){return r((f=r(r(e,t),r(n,o)))<<(a=s)|f>>>32-a,i);var f,a}function s(t,e,i,r,s,o,f){return n(e&i|~e&r,t,e,s,o,f)}function o(t,e,i,r,s,o,f){return n(e&r|i&~r,t,e,s,o,f)}function f(t,e,i,r,s,o,f){return n(e^i^r,t,e,s,o,f)}function a(t,e,i,r,s,o,f){return n(i^(e|~r),t,e,s,o,f)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(let i=0;i<e.length;++i)t[i]=e.charCodeAt(i)}return function(t){const e=[],i=32*t.length,r="0123456789abcdef";for(let n=0;n<i;n+=8){const i=t[n>>5]>>>n%32&255,s=parseInt(r.charAt(i>>>4&15)+r.charAt(15&i),16);e.push(s)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[i(e)-1]=e;let n=1732584193,h=-271733879,u=-1732584194,l=271733878;for(let e=0;e<t.length;e+=16){const i=n,g=h,c=u,d=l;n=s(n,h,u,l,t[e],7,-680876936),l=s(l,n,h,u,t[e+1],12,-389564586),u=s(u,l,n,h,t[e+2],17,606105819),h=s(h,u,l,n,t[e+3],22,-1044525330),n=s(n,h,u,l,t[e+4],7,-176418897),l=s(l,n,h,u,t[e+5],12,1200080426),u=s(u,l,n,h,t[e+6],17,-1473231341),h=s(h,u,l,n,t[e+7],22,-45705983),n=s(n,h,u,l,t[e+8],7,1770035416),l=s(l,n,h,u,t[e+9],12,-1958414417),u=s(u,l,n,h,t[e+10],17,-42063),h=s(h,u,l,n,t[e+11],22,-1990404162),n=s(n,h,u,l,t[e+12],7,1804603682),l=s(l,n,h,u,t[e+13],12,-40341101),u=s(u,l,n,h,t[e+14],17,-1502002290),h=s(h,u,l,n,t[e+15],22,1236535329),n=o(n,h,u,l,t[e+1],5,-165796510),l=o(l,n,h,u,t[e+6],9,-1069501632),u=o(u,l,n,h,t[e+11],14,643717713),h=o(h,u,l,n,t[e],20,-373897302),n=o(n,h,u,l,t[e+5],5,-701558691),l=o(l,n,h,u,t[e+10],9,38016083),u=o(u,l,n,h,t[e+15],14,-660478335),h=o(h,u,l,n,t[e+4],20,-405537848),n=o(n,h,u,l,t[e+9],5,568446438),l=o(l,n,h,u,t[e+14],9,-1019803690),u=o(u,l,n,h,t[e+3],14,-187363961),h=o(h,u,l,n,t[e+8],20,1163531501),n=o(n,h,u,l,t[e+13],5,-1444681467),l=o(l,n,h,u,t[e+2],9,-51403784),u=o(u,l,n,h,t[e+7],14,1735328473),h=o(h,u,l,n,t[e+12],20,-1926607734),n=f(n,h,u,l,t[e+5],4,-378558),l=f(l,n,h,u,t[e+8],11,-2022574463),u=f(u,l,n,h,t[e+11],16,1839030562),h=f(h,u,l,n,t[e+14],23,-35309556),n=f(n,h,u,l,t[e+1],4,-1530992060),l=f(l,n,h,u,t[e+4],11,1272893353),u=f(u,l,n,h,t[e+7],16,-155497632),h=f(h,u,l,n,t[e+10],23,-1094730640),n=f(n,h,u,l,t[e+13],4,681279174),l=f(l,n,h,u,t[e],11,-358537222),u=f(u,l,n,h,t[e+3],16,-722521979),h=f(h,u,l,n,t[e+6],23,76029189),n=f(n,h,u,l,t[e+9],4,-640364487),l=f(l,n,h,u,t[e+12],11,-421815835),u=f(u,l,n,h,t[e+15],16,530742520),h=f(h,u,l,n,t[e+2],23,-995338651),n=a(n,h,u,l,t[e],6,-198630844),l=a(l,n,h,u,t[e+7],10,1126891415),u=a(u,l,n,h,t[e+14],15,-1416354905),h=a(h,u,l,n,t[e+5],21,-57434055),n=a(n,h,u,l,t[e+12],6,1700485571),l=a(l,n,h,u,t[e+3],10,-1894986606),u=a(u,l,n,h,t[e+10],15,-1051523),h=a(h,u,l,n,t[e+1],21,-2054922799),n=a(n,h,u,l,t[e+8],6,1873313359),l=a(l,n,h,u,t[e+15],10,-30611744),u=a(u,l,n,h,t[e+6],15,-1560198380),h=a(h,u,l,n,t[e+13],21,1309151649),n=a(n,h,u,l,t[e+4],6,-145523070),l=a(l,n,h,u,t[e+11],10,-1120210379),u=a(u,l,n,h,t[e+2],15,718787259),h=a(h,u,l,n,t[e+9],21,-343485551),n=r(n,i),h=r(h,g),u=r(u,c),l=r(l,d)}return[n,h,u,l]}(function(t){if(0===t.length)return[];const e=8*t.length,r=new Uint32Array(i(e));for(let i=0;i<e;i+=8)r[i>>5]|=(255&t[i/8])<<i%32;return r}(t),8*t.length))}},918:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};e.default=i},335:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default="00000000-0000-0000-0000-000000000000"},890:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,n=(r=i(627))&&r.__esModule?r:{default:r};e.default=function(t){if(!(0,n.default)(t))throw TypeError("Invalid UUID");let e;const i=new Uint8Array(16);return i[0]=(e=parseInt(t.slice(0,8),16))>>>24,i[1]=e>>>16&255,i[2]=e>>>8&255,i[3]=255&e,i[4]=(e=parseInt(t.slice(9,13),16))>>>8,i[5]=255&e,i[6]=(e=parseInt(t.slice(14,18),16))>>>8,i[7]=255&e,i[8]=(e=parseInt(t.slice(19,23),16))>>>8,i[9]=255&e,i[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,i[11]=e/4294967296&255,i[12]=e>>>24&255,i[13]=e>>>16&255,i[14]=e>>>8&255,i[15]=255&e,i}},19:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},857:(t,e)=>{"use strict";let i;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){if(!i&&(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!i))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(r)};const r=new Uint8Array(16)},370:(t,e)=>{"use strict";function i(t,e,i,r){switch(t){case 0:return e&i^~e&r;case 1:case 3:return e^i^r;case 2:return e&i^e&r^i&r}}function r(t,e){return t<<e|t>>>32-e}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){const e=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=[];for(let i=0;i<e.length;++i)t.push(e.charCodeAt(i))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);const s=t.length/4+2,o=Math.ceil(s/16),f=new Array(o);for(let e=0;e<o;++e){const i=new Uint32Array(16);for(let r=0;r<16;++r)i[r]=t[64*e+4*r]<<24|t[64*e+4*r+1]<<16|t[64*e+4*r+2]<<8|t[64*e+4*r+3];f[e]=i}f[o-1][14]=8*(t.length-1)/Math.pow(2,32),f[o-1][14]=Math.floor(f[o-1][14]),f[o-1][15]=8*(t.length-1)&4294967295;for(let t=0;t<o;++t){const s=new Uint32Array(80);for(let e=0;e<16;++e)s[e]=f[t][e];for(let t=16;t<80;++t)s[t]=r(s[t-3]^s[t-8]^s[t-14]^s[t-16],1);let o=n[0],a=n[1],h=n[2],u=n[3],l=n[4];for(let t=0;t<80;++t){const n=Math.floor(t/20),f=r(o,5)+i(n,a,h,u)+l+e[n]+s[t]>>>0;l=u,u=h,h=r(a,30)>>>0,a=o,o=f}n[0]=n[0]+o>>>0,n[1]=n[1]+a>>>0,n[2]=n[2]+h>>>0,n[3]=n[3]+u>>>0,n[4]=n[4]+l>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]}},935:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.unsafeStringify=o;var r,n=(r=i(627))&&r.__esModule?r:{default:r};const s=[];for(let t=0;t<256;++t)s.push((t+256).toString(16).slice(1));function o(t,e=0){return s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]}e.default=function(t,e=0){const i=o(t,e);if(!(0,n.default)(i))throw TypeError("Stringified UUID is invalid");return i}},147:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,n=(r=i(857))&&r.__esModule?r:{default:r},s=i(935);let o,f,a=0,h=0;e.default=function(t,e,i){let r=e&&i||0;const u=e||new Array(16);let l=(t=t||{}).node||o,g=void 0!==t.clockseq?t.clockseq:f;if(null==l||null==g){const e=t.random||(t.rng||n.default)();null==l&&(l=o=[1|e[0],e[1],e[2],e[3],e[4],e[5]]),null==g&&(g=f=16383&(e[6]<<8|e[7]))}let c=void 0!==t.msecs?t.msecs:Date.now(),d=void 0!==t.nsecs?t.nsecs:h+1;const v=c-a+(d-h)/1e4;if(v<0&&void 0===t.clockseq&&(g=g+1&16383),(v<0||c>a)&&void 0===t.nsecs&&(d=0),d>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=c,h=d,f=g,c+=122192928e5;const y=(1e4*(268435455&c)+d)%4294967296;u[r++]=y>>>24&255,u[r++]=y>>>16&255,u[r++]=y>>>8&255,u[r++]=255&y;const w=c/4294967296*1e4&268435455;u[r++]=w>>>8&255,u[r++]=255&w,u[r++]=w>>>24&15|16,u[r++]=w>>>16&255,u[r++]=g>>>8|128,u[r++]=255&g;for(let t=0;t<6;++t)u[r+t]=l[t];return e||(0,s.unsafeStringify)(u)}},507:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=s(i(802)),n=s(i(839));function s(t){return t&&t.__esModule?t:{default:t}}var o=(0,r.default)("v3",48,n.default);e.default=o},802:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.URL=e.DNS=void 0,e.default=function(t,e,i){function r(t,r,o,f){var a;if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));const e=[];for(let i=0;i<t.length;++i)e.push(t.charCodeAt(i));return e}(t)),"string"==typeof r&&(r=(0,s.default)(r)),16!==(null===(a=r)||void 0===a?void 0:a.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let h=new Uint8Array(16+t.length);if(h.set(r),h.set(t,r.length),h=i(h),h[6]=15&h[6]|e,h[8]=63&h[8]|128,o){f=f||0;for(let t=0;t<16;++t)o[f+t]=h[t];return o}return(0,n.unsafeStringify)(h)}try{r.name=t}catch(t){}return r.DNS=o,r.URL=f,r};var r,n=i(935),s=(r=i(890))&&r.__esModule?r:{default:r};const o="6ba7b810-9dad-11d1-80b4-00c04fd430c8";e.DNS=o;const f="6ba7b811-9dad-11d1-80b4-00c04fd430c8";e.URL=f},891:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(i(918)),n=o(i(857)),s=i(935);function o(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e,i){if(r.default.randomUUID&&!e&&!t)return r.default.randomUUID();const o=(t=t||{}).random||(t.rng||n.default)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){i=i||0;for(let t=0;t<16;++t)e[i+t]=o[t];return e}return(0,s.unsafeStringify)(o)}},793:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=s(i(802)),n=s(i(370));function s(t){return t&&t.__esModule?t:{default:t}}var o=(0,r.default)("v5",80,n.default);e.default=o},627:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,n=(r=i(19))&&r.__esModule?r:{default:r};e.default=function(t){return"string"==typeof t&&n.default.test(t)}},730:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,n=(r=i(627))&&r.__esModule?r:{default:r};e.default=function(t){if(!(0,n.default)(t))throw TypeError("Invalid UUID");return parseInt(t.slice(14,15),16)}}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var s=e[r]={exports:{}};return t[r].call(s.exports,s,s.exports,i),s.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=i(310),e=new t.NstrumentaBrowserClient;document.addEventListener("readystatechange",(function(){return t=void 0,i=void 0,n=function(){var t,i,r,n,s,o,f;return function(t,e){var i,r,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function f(f){return function(a){return function(f){if(i)throw new TypeError("Generator is already executing.");for(;s&&(s=0,f[0]&&(o=0)),o;)try{if(i=1,r&&(n=2&f[0]?r.return:f[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,f[1])).done)return n;switch(r=0,n&&(f=[2&f[0],n.value]),f[0]){case 0:case 1:n=f;break;case 4:return o.label++,{value:f[1],done:!1};case 5:o.label++,r=f[1],f=[0];continue;case 7:f=o.ops.pop(),o.trys.pop();continue;default:if(!((n=(n=o.trys).length>0&&n[n.length-1])||6!==f[0]&&2!==f[0])){o=0;continue}if(3===f[0]&&(!n||f[1]>n[0]&&f[1]<n[3])){o.label=f[1];break}if(6===f[0]&&o.label<n[1]){o.label=n[1],n=f;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(f);break}n[2]&&o.ops.pop(),o.trys.pop();continue}f=e.call(t,o)}catch(t){f=[6,t],r=0}finally{i=n=0}if(5&f[0])throw f[1];return{value:f[0]?f[1]:void 0,done:!0}}([f,a])}}}(this,(function(a){switch(a.label){case 0:return"complete"!==document.readyState?[2]:(t=document.getElementById("outputTextArea"),e.addListener("open",(function(){var i=!1;console.log("client open"),e.addSubscription("__event",(function(t){"health"===t.event&&(document.getElementById("health").innerText=new Date(Date.now()).toLocaleString())})),e.addSubscription("_status",(function(r){var n=r.agentId;document.getElementById("status").innerText=JSON.stringify(r),n&&!i&&(i=!0,e.addSubscription("_".concat(n,"/stdout"),(function(e){var i=(new TextDecoder).decode(e);t.textContent+="".concat(i,"\n")})))}))})),i=new URL(window.location.href).searchParams,r=i.get("wsUrl"),n=r||window.location.origin.replace("http","ws"),(s=i.get("apiKey"))&&localStorage.setItem("apiKey",s),o=localStorage.getItem("apiKey"),f=s||o,[4,e.connect({apiKey:f,wsUrl:n})]);case 1:return a.sent(),[2]}}))},new((r=void 0)||(r=Promise))((function(e,s){function o(t){try{a(n.next(t))}catch(t){s(t)}}function f(t){try{a(n.throw(t))}catch(t){s(t)}}function a(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r((function(t){t(i)}))).then(o,f)}a((n=n.apply(t,i||[])).next())}));var t,i,r,n}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,