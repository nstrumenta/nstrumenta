/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={4430:function(t,e,r){"use strict";var i=this&&this.__awaiter||function(t,e,r,i){return new(r||(r=Promise))((function(n,o){function s(t){try{f(i.next(t))}catch(t){o(t)}}function a(t){try{f(i.throw(t))}catch(t){o(t)}}function f(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}f((i=i.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.NstrumentaBrowserClient=e.endpoints=void 0;const n=r(4308),o=r(7374);e.endpoints=(0,n.getEndpoints)("prod");class s extends n.NstrumentaClientBase{constructor(){super()}connect(t){return i(this,void 0,void 0,(function*(){const{wsUrl:e,apiKey:r,verify:s=!0}=t||{},{search:a}=window.location,f=new URLSearchParams(a).get("wsUrl"),u=e||f||window.location.origin.replace("http","ws"),h=new URLSearchParams(a).get("apiKey"),l=localStorage.getItem("apiKey"),c=r||h||l||prompt("Enter your nstrumenta apiKey");if(c&&localStorage.setItem("apiKey",c),this.reconnection.attempts>100)throw new Error("Too many reconnection attempts, stopping");if(!c)throw new Error('nstrumenta api key is missing, pass it as an argument to NstrumentaClient.connect({apiKey: "your key"}) for javascript clients in the browser, or set the NSTRUMENTA_API_KEY environment variable get a key from your nstrumenta project settings https://nstrumenta.com/projects/ *your projectId here* /settings');this.apiKey=c;let d="unverified";if(s)try{d=yield(0,n.getToken)(this.apiKey),this.storage=new n.StorageService({apiKey:this.apiKey})}catch(t){throw console.error(t.message),t}return this.ws=new WebSocket(u),this.ws.binaryType="arraybuffer",this.ws.addEventListener("open",(()=>i(this,void 0,void 0,(function*(){var t;console.log(`client websocket opened <${u}>`),null===(t=this.ws)||void 0===t||t.send(d),this.reconnection.attempts=0,this.connection.status=n.ClientStatus.CONNECTING})))),this.ws.addEventListener("close",(e=>{var r;this.connection.status=n.ClientStatus.DISCONNECTED,null===(r=this.listeners.get("close"))||void 0===r||r.forEach((t=>t())),console.log(`client websocket closed ${u} code:${e.code} wasClean:${e.wasClean}`),this.subscriptions.clear(),this.reconnection.hasVerified&&(this.reconnection.timeout=setTimeout((()=>{this.reconnection.timeout=null,console.log(`attempting to reconnect, attempts: ${this.reconnection.attempts}`),this.connect(t)}),this.rollOff(this.reconnection.attempts)),this.reconnection.attempts+=1)})),this.ws.addEventListener("error",(()=>{console.log("Error in websocket connection"),this.connection.status=n.ClientStatus.ERROR})),this.ws.addEventListener("message",(t=>{var e,r;const i=t.data;let s;try{s=(0,o.deserializeWireMessage)(i)}catch(t){return void console.log(`Couldn't deserialize message ${JSON.stringify(t)}`)}const{channel:a,contents:f}=s;if("_nstrumenta"==a){const{verified:t,error:r,clientId:i}=f;r&&console.error(r),t&&(this.connection.status=n.ClientStatus.CONNECTED,this.reconnection.hasVerified=!0,null===(e=this.listeners.get("open"))||void 0===e||e.forEach((t=>t())),this.messageBuffer.forEach((t=>{var e;null===(e=this.ws)||void 0===e||e.send(t)})),this.messageBuffer=[],this.clientId=i)}null===(r=this.subscriptions.get(a))||void 0===r||r.forEach((t=>{t(f)}))})),this.connection}))}}e.NstrumentaBrowserClient=s},4308:function(t,e,r){"use strict";var i,n=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.ObjectTypes=e.getEndpoints=e.DEFAULT_HOST_PORT=void 0,e.DEFAULT_HOST_PORT="8088",e.getEndpoints=t=>{const e="local"===t?"http://localhost:8088":"https://us-central1-macro-coil-194519.cloudfunctions.net";return{ADMIN_UTILS:`${e}/adminUtils`,GET_MACHINES:`${e}/getMachines`,GET_UPLOAD_URL:`${e}/getUploadUrl`,GET_UPLOAD_DATA_URL:`${e}/getUploadDataUrl`,REGISTER_AGENT:`${e}/registerAgent`,LIST_AGENTS:`${e}/listAgents`,SET_AGENT_ACTION:`${e}/setAgentAction`,GET_AGENT_ID_BY_TAG:`${e}/getAgentIdByTag`,CLEAN_AGENT_ACTIONS:`${e}/cleanAgentActions`,GET_DOWNLOAD_URL:`${e}/getDownloadUrl`,GET_PROJECT_DOWNLOAD_URL:`${e}/getProjectDownloadUrl`,GENERATE_DATA_ID:`${e}/generateDataId`,LIST_MODULES:`${e}/listModules`,GET_TOKEN:`${e}/getToken`,VERIFY_TOKEN:`${e}/verifyToken`,VERIFY_API_KEY:`${e}/verifyApiKey`,SET_STORAGE_OBJECT:`${e}/setStorageObject`,SET_DATA_METADATA:`${e}/setDataMetadata`,LIST_STORAGE_OBJECTS:`${e}/listStorageObjects`,QUERY_DATA:`${e}/queryData`,v2:{LIST_MODULES:`${e}/listModulesV2`}}},(i=e.ObjectTypes||(e.ObjectTypes={})).DATA="data",i.MODULES="modules",o(r(7280),e),o(r(1371),e)},7374:function(t,e,r){"use strict";var i=this&&this.__awaiter||function(t,e,r,i){return new(r||(r=Promise))((function(n,o){function s(t){try{f(i.next(t))}catch(t){o(t)}}function a(t){try{f(i.throw(t))}catch(t){o(t)}}function f(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}f((i=i.apply(t,e||[])).next())}))},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.deserializeByteBuffer=e.deserializeWireMessage=e.deserializeBlob=e.makeBusMessageFromBuffer=e.makeBusMessageFromJsonObject=e.BusMessageType=e.BusMessage=void 0;const o=n(r(1546));class s extends o.default{}var a;e.BusMessage=s,function(t){t[t.BUS_MESSAGE_TYPES_BEGIN=100]="BUS_MESSAGE_TYPES_BEGIN",t[t.Json=101]="Json",t[t.Buffer=102]="Buffer",t[t.BUS_MESSAGE_TYPES_END=103]="BUS_MESSAGE_TYPES_END"}(a=e.BusMessageType||(e.BusMessageType={})),e.makeBusMessageFromJsonObject=(t,e)=>(new o.default).writeUint32(a.Json).writeIString(t).writeIString(JSON.stringify(e)).flip().toBuffer(),e.makeBusMessageFromBuffer=(t,e)=>(new o.default).writeUint32(a.Buffer).writeIString(t).append(e).flip().toBuffer(),e.deserializeBlob=t=>i(void 0,void 0,void 0,(function*(){const r=yield t.arrayBuffer(),i=new o.default(r.byteLength);return new Uint8Array(r).forEach((t=>{i.writeUint8(t)})),i.flip(),(0,e.deserializeByteBuffer)(i)})),e.deserializeWireMessage=t=>{if(t instanceof ArrayBuffer){const r=new o.default(t.byteLength);return new Uint8Array(t).forEach((t=>{r.writeUint8(t)})),r.flip(),(0,e.deserializeByteBuffer)(r)}{const r=new o.default(t.byteLength);return r.buffer=t,(0,e.deserializeByteBuffer)(r)}},e.deserializeByteBuffer=t=>{const e=t.readInt32();if(e<=a.BUS_MESSAGE_TYPES_BEGIN||e>=a.BUS_MESSAGE_TYPES_END)throw`unknown busMessageType ${e}: ${t}`;const r=t.readIString();let i;switch(e){case a.Json:i=JSON.parse(t.readIString());break;case a.Buffer:i=t.buffer.slice(t.offset)}return{channel:r,busMessageType:e,contents:i}}},9187:function(t,e,r){"use strict";var i=this&&this.__awaiter||function(t,e,r,i){return new(r||(r=Promise))((function(n,o){function s(t){try{f(i.next(t))}catch(t){o(t)}}function a(t){try{f(i.throw(t))}catch(t){o(t)}}function f(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}f((i=i.apply(t,e||[])).next())}))},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.StorageService=e.NstrumentaClientBase=e.getToken=e.ClientStatus=void 0;const o=n(r(4206)),s=r(338),a=r(4308),f=r(7374);var u;!function(t){t[t.INIT=0]="INIT",t[t.READY=1]="READY",t[t.CONNECTED=2]="CONNECTED",t[t.DISCONNECTED=3]="DISCONNECTED",t[t.CONNECTING=4]="CONNECTING",t[t.ERROR=5]="ERROR"}(u=e.ClientStatus||(e.ClientStatus={})),e.getToken=t=>i(void 0,void 0,void 0,(function*(){const e={"x-api-key":t,"Content-Type":"application/json"};try{"undefined"!=typeof process&&(yield process.nextTick((()=>{})));const{data:t}=yield o.default.get((0,a.getEndpoints)("prod").GET_TOKEN,{headers:e});return t.token}catch(t){const e=`Problem getting token, check api key, err: ${t.message}`;throw new Error(e)}})),e.NstrumentaClientBase=class{constructor(){this.ws=null,this.apiKey=null,this.reconnection={hasVerified:!1,attempts:0,timeout:null},this.clientId=null,this.connection={status:u.INIT},this.addSubscription=(t,e)=>i(this,void 0,void 0,(function*(){const{subscriptionId:r}=yield this.callRPC("subscribe",{channel:t});console.log(`Nstrumenta client subscribe <${t}> subscriptionId:${r}`);const n=this.subscriptions.get(t)||new Map;return n.set(r,e),this.subscriptions.set(t,n),()=>i(this,void 0,void 0,(function*(){var e;yield this.callRPC("unsubscribe",{channel:t,subscriptionId:r}),null===(e=this.subscriptions.get(t))||void 0===e||e.delete(r)}))})),this.listeners=new Map,this.subscriptions=new Map,this.datalogs=new Map,this.messageBuffer=[],this.endpoints=(0,a.getEndpoints)("prod"),this.addSubscription=this.addSubscription.bind(this),this.addListener=this.addListener.bind(this),this.connect=this.connect.bind(this)}shutdown(){var t,e;return i(this,void 0,void 0,(function*(){this.listeners.clear(),this.subscriptions.clear(),this.datalogs.clear(),this.messageBuffer=[],this.reconnection.timeout&&(clearTimeout(this.reconnection.timeout),this.reconnection.timeout=null),null===(t=this.ws)||void 0===t||t.removeAllListeners(),null===(e=this.ws)||void 0===e||e.close()}))}rollOff(t){return 0==t?0:Math.min(1e3*Math.pow(t,2),18e5)}send(t,e){this.bufferedSend((0,a.makeBusMessageFromJsonObject)(t,e))}sendBuffer(t,e){this.bufferedSend((0,f.makeBusMessageFromBuffer)(t,e))}bufferedSend(t){var e,r,i;(null===(e=this.ws)||void 0===e?void 0:e.readyState)!==(null===(r=this.ws)||void 0===r?void 0:r.OPEN)?(console.log("adding to messageBuffer, length:",this.messageBuffer.length),this.messageBuffer.push(t)):null===(i=this.ws)||void 0===i||i.send(t)}addListener(t,e){this.listeners.get(t)||this.listeners.set(t,[]);const r=this.listeners.get(t);r&&r.push(e)}addStringToDataLog(t,e){const r=this.datalogs.get(t);r?r.push(e):(console.log(`starting new log: ${t}`),this.datalogs.set(t,[e]))}uploadData(t,e,r){var n;return i(this,void 0,void 0,(function*(){const i=e.size;let s;const a=yield o.default.post(this.endpoints.GET_UPLOAD_URL,{path:t,size:i,meta:r},{headers:{contentType:"application/json","x-api-key":this.apiKey}});s=null===(n=a.data)||void 0===n?void 0:n.uploadUrl,yield o.default.put(s,e,{maxBodyLength:1/0,maxContentLength:1/0,headers:{contentType:"application/octet-stream",contentLength:`${i}`,contentLengthRange:`bytes 0-${i-1}/${i}`}})}))}ping(){return i(this,void 0,void 0,(function*(){return this.callRPC("ping",{sendTimestamp:Date.now()})}))}startLog(t,e,r){return i(this,void 0,void 0,(function*(){this.send("_nstrumenta",{command:"startLog",name:t,channels:e,config:r})}))}finishLog(t){return i(this,void 0,void 0,(function*(){console.log("finish log"),this.send("_nstrumenta",{command:"finishLog",name:t})}))}callRPC(t,e){return i(this,void 0,void 0,(function*(){console.log("callRPC",t,e);const r=(0,s.v4)(),n=`__rpc/${t}/${r}`,o=`${n}/request`,f=`${n}/response`;return new Promise((t=>i(this,void 0,void 0,(function*(){var i;const n=this.subscriptions.get(f)||new Map;n.set(r,(e=>{null==n||n.delete(r),t(e)})),this.subscriptions.set(f,n),null===(i=this.ws)||void 0===i||i.send((0,a.makeBusMessageFromJsonObject)(o,e))}))))}))}},e.StorageService=class{constructor(t){this.apiKey=t.apiKey,this.endpoints=(0,a.getEndpoints)("prod")}download(t){return i(this,void 0,void 0,(function*(){const e=yield(0,o.default)(this.endpoints.GET_PROJECT_DOWNLOAD_URL,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{path:t}});console.log("REQ:",e.request);const{data:r}=yield(0,o.default)(e.data,{method:"GET",responseType:"blob"});return r}))}query({filenames:t,tag:e,before:r,after:n,limit:s=1,metadata:a}){return i(this,void 0,void 0,(function*(){const i="string"==typeof a?JSON.parse(a):"object"==typeof a?a:{},f={tags:e,before:r,after:n,limit:s,filenames:t,metadata:i},u={method:"post",headers:{"x-api-key":this.apiKey},data:f};try{return(yield(0,o.default)(this.endpoints.QUERY_DATA,u)).data}catch(t){return console.log(`Something went wrong: ${t.message}`),[]}}))}list(t){return i(this,void 0,void 0,(function*(){return(yield(0,o.default)(this.endpoints.LIST_STORAGE_OBJECTS,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{type:t}})).data}))}upload({filename:t,data:e,meta:r,dataId:n}){var s,a;return i(this,void 0,void 0,(function*(){const i=e.size;let f,u=n;u||(u=(yield(0,o.default)(this.endpoints.GENERATE_DATA_ID,{headers:{"x-api-key":this.apiKey,method:"post"}})).data.dataId);const h={method:"post",headers:{"x-api-key":this.apiKey,"Content-Type":"application/json"},data:{name:t,dataId:u,size:i,metadata:r}};let l=yield(0,o.default)(this.endpoints.GET_UPLOAD_DATA_URL,h);if(f=null===(s=l.data)||void 0===s?void 0:s.uploadUrl,!f)return console.warn(`no upload url returned, can't upload ${t}`),void console.log(l.data);const c=null===(a=l.data)||void 0===a?void 0:a.remoteFilePath,d={maxBodyLength:1/0,maxContentLength:1/0,headers:{contentLength:`${i}`,contentLengthRange:`bytes 0-${i-1}/${i}`,"content-type":"application/octet-stream"},url:f,method:"PUT",data:e};console.log({remoteFilePath:c,uploadConfig:d}),yield(0,o.default)(d)}))}}},7280:function(t,e,r){"use strict";var i=this&&this.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),n=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||i(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.makeBusMessageFromJsonObject=e.deserializeWireMessage=e.deserializeBlob=e.BusMessage=void 0;var o=r(7374);Object.defineProperty(e,"BusMessage",{enumerable:!0,get:function(){return o.BusMessage}}),Object.defineProperty(e,"deserializeBlob",{enumerable:!0,get:function(){return o.deserializeBlob}}),Object.defineProperty(e,"deserializeWireMessage",{enumerable:!0,get:function(){return o.deserializeWireMessage}}),Object.defineProperty(e,"makeBusMessageFromJsonObject",{enumerable:!0,get:function(){return o.makeBusMessageFromJsonObject}}),n(r(9187),e)},1371:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},4206:(t,e,r)=>{t.exports=r(8057)},4387:(t,e,r)=>{"use strict";var i=r(7485),n=r(4570),o=r(2940),s=r(581),a=r(574),f=r(3845),u=r(8338),h=r(8524),l=r(4832),c=r(7132);t.exports=function(t){return new Promise((function(e,r){var d,g=t.data,p=t.headers,v=t.responseType;function y(){t.cancelToken&&t.cancelToken.unsubscribe(d),t.signal&&t.signal.removeEventListener("abort",d)}i.isFormData(g)&&delete p["Content-Type"];var b=new XMLHttpRequest;if(t.auth){var w=t.auth.username||"",m=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";p.Authorization="Basic "+btoa(w+":"+m)}var E=a(t.baseURL,t.url);function T(){if(b){var i="getAllResponseHeaders"in b?f(b.getAllResponseHeaders()):null,o={data:v&&"text"!==v&&"json"!==v?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:i,config:t,request:b};n((function(t){e(t),y()}),(function(t){r(t),y()}),o),b=null}}if(b.open(t.method.toUpperCase(),s(E,t.params,t.paramsSerializer),!0),b.timeout=t.timeout,"onloadend"in b?b.onloadend=T:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(T)},b.onabort=function(){b&&(r(h("Request aborted",t,"ECONNABORTED",b)),b=null)},b.onerror=function(){r(h("Network Error",t,null,b)),b=null},b.ontimeout=function(){var e=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded",i=t.transitional||l;t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),r(h(e,t,i.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",b)),b=null},i.isStandardBrowserEnv()){var I=(t.withCredentials||u(E))&&t.xsrfCookieName?o.read(t.xsrfCookieName):void 0;I&&(p[t.xsrfHeaderName]=I)}"setRequestHeader"in b&&i.forEach(p,(function(t,e){void 0===g&&"content-type"===e.toLowerCase()?delete p[e]:b.setRequestHeader(e,t)})),i.isUndefined(t.withCredentials)||(b.withCredentials=!!t.withCredentials),v&&"json"!==v&&(b.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&b.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",t.onUploadProgress),(t.cancelToken||t.signal)&&(d=function(t){b&&(r(!t||t&&t.type?new c("canceled"):t),b.abort(),b=null)},t.cancelToken&&t.cancelToken.subscribe(d),t.signal&&(t.signal.aborted?d():t.signal.addEventListener("abort",d))),g||(g=null),b.send(g)}))}},8057:(t,e,r)=>{"use strict";var i=r(7485),n=r(875),o=r(5029),s=r(4941),a=function t(e){var r=new o(e),a=n(o.prototype.request,r);return i.extend(a,o.prototype,r),i.extend(a,r),a.create=function(r){return t(s(e,r))},a}(r(8396));a.Axios=o,a.Cancel=r(7132),a.CancelToken=r(4603),a.isCancel=r(1475),a.VERSION=r(3345).version,a.all=function(t){return Promise.all(t)},a.spread=r(5739),a.isAxiosError=r(5835),t.exports=a,t.exports.default=a},7132:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},4603:(t,e,r)=>{"use strict";var i=r(7132);function n(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;this.promise.then((function(t){if(r._listeners){var e,i=r._listeners.length;for(e=0;e<i;e++)r._listeners[e](t);r._listeners=null}})),this.promise.then=function(t){var e,i=new Promise((function(t){r.subscribe(t),e=t})).then(t);return i.cancel=function(){r.unsubscribe(e)},i},t((function(t){r.reason||(r.reason=new i(t),e(r.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.prototype.subscribe=function(t){this.reason?t(this.reason):this._listeners?this._listeners.push(t):this._listeners=[t]},n.prototype.unsubscribe=function(t){if(this._listeners){var e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}},n.source=function(){var t;return{token:new n((function(e){t=e})),cancel:t}},t.exports=n},1475:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},5029:(t,e,r)=>{"use strict";var i=r(7485),n=r(581),o=r(8096),s=r(5009),a=r(4941),f=r(6144),u=f.validators;function h(t){this.defaults=t,this.interceptors={request:new o,response:new o}}h.prototype.request=function(t,e){"string"==typeof t?(e=e||{}).url=t:e=t||{},(e=a(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var r=e.transitional;void 0!==r&&f.assertOptions(r,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var i=[],n=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(n=n&&t.synchronous,i.unshift(t.fulfilled,t.rejected))}));var o,h=[];if(this.interceptors.response.forEach((function(t){h.push(t.fulfilled,t.rejected)})),!n){var l=[s,void 0];for(Array.prototype.unshift.apply(l,i),l=l.concat(h),o=Promise.resolve(e);l.length;)o=o.then(l.shift(),l.shift());return o}for(var c=e;i.length;){var d=i.shift(),g=i.shift();try{c=d(c)}catch(t){g(t);break}}try{o=s(c)}catch(t){return Promise.reject(t)}for(;h.length;)o=o.then(h.shift(),h.shift());return o},h.prototype.getUri=function(t){return t=a(this.defaults,t),n(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(t){h.prototype[t]=function(e,r){return this.request(a(r||{},{method:t,url:e,data:(r||{}).data}))}})),i.forEach(["post","put","patch"],(function(t){h.prototype[t]=function(e,r,i){return this.request(a(i||{},{method:t,url:e,data:r}))}})),t.exports=h},8096:(t,e,r)=>{"use strict";var i=r(7485);function n(){this.handlers=[]}n.prototype.use=function(t,e,r){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},n.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},n.prototype.forEach=function(t){i.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=n},574:(t,e,r)=>{"use strict";var i=r(2642),n=r(2288);t.exports=function(t,e){return t&&!i(e)?n(t,e):e}},8524:(t,e,r)=>{"use strict";var i=r(9953);t.exports=function(t,e,r,n,o){var s=new Error(t);return i(s,e,r,n,o)}},5009:(t,e,r)=>{"use strict";var i=r(7485),n=r(9212),o=r(1475),s=r(8396),a=r(7132);function f(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new a("canceled")}t.exports=function(t){return f(t),t.headers=t.headers||{},t.data=n.call(t,t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||s.adapter)(t).then((function(e){return f(t),e.data=n.call(t,e.data,e.headers,t.transformResponse),e}),(function(e){return o(e)||(f(t),e&&e.response&&(e.response.data=n.call(t,e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},9953:t=>{"use strict";t.exports=function(t,e,r,i,n){return t.config=e,r&&(t.code=r),t.request=i,t.response=n,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},t}},4941:(t,e,r)=>{"use strict";var i=r(7485);t.exports=function(t,e){e=e||{};var r={};function n(t,e){return i.isPlainObject(t)&&i.isPlainObject(e)?i.merge(t,e):i.isPlainObject(e)?i.merge({},e):i.isArray(e)?e.slice():e}function o(r){return i.isUndefined(e[r])?i.isUndefined(t[r])?void 0:n(void 0,t[r]):n(t[r],e[r])}function s(t){if(!i.isUndefined(e[t]))return n(void 0,e[t])}function a(r){return i.isUndefined(e[r])?i.isUndefined(t[r])?void 0:n(void 0,t[r]):n(void 0,e[r])}function f(r){return r in e?n(t[r],e[r]):r in t?n(void 0,t[r]):void 0}var u={url:s,method:s,data:s,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:f};return i.forEach(Object.keys(t).concat(Object.keys(e)),(function(t){var e=u[t]||o,n=e(t);i.isUndefined(n)&&e!==f||(r[t]=n)})),r}},4570:(t,e,r)=>{"use strict";var i=r(8524);t.exports=function(t,e,r){var n=r.config.validateStatus;r.status&&n&&!n(r.status)?e(i("Request failed with status code "+r.status,r.config,null,r.request,r)):t(r)}},9212:(t,e,r)=>{"use strict";var i=r(7485),n=r(8396);t.exports=function(t,e,r){var o=this||n;return i.forEach(r,(function(r){t=r.call(o,t,e)})),t}},8396:(t,e,r)=>{"use strict";var i=r(7485),n=r(1446),o=r(9953),s=r(4832),a={"Content-Type":"application/x-www-form-urlencoded"};function f(t,e){!i.isUndefined(t)&&i.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var u,h={transitional:s,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=r(4387)),u),transformRequest:[function(t,e){return n(e,"Accept"),n(e,"Content-Type"),i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)?t:i.isArrayBufferView(t)?t.buffer:i.isURLSearchParams(t)?(f(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):i.isObject(t)||e&&"application/json"===e["Content-Type"]?(f(e,"application/json"),function(t,e,r){if(i.isString(t))try{return(0,JSON.parse)(t),i.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(0,JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){var e=this.transitional||h.transitional,r=e&&e.silentJSONParsing,n=e&&e.forcedJSONParsing,s=!r&&"json"===this.responseType;if(s||n&&i.isString(t)&&t.length)try{return JSON.parse(t)}catch(t){if(s){if("SyntaxError"===t.name)throw o(t,this,"E_JSON_PARSE");throw t}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};i.forEach(["delete","get","head"],(function(t){h.headers[t]={}})),i.forEach(["post","put","patch"],(function(t){h.headers[t]=i.merge(a)})),t.exports=h},4832:t=>{"use strict";t.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},3345:t=>{t.exports={version:"0.26.1"}},875:t=>{"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),i=0;i<r.length;i++)r[i]=arguments[i];return t.apply(e,r)}}},581:(t,e,r)=>{"use strict";var i=r(7485);function n(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var o;if(r)o=r(e);else if(i.isURLSearchParams(e))o=e.toString();else{var s=[];i.forEach(e,(function(t,e){null!=t&&(i.isArray(t)?e+="[]":t=[t],i.forEach(t,(function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),s.push(n(e)+"="+n(t))})))})),o=s.join("&")}if(o){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}},2288:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},2940:(t,e,r)=>{"use strict";var i=r(7485);t.exports=i.isStandardBrowserEnv()?{write:function(t,e,r,n,o,s){var a=[];a.push(t+"="+encodeURIComponent(e)),i.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),i.isString(n)&&a.push("path="+n),i.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},2642:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)}},5835:(t,e,r)=>{"use strict";var i=r(7485);t.exports=function(t){return i.isObject(t)&&!0===t.isAxiosError}},8338:(t,e,r)=>{"use strict";var i=r(7485);t.exports=i.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function n(t){var i=t;return e&&(r.setAttribute("href",i),i=r.href),r.setAttribute("href",i),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=n(window.location.href),function(e){var r=i.isString(e)?n(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},1446:(t,e,r)=>{"use strict";var i=r(7485);t.exports=function(t,e){i.forEach(t,(function(r,i){i!==e&&i.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[i])}))}},3845:(t,e,r)=>{"use strict";var i=r(7485),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,o,s={};return t?(i.forEach(t.split("\n"),(function(t){if(o=t.indexOf(":"),e=i.trim(t.substr(0,o)).toLowerCase(),r=i.trim(t.substr(o+1)),e){if(s[e]&&n.indexOf(e)>=0)return;s[e]="set-cookie"===e?(s[e]?s[e]:[]).concat([r]):s[e]?s[e]+", "+r:r}})),s):s}},5739:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},6144:(t,e,r)=>{"use strict";var i=r(3345).version,n={};["object","boolean","number","function","string","symbol"].forEach((function(t,e){n[t]=function(r){return typeof r===t||"a"+(e<1?"n ":" ")+t}}));var o={};n.transitional=function(t,e,r){function n(t,e){return"[Axios v"+i+"] Transitional option '"+t+"'"+e+(r?". "+r:"")}return function(r,i,s){if(!1===t)throw new Error(n(i," has been removed"+(e?" in "+e:"")));return e&&!o[i]&&(o[i]=!0,console.warn(n(i," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(r,i,s)}},t.exports={assertOptions:function(t,e,r){if("object"!=typeof t)throw new TypeError("options must be an object");for(var i=Object.keys(t),n=i.length;n-- >0;){var o=i[n],s=e[o];if(s){var a=t[o],f=void 0===a||s(a,o,t);if(!0!==f)throw new TypeError("option "+o+" must be "+f)}else if(!0!==r)throw Error("Unknown option "+o)}},validators:n}},7485:(t,e,r)=>{"use strict";var i=r(875),n=Object.prototype.toString;function o(t){return Array.isArray(t)}function s(t){return void 0===t}function a(t){return"[object ArrayBuffer]"===n.call(t)}function f(t){return null!==t&&"object"==typeof t}function u(t){if("[object Object]"!==n.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function h(t){return"[object Function]"===n.call(t)}function l(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),o(t))for(var r=0,i=t.length;r<i;r++)e.call(null,t[r],r,t);else for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.call(null,t[n],n,t)}t.exports={isArray:o,isArrayBuffer:a,isBuffer:function(t){return null!==t&&!s(t)&&null!==t.constructor&&!s(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"[object FormData]"===n.call(t)},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&a(t.buffer)},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:f,isPlainObject:u,isUndefined:s,isDate:function(t){return"[object Date]"===n.call(t)},isFile:function(t){return"[object File]"===n.call(t)},isBlob:function(t){return"[object Blob]"===n.call(t)},isFunction:h,isStream:function(t){return f(t)&&h(t.pipe)},isURLSearchParams:function(t){return"[object URLSearchParams]"===n.call(t)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function t(){var e={};function r(r,i){u(e[i])&&u(r)?e[i]=t(e[i],r):u(r)?e[i]=t({},r):o(r)?e[i]=r.slice():e[i]=r}for(var i=0,n=arguments.length;i<n;i++)l(arguments[i],r);return e},extend:function(t,e,r){return l(e,(function(e,n){t[n]=r&&"function"==typeof e?i(e,r):e})),t},trim:function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},1546:function(t,e,r){var i,n,o;n=[r(6734)],i=function(t){"use strict";var e=function(t,r,n){if(void 0===t&&(t=e.DEFAULT_CAPACITY),void 0===r&&(r=e.DEFAULT_ENDIAN),void 0===n&&(n=e.DEFAULT_NOASSERT),!n){if((t|=0)<0)throw RangeError("Illegal capacity");r=!!r,n=!!n}this.buffer=0===t?i:new ArrayBuffer(t),this.view=0===t?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=t,this.littleEndian=r,this.noAssert=n};e.VERSION="5.0.1",e.LITTLE_ENDIAN=!0,e.BIG_ENDIAN=!1,e.DEFAULT_CAPACITY=16,e.DEFAULT_ENDIAN=e.BIG_ENDIAN,e.DEFAULT_NOASSERT=!1,e.Long=t||null;var r=e.prototype;r.__isByteBuffer__,Object.defineProperty(r,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var i=new ArrayBuffer(0),n=String.fromCharCode;function o(t){var e=0;return function(){return e<t.length?t.charCodeAt(e++):null}}function s(){var t=[],e=[];return function(){if(0===arguments.length)return e.join("")+n.apply(String,t);t.length+arguments.length>1024&&(e.push(n.apply(String,t)),t.length=0),Array.prototype.push.apply(t,arguments)}}function a(t,e,r,i,n){var o,s,a=8*n-i-1,f=(1<<a)-1,u=f>>1,h=-7,l=r?n-1:0,c=r?-1:1,d=t[e+l];for(l+=c,o=d&(1<<-h)-1,d>>=-h,h+=a;h>0;o=256*o+t[e+l],l+=c,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=i;h>0;s=256*s+t[e+l],l+=c,h-=8);if(0===o)o=1-u;else{if(o===f)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,i),o-=u}return(d?-1:1)*s*Math.pow(2,o-i)}function f(t,e,r,i,n,o){var s,a,f,u=8*o-n-1,h=(1<<u)-1,l=h>>1,c=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,d=i?0:o-1,g=i?1:-1,p=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(f=Math.pow(2,-s))<1&&(s--,f*=2),(e+=s+l>=1?c/f:c*Math.pow(2,1-l))*f>=2&&(s++,f/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(e*f-1)*Math.pow(2,n),s+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,n),s=0));n>=8;t[r+d]=255&a,d+=g,a/=256,n-=8);for(s=s<<n|a,u+=n;u>0;t[r+d]=255&s,d+=g,s/=256,u-=8);t[r+d-g]|=128*p}e.accessor=function(){return Uint8Array},e.allocate=function(t,r,i){return new e(t,r,i)},e.concat=function(t,r,i,n){"boolean"!=typeof r&&"string"==typeof r||(n=i,i=r,r=void 0);for(var o,s=0,a=0,f=t.length;a<f;++a)e.isByteBuffer(t[a])||(t[a]=e.wrap(t[a],r)),(o=t[a].limit-t[a].offset)>0&&(s+=o);if(0===s)return new e(0,i,n);var u,h=new e(s,i,n);for(a=0;a<f;)(o=(u=t[a++]).limit-u.offset)<=0||(h.view.set(u.view.subarray(u.offset,u.limit),h.offset),h.offset+=o);return h.limit=h.offset,h.offset=0,h},e.isByteBuffer=function(t){return!0===(t&&t.__isByteBuffer__)},e.type=function(){return ArrayBuffer},e.wrap=function(t,i,n,o){if("string"!=typeof i&&(o=n,n=i,i=void 0),"string"==typeof t)switch(void 0===i&&(i="utf8"),i){case"base64":return e.fromBase64(t,n);case"hex":return e.fromHex(t,n);case"binary":return e.fromBinary(t,n);case"utf8":return e.fromUTF8(t,n);case"debug":return e.fromDebug(t,n);default:throw Error("Unsupported encoding: "+i)}if(null===t||"object"!=typeof t)throw TypeError("Illegal buffer");var s;if(e.isByteBuffer(t))return(s=r.clone.call(t)).markedOffset=-1,s;if(t instanceof Uint8Array)s=new e(0,n,o),t.length>0&&(s.buffer=t.buffer,s.offset=t.byteOffset,s.limit=t.byteOffset+t.byteLength,s.view=new Uint8Array(t.buffer));else if(t instanceof ArrayBuffer)s=new e(0,n,o),t.byteLength>0&&(s.buffer=t,s.offset=0,s.limit=t.byteLength,s.view=t.byteLength>0?new Uint8Array(t):null);else{if("[object Array]"!==Object.prototype.toString.call(t))throw TypeError("Illegal buffer");(s=new e(t.length,n,o)).limit=t.length;for(var a=0;a<t.length;++a)s.view[a]=t[a]}return s},r.writeBitSet=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if(!(t instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i,n=e,o=t.length,s=o>>3,a=0;for(e+=this.writeVarint32(o,e);s--;)i=1&!!t[a++]|(1&!!t[a++])<<1|(1&!!t[a++])<<2|(1&!!t[a++])<<3|(1&!!t[a++])<<4|(1&!!t[a++])<<5|(1&!!t[a++])<<6|(1&!!t[a++])<<7,this.writeByte(i,e++);if(a<o){var f=0;for(i=0;a<o;)i|=(1&!!t[a++])<<f++;this.writeByte(i,e++)}return r?(this.offset=e,this):e-n},r.readBitSet=function(t){var e=void 0===t;e&&(t=this.offset);var r,i=this.readVarint32(t),n=i.value,o=n>>3,s=0,a=[];for(t+=i.length;o--;)r=this.readByte(t++),a[s++]=!!(1&r),a[s++]=!!(2&r),a[s++]=!!(4&r),a[s++]=!!(8&r),a[s++]=!!(16&r),a[s++]=!!(32&r),a[s++]=!!(64&r),a[s++]=!!(128&r);if(s<n){var f=0;for(r=this.readByte(t++);s<n;)a[s++]=!!(r>>f++&1)}return e&&(this.offset=t),a},r.readBytes=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+"+t+") <= "+this.buffer.byteLength)}var i=this.slice(e,e+t);return r&&(this.offset+=t),i},r.writeBytes=r.append,r.writeInt8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeByte=r.writeInt8,r.readInt8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return 128==(128&r)&&(r=-(255-r+1)),e&&(this.offset+=1),r},r.readByte=r.readInt8,r.writeUint8=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=1;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=1,this.view[e]=t,r&&(this.offset+=1),this},r.writeUInt8=r.writeUint8,r.readUint8=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r=this.view[t];return e&&(this.offset+=1),r},r.readUInt8=r.readUint8,r.writeInt16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeShort=r.writeInt16,r.readInt16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),32768==(32768&r)&&(r=-(65535-r+1)),e&&(this.offset+=2),r},r.readShort=r.readInt16,r.writeUint16=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=2;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=2,this.littleEndian?(this.view[e+1]=(65280&t)>>>8,this.view[e]=255&t):(this.view[e]=(65280&t)>>>8,this.view[e+1]=255&t),r&&(this.offset+=2),this},r.writeUInt16=r.writeUint16,r.readUint16=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+2) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t],r|=this.view[t+1]<<8):(r=this.view[t]<<8,r|=this.view[t+1]),e&&(this.offset+=2),r},r.readUInt16=r.readUint16,r.writeInt32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeInt=r.writeInt32,r.readInt32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),r|=0,e&&(this.offset+=4),r},r.readInt=r.readInt32,r.writeUint32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=4,this.littleEndian?(this.view[e+3]=t>>>24&255,this.view[e+2]=t>>>16&255,this.view[e+1]=t>>>8&255,this.view[e]=255&t):(this.view[e]=t>>>24&255,this.view[e+1]=t>>>16&255,this.view[e+2]=t>>>8&255,this.view[e+3]=255&t),r&&(this.offset+=4),this},r.writeUInt32=r.writeUint32,r.readUint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=0;return this.littleEndian?(r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0),e&&(this.offset+=4),r},r.readUInt32=r.readUint32,t&&(r.writeInt64=function(e,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var n=this.buffer.byteLength;r>n&&this.resize((n*=2)>r?n:r),r-=8;var o=e.low,s=e.high;return this.littleEndian?(this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o,r+=4,this.view[r+3]=s>>>24&255,this.view[r+2]=s>>>16&255,this.view[r+1]=s>>>8&255,this.view[r]=255&s):(this.view[r]=s>>>24&255,this.view[r+1]=s>>>16&255,this.view[r+2]=s>>>8&255,this.view[r+3]=255&s,r+=4,this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o),i&&(this.offset+=8),this},r.writeLong=r.writeInt64,r.readInt64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var i=0,n=0;this.littleEndian?(i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0,e+=4,n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0,e+=4,i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0);var o=new t(i,n,!1);return r&&(this.offset+=8),o},r.readLong=r.readInt64,r.writeUint64=function(e,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"==typeof e)e=t.fromNumber(e);else if("string"==typeof e)e=t.fromString(e);else if(!(e&&e instanceof t))throw TypeError("Illegal value: "+e+" (not an integer or Long)");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e)),r+=8;var n=this.buffer.byteLength;r>n&&this.resize((n*=2)>r?n:r),r-=8;var o=e.low,s=e.high;return this.littleEndian?(this.view[r+3]=o>>>24&255,this.view[r+2]=o>>>16&255,this.view[r+1]=o>>>8&255,this.view[r]=255&o,r+=4,this.view[r+3]=s>>>24&255,this.view[r+2]=s>>>16&255,this.view[r+1]=s>>>8&255,this.view[r]=255&s):(this.view[r]=s>>>24&255,this.view[r+1]=s>>>16&255,this.view[r+2]=s>>>8&255,this.view[r+3]=255&s,r+=4,this.view[r]=o>>>24&255,this.view[r+1]=o>>>16&255,this.view[r+2]=o>>>8&255,this.view[r+3]=255&o),i&&(this.offset+=8),this},r.writeUInt64=r.writeUint64,r.readUint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var i=0,n=0;this.littleEndian?(i=this.view[e+2]<<16,i|=this.view[e+1]<<8,i|=this.view[e],i+=this.view[e+3]<<24>>>0,e+=4,n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0,e+=4,i=this.view[e+1]<<16,i|=this.view[e+2]<<8,i|=this.view[e+3],i+=this.view[e]<<24>>>0);var o=new t(i,n,!0);return r&&(this.offset+=8),o},r.readUInt64=r.readUint64),r.writeFloat32=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=4;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=4,f(this.view,t,e,this.littleEndian,23,4),r&&(this.offset+=4),this},r.writeFloat=r.writeFloat32,r.readFloat32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var r=a(this.view,t,this.littleEndian,23,4);return e&&(this.offset+=4),r},r.readFloat=r.readFloat32,r.writeFloat64=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof t)throw TypeError("Illegal value: "+t+" (not a number)");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}e+=8;var i=this.buffer.byteLength;return e>i&&this.resize((i*=2)>e?i:e),e-=8,f(this.view,t,e,this.littleEndian,52,8),r&&(this.offset+=8),this},r.writeDouble=r.writeFloat64,r.readFloat64=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var r=a(this.view,t,this.littleEndian,52,8);return e&&(this.offset+=8),r},r.readDouble=r.readFloat64,e.MAX_VARINT32_BYTES=5,e.calculateVarint32=function(t){return(t>>>=0)<128?1:t<16384?2:t<1<<21?3:t<1<<28?4:5},e.zigZagEncode32=function(t){return((t|=0)<<1^t>>31)>>>0},e.zigZagDecode32=function(t){return t>>>1^-(1&t)|0},r.writeVarint32=function(t,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var n,o=e.calculateVarint32(t);r+=o;var s=this.buffer.byteLength;for(r>s&&this.resize((s*=2)>r?s:r),r-=o,t>>>=0;t>=128;)n=127&t|128,this.view[r++]=n,t>>>=7;return this.view[r++]=t,i?(this.offset=r,this):o},r.writeVarint32ZigZag=function(t,r){return this.writeVarint32(e.zigZagEncode32(t),r)},r.readVarint32=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,i=0,n=0;do{if(!this.noAssert&&t>this.limit){var o=Error("Truncated");throw o.truncated=!0,o}r=this.view[t++],i<5&&(n|=(127&r)<<7*i),++i}while(0!=(128&r));return n|=0,e?(this.offset=t,n):{value:n,length:i}},r.readVarint32ZigZag=function(t){var r=this.readVarint32(t);return"object"==typeof r?r.value=e.zigZagDecode32(r.value):r=e.zigZagDecode32(r),r},t&&(e.MAX_VARINT64_BYTES=10,e.calculateVarint64=function(e){"number"==typeof e?e=t.fromNumber(e):"string"==typeof e&&(e=t.fromString(e));var r=e.toInt()>>>0,i=e.shiftRightUnsigned(28).toInt()>>>0,n=e.shiftRightUnsigned(56).toInt()>>>0;return 0==n?0==i?r<16384?r<128?1:2:r<1<<21?3:4:i<16384?i<128?5:6:i<1<<21?7:8:n<128?9:10},e.zigZagEncode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()},e.zigZagDecode64=function(e){return"number"==typeof e?e=t.fromNumber(e,!1):"string"==typeof e?e=t.fromString(e,!1):!1!==e.unsigned&&(e=e.toSigned()),e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()},r.writeVarint64=function(r,i){var n=void 0===i;if(n&&(i=this.offset),!this.noAssert){if("number"==typeof r)r=t.fromNumber(r);else if("string"==typeof r)r=t.fromString(r);else if(!(r&&r instanceof t))throw TypeError("Illegal value: "+r+" (not an integer or Long)");if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}"number"==typeof r?r=t.fromNumber(r,!1):"string"==typeof r?r=t.fromString(r,!1):!1!==r.unsigned&&(r=r.toSigned());var o=e.calculateVarint64(r),s=r.toInt()>>>0,a=r.shiftRightUnsigned(28).toInt()>>>0,f=r.shiftRightUnsigned(56).toInt()>>>0;i+=o;var u=this.buffer.byteLength;switch(i>u&&this.resize((u*=2)>i?u:i),i-=o,o){case 10:this.view[i+9]=f>>>7&1;case 9:this.view[i+8]=9!==o?128|f:127&f;case 8:this.view[i+7]=8!==o?a>>>21|128:a>>>21&127;case 7:this.view[i+6]=7!==o?a>>>14|128:a>>>14&127;case 6:this.view[i+5]=6!==o?a>>>7|128:a>>>7&127;case 5:this.view[i+4]=5!==o?128|a:127&a;case 4:this.view[i+3]=4!==o?s>>>21|128:s>>>21&127;case 3:this.view[i+2]=3!==o?s>>>14|128:s>>>14&127;case 2:this.view[i+1]=2!==o?s>>>7|128:s>>>7&127;case 1:this.view[i]=1!==o?128|s:127&s}return n?(this.offset+=o,this):o},r.writeVarint64ZigZag=function(t,r){return this.writeVarint64(e.zigZagEncode64(t),r)},r.readVarint64=function(e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var i=e,n=0,o=0,s=0,a=0;if(n=127&(a=this.view[e++]),128&a&&(n|=(127&(a=this.view[e++]))<<7,(128&a||this.noAssert&&void 0===a)&&(n|=(127&(a=this.view[e++]))<<14,(128&a||this.noAssert&&void 0===a)&&(n|=(127&(a=this.view[e++]))<<21,(128&a||this.noAssert&&void 0===a)&&(o=127&(a=this.view[e++]),(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[e++]))<<7,(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[e++]))<<14,(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[e++]))<<21,(128&a||this.noAssert&&void 0===a)&&(s=127&(a=this.view[e++]),(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[e++]))<<7,128&a||this.noAssert&&void 0===a))))))))))throw Error("Buffer overrun");var f=t.fromBits(n|o<<28,o>>>4|s<<24,!1);return r?(this.offset=e,f):{value:f,length:e-i}},r.readVarint64ZigZag=function(r){var i=this.readVarint64(r);return i&&i.value instanceof t?i.value=e.zigZagDecode64(i.value):i=e.zigZagDecode64(i),i}),r.writeCString=function(t,e){var r=void 0===e;r&&(e=this.offset);var i,n=t.length;if(!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");for(i=0;i<n;++i)if(0===t.charCodeAt(i))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}n=h.calculateUTF16asUTF8(o(t))[1],e+=n+1;var s=this.buffer.byteLength;return e>s&&this.resize((s*=2)>e?s:e),e-=n+1,h.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),this.view[e++]=0,r?(this.offset=e,this):n},r.readCString=function(t){var e=void 0===t;if(e&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var r,i=t,n=-1;return h.decodeUTF8toUTF16(function(){if(0===n)return null;if(t>=this.limit)throw RangeError("Illegal range: Truncated data, "+t+" < "+this.limit);return 0===(n=this.view[t++])?null:n}.bind(this),r=s(),!0),e?(this.offset=t,r()):{string:r(),length:t-i}},r.writeIString=function(t,e){var r=void 0===e;if(r&&(e=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var i,n=e;i=h.calculateUTF16asUTF8(o(t),this.noAssert)[1],e+=4+i;var s=this.buffer.byteLength;if(e>s&&this.resize((s*=2)>e?s:e),e-=4+i,this.littleEndian?(this.view[e+3]=i>>>24&255,this.view[e+2]=i>>>16&255,this.view[e+1]=i>>>8&255,this.view[e]=255&i):(this.view[e]=i>>>24&255,this.view[e+1]=i>>>16&255,this.view[e+2]=i>>>8&255,this.view[e+3]=255&i),e+=4,h.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),e!==n+4+i)throw RangeError("Illegal range: Truncated data, "+e+" == "+(e+4+i));return r?(this.offset=e,this):e-n},r.readIString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+4) <= "+this.buffer.byteLength)}var i=t,n=this.readUint32(t),o=this.readUTF8String(n,e.METRICS_BYTES,t+=4);return t+=o.length,r?(this.offset=t,o.string):{string:o.string,length:t-i}},e.METRICS_CHARS="c",e.METRICS_BYTES="b",r.writeUTF8String=function(t,e){var r,i=void 0===e;if(i&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}var n=e;r=h.calculateUTF16asUTF8(o(t))[1],e+=r;var s=this.buffer.byteLength;return e>s&&this.resize((s*=2)>e?s:e),e-=r,h.encodeUTF16toUTF8(o(t),function(t){this.view[e++]=t}.bind(this)),i?(this.offset=e,this):e-n},r.writeString=r.writeUTF8String,e.calculateUTF8Chars=function(t){return h.calculateUTF16asUTF8(o(t))[0]},e.calculateUTF8Bytes=function(t){return h.calculateUTF16asUTF8(o(t))[1]},e.calculateString=e.calculateUTF8Bytes,r.readUTF8String=function(t,r,i){"number"==typeof r&&(i=r,r=void 0);var n=void 0===i;if(n&&(i=this.offset),void 0===r&&(r=e.METRICS_CHARS),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");if(t|=0,"number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}var o,a=0,f=i;if(r===e.METRICS_CHARS){if(o=s(),h.decodeUTF8(function(){return a<t&&i<this.limit?this.view[i++]:null}.bind(this),(function(t){++a,h.UTF8toUTF16(t,o)})),a!==t)throw RangeError("Illegal range: Truncated data, "+a+" == "+t);return n?(this.offset=i,o()):{string:o(),length:i-f}}if(r===e.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+t>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+"+t+") <= "+this.buffer.byteLength)}var u=i+t;if(h.decodeUTF8toUTF16(function(){return i<u?this.view[i++]:null}.bind(this),o=s(),this.noAssert),i!==u)throw RangeError("Illegal range: Truncated data, "+i+" == "+u);return n?(this.offset=i,o()):{string:o(),length:i-f}}throw TypeError("Unsupported metrics: "+r)},r.readString=r.readUTF8String,r.writeVString=function(t,r){var i=void 0===r;if(i&&(r=this.offset),!this.noAssert){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if("number"!=typeof r||r%1!=0)throw TypeError("Illegal offset: "+r+" (not an integer)");if((r>>>=0)<0||r+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+r+" (+0) <= "+this.buffer.byteLength)}var n,s,a=r;n=h.calculateUTF16asUTF8(o(t),this.noAssert)[1],s=e.calculateVarint32(n),r+=s+n;var f=this.buffer.byteLength;if(r>f&&this.resize((f*=2)>r?f:r),r-=s+n,r+=this.writeVarint32(n,r),h.encodeUTF16toUTF8(o(t),function(t){this.view[r++]=t}.bind(this)),r!==a+n+s)throw RangeError("Illegal range: Truncated data, "+r+" == "+(r+n+s));return i?(this.offset=r,this):r-a},r.readVString=function(t){var r=void 0===t;if(r&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var i=t,n=this.readVarint32(t),o=this.readUTF8String(n.value,e.METRICS_BYTES,t+=n.length);return t+=o.length,r?(this.offset=t,o.string):{string:o.string,length:t-i}},r.append=function(t,r,i){"number"!=typeof r&&"string"==typeof r||(i=r,r=void 0);var n=void 0===i;if(n&&(i=this.offset),!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var o=t.limit-t.offset;if(o<=0)return this;i+=o;var s=this.buffer.byteLength;return i>s&&this.resize((s*=2)>i?s:i),i-=o,this.view.set(t.view.subarray(t.offset,t.limit),i),t.offset+=o,n&&(this.offset+=o),this},r.appendTo=function(t,e){return t.append(this,e),this},r.assert=function(t){return this.noAssert=!t,this},r.capacity=function(){return this.buffer.byteLength},r.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},r.clone=function(t){var r=new e(0,this.littleEndian,this.noAssert);return t?(r.buffer=new ArrayBuffer(this.buffer.byteLength),r.view=new Uint8Array(r.buffer)):(r.buffer=this.buffer,r.view=this.view),r.offset=this.offset,r.markedOffset=this.markedOffset,r.limit=this.limit,r},r.compact=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}if(0===t&&e===this.buffer.byteLength)return this;var r=e-t;if(0===r)return this.buffer=i,this.view=null,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=0,this;var n=new ArrayBuffer(r),o=new Uint8Array(n);return o.set(this.view.subarray(t,e)),this.buffer=n,this.view=o,this.markedOffset>=0&&(this.markedOffset-=t),this.offset=0,this.limit=r,this},r.copy=function(t,r){if(void 0===t&&(t=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,t<0||t>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+r+" <= "+this.buffer.byteLength)}if(t===r)return new e(0,this.littleEndian,this.noAssert);var i=r-t,n=new e(i,this.littleEndian,this.noAssert);return n.offset=0,n.limit=i,n.markedOffset>=0&&(n.markedOffset-=t),this.copyTo(n,0,t,r),n},r.copyTo=function(t,r,i,n){var o,s;if(!this.noAssert&&!e.isByteBuffer(t))throw TypeError("Illegal target: Not a ByteBuffer");if(r=(s=void 0===r)?t.offset:0|r,i=(o=void 0===i)?this.offset:0|i,n=void 0===n?this.limit:0|n,r<0||r>t.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+r+" <= "+t.buffer.byteLength);if(i<0||n>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+i+" <= "+this.buffer.byteLength);var a=n-i;return 0===a?t:(t.ensureCapacity(r+a),t.view.set(this.view.subarray(i,n),r),o&&(this.offset+=a),s&&(t.offset+=a),this)},r.ensureCapacity=function(t){var e=this.buffer.byteLength;return e<t?this.resize((e*=2)>t?e:t):this},r.fill=function(t,e,r){var i=void 0===e;if(i&&(e=this.offset),"string"==typeof t&&t.length>0&&(t=t.charCodeAt(0)),void 0===e&&(e=this.offset),void 0===r&&(r=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal value: "+t+" (not an integer)");if(t|=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal end: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(e>=r)return this;for(;e<r;)this.view[e++]=t;return i&&(this.offset=e),this},r.flip=function(){return this.limit=this.offset,this.offset=0,this},r.mark=function(t){if(t=void 0===t?this.offset:t,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=t,this},r.order=function(t){if(!this.noAssert&&"boolean"!=typeof t)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!t,this},r.LE=function(t){return this.littleEndian=void 0===t||!!t,this},r.BE=function(t){return this.littleEndian=void 0!==t&&!t,this},r.prepend=function(t,r,i){"number"!=typeof r&&"string"==typeof r||(i=r,r=void 0);var n=void 0===i;if(n&&(i=this.offset),!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}t instanceof e||(t=e.wrap(t,r));var o=t.limit-t.offset;if(o<=0)return this;var s=o-i;if(s>0){var a=new ArrayBuffer(this.buffer.byteLength+s),f=new Uint8Array(a);f.set(this.view.subarray(i,this.buffer.byteLength),o),this.buffer=a,this.view=f,this.offset+=s,this.markedOffset>=0&&(this.markedOffset+=s),this.limit+=s,i+=s}else new Uint8Array(this.buffer);return this.view.set(t.view.subarray(t.offset,t.limit),i-o),t.offset=t.limit,n&&(this.offset-=o),this},r.prependTo=function(t,e){return t.prepend(this,e),this},r.printDebug=function(t){"function"!=typeof t&&(t=console.log.bind(console)),t(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},r.remaining=function(){return this.limit-this.offset},r.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},r.resize=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal capacity: "+t+" (not an integer)");if((t|=0)<0)throw RangeError("Illegal capacity: 0 <= "+t)}if(this.buffer.byteLength<t){var e=new ArrayBuffer(t),r=new Uint8Array(e);r.set(this.view),this.buffer=e,this.view=r}return this},r.reverse=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}return t===e||Array.prototype.reverse.call(this.view.subarray(t,e)),this},r.skip=function(t){if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal length: "+t+" (not an integer)");t|=0}var e=this.offset+t;if(!this.noAssert&&(e<0||e>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+t+" <= "+this.buffer.byteLength);return this.offset=e,this},r.slice=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r=this.clone();return r.offset=t,r.limit=e,r},r.toBuffer=function(t){var e=this.offset,r=this.limit;if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: Not an integer");if(e>>>=0,"number"!=typeof r||r%1!=0)throw TypeError("Illegal limit: Not an integer");if(r>>>=0,e<0||e>r||r>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+r+" <= "+this.buffer.byteLength)}if(!t&&0===e&&r===this.buffer.byteLength)return this.buffer;if(e===r)return i;var n=new ArrayBuffer(r-e);return new Uint8Array(n).set(new Uint8Array(this.buffer).subarray(e,r),0),n},r.toArrayBuffer=r.toBuffer,r.toString=function(t,e,r){if(void 0===t)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof t&&(r=e=t="utf8"),t){case"utf8":return this.toUTF8(e,r);case"base64":return this.toBase64(e,r);case"hex":return this.toHex(e,r);case"binary":return this.toBinary(e,r);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+t)}};var u=function(){for(var t={},e=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],r=[],i=0,n=e.length;i<n;++i)r[e[i]]=i;return t.encode=function(t,r){for(var i,n;null!==(i=t());)r(e[i>>2&63]),n=(3&i)<<4,null!==(i=t())?(r(e[63&((n|=i>>4&15)|i>>4&15)]),n=(15&i)<<2,null!==(i=t())?(r(e[63&(n|i>>6&3)]),r(e[63&i])):(r(e[63&n]),r(61))):(r(e[63&n]),r(61),r(61))},t.decode=function(t,e){var i,n,o;function s(t){throw Error("Illegal character code: "+t)}for(;null!==(i=t());)if(void 0===(n=r[i])&&s(i),null!==(i=t())&&(void 0===(o=r[i])&&s(i),e(n<<2>>>0|(48&o)>>4),null!==(i=t()))){if(void 0===(n=r[i])){if(61===i)break;s(i)}if(e((15&o)<<4>>>0|(60&n)>>2),null!==(i=t())){if(void 0===(o=r[i])){if(61===i)break;s(i)}e((3&n)<<6>>>0|o)}}},t.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)},t}();r.toBase64=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity||t>e)throw RangeError("begin, end");var r;return u.encode(function(){return t<e?this.view[t++]:null}.bind(this),r=s()),r()},e.fromBase64=function(t,r){if("string"!=typeof t)throw TypeError("str");var i=new e(t.length/4*3,r),n=0;return u.decode(o(t),(function(t){i.view[n++]=t})),i.limit=n,i},e.btoa=function(t){return e.fromBinary(t).toBase64()},e.atob=function(t){return e.fromBase64(t).toBinary()},r.toBinary=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),e|=0,(t|=0)<0||e>this.capacity()||t>e)throw RangeError("begin, end");if(t===e)return"";for(var r=[],i=[];t<e;)r.push(this.view[t++]),r.length>=1024&&(i.push(String.fromCharCode.apply(String,r)),r=[]);return i.join("")+String.fromCharCode.apply(String,r)},e.fromBinary=function(t,r){if("string"!=typeof t)throw TypeError("str");for(var i,n=0,o=t.length,s=new e(o,r);n<o;){if((i=t.charCodeAt(n))>255)throw RangeError("illegal char code: "+i);s.view[n++]=i}return s.limit=o,s},r.toDebug=function(t){for(var e,r=-1,i=this.buffer.byteLength,n="",o="",s="";r<i;){if(-1!==r&&(n+=(e=this.view[r])<16?"0"+e.toString(16).toUpperCase():e.toString(16).toUpperCase(),t&&(o+=e>32&&e<127?String.fromCharCode(e):".")),++r,t&&r>0&&r%16==0&&r!==i){for(;n.length<51;)n+=" ";s+=n+o+"\n",n=o=""}r===this.offset&&r===this.limit?n+=r===this.markedOffset?"!":"|":r===this.offset?n+=r===this.markedOffset?"[":"<":r===this.limit?n+=r===this.markedOffset?"]":">":n+=r===this.markedOffset?"'":t||0!==r&&r!==i?" ":""}if(t&&" "!==n){for(;n.length<51;)n+=" ";s+=n+o+"\n"}return t?s:n},e.fromDebug=function(t,r,i){for(var n,o,s=t.length,a=new e((s+1)/3|0,r,i),f=0,u=0,h=!1,l=!1,c=!1,d=!1,g=!1;f<s;){switch(n=t.charAt(f++)){case"!":if(!i){if(l||c||d){g=!0;break}l=c=d=!0}a.offset=a.markedOffset=a.limit=u,h=!1;break;case"|":if(!i){if(l||d){g=!0;break}l=d=!0}a.offset=a.limit=u,h=!1;break;case"[":if(!i){if(l||c){g=!0;break}l=c=!0}a.offset=a.markedOffset=u,h=!1;break;case"<":if(!i){if(l){g=!0;break}l=!0}a.offset=u,h=!1;break;case"]":if(!i){if(d||c){g=!0;break}d=c=!0}a.limit=a.markedOffset=u,h=!1;break;case">":if(!i){if(d){g=!0;break}d=!0}a.limit=u,h=!1;break;case"'":if(!i){if(c){g=!0;break}c=!0}a.markedOffset=u,h=!1;break;case" ":h=!1;break;default:if(!i&&h){g=!0;break}if(o=parseInt(n+t.charAt(f++),16),!i&&(isNaN(o)||o<0||o>255))throw TypeError("Illegal str: Not a debug encoded string");a.view[u++]=o,h=!0}if(g)throw TypeError("Illegal str: Invalid symbol at "+f)}if(!i){if(!l||!d)throw TypeError("Illegal str: Missing offset or limit");if(u<a.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+u+" < "+s)}return a},r.toHex=function(t,e){if(t=void 0===t?this.offset:t,e=void 0===e?this.limit:e,!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}for(var r,i=new Array(e-t);t<e;)(r=this.view[t++])<16?i.push("0",r.toString(16)):i.push(r.toString(16));return i.join("")},e.fromHex=function(t,r,i){if(!i){if("string"!=typeof t)throw TypeError("Illegal str: Not a string");if(t.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var n,o=t.length,s=new e(o/2|0,r),a=0,f=0;a<o;a+=2){if(n=parseInt(t.substring(a,a+2),16),!i&&(!isFinite(n)||n<0||n>255))throw TypeError("Illegal str: Contains non-hex characters");s.view[f++]=n}return s.limit=f,s};var h=function(){var t={MAX_CODEPOINT:1114111,encodeUTF8:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<128?e(127&r):r<2048?(e(r>>6&31|192),e(63&r|128)):r<65536?(e(r>>12&15|224),e(r>>6&63|128),e(63&r|128)):(e(r>>18&7|240),e(r>>12&63|128),e(r>>6&63|128),e(63&r|128)),r=null},decodeUTF8:function(t,e){for(var r,i,n,o,s=function(t){t=t.slice(0,t.indexOf(null));var e=Error(t.toString());throw e.name="TruncatedError",e.bytes=t,e};null!==(r=t());)if(0==(128&r))e(r);else if(192==(224&r))null===(i=t())&&s([r,i]),e((31&r)<<6|63&i);else if(224==(240&r))(null===(i=t())||null===(n=t()))&&s([r,i,n]),e((15&r)<<12|(63&i)<<6|63&n);else{if(240!=(248&r))throw RangeError("Illegal starting byte: "+r);(null===(i=t())||null===(n=t())||null===(o=t()))&&s([r,i,n,o]),e((7&r)<<18|(63&i)<<12|(63&n)<<6|63&o)}},UTF16toUTF8:function(t,e){for(var r,i=null;null!==(r=null!==i?i:t());)r>=55296&&r<=57343&&null!==(i=t())&&i>=56320&&i<=57343?(e(1024*(r-55296)+i-56320+65536),i=null):e(r);null!==i&&e(i)},UTF8toUTF16:function(t,e){var r=null;for("number"==typeof t&&(r=t,t=function(){return null});null!==r||null!==(r=t());)r<=65535?e(r):(e(55296+((r-=65536)>>10)),e(r%1024+56320)),r=null},encodeUTF16toUTF8:function(e,r){t.UTF16toUTF8(e,(function(e){t.encodeUTF8(e,r)}))},decodeUTF8toUTF16:function(e,r){t.decodeUTF8(e,(function(e){t.UTF8toUTF16(e,r)}))},calculateCodePoint:function(t){return t<128?1:t<2048?2:t<65536?3:4},calculateUTF8:function(t){for(var e,r=0;null!==(e=t());)r+=e<128?1:e<2048?2:e<65536?3:4;return r},calculateUTF16asUTF8:function(e){var r=0,i=0;return t.UTF16toUTF8(e,(function(t){++r,i+=t<128?1:t<2048?2:t<65536?3:4})),[r,i]}};return t}();return r.toUTF8=function(t,e){if(void 0===t&&(t=this.offset),void 0===e&&(e=this.limit),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof e||e%1!=0)throw TypeError("Illegal end: Not an integer");if(e>>>=0,t<0||t>e||e>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+e+" <= "+this.buffer.byteLength)}var r;try{h.decodeUTF8toUTF16(function(){return t<e?this.view[t++]:null}.bind(this),r=s())}catch(r){if(t!==e)throw RangeError("Illegal range: Truncated data, "+t+" != "+e)}return r()},e.fromUTF8=function(t,r,i){if(!i&&"string"!=typeof t)throw TypeError("Illegal str: Not a string");var n=new e(h.calculateUTF16asUTF8(o(t),!0)[1],r,i),s=0;return h.encodeUTF16toUTF8(o(t),(function(t){n.view[s++]=t})),n.limit=s,n},e},void 0===(o=i.apply(e,n))||(t.exports=o)},6734:function(t,e){var r,i;void 0===(i="function"==typeof(r=function(){"use strict";function t(t,e,r){this.low=0|t,this.high=0|e,this.unsigned=!!r}function e(t){return!0===(t&&t.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),t.isLong=e;var r={},i={};function n(t,e){var n,o,a;return e?(a=0<=(t>>>=0)&&t<256)&&(o=i[t])?o:(n=s(t,(0|t)<0?-1:0,!0),a&&(i[t]=n),n):(a=-128<=(t|=0)&&t<128)&&(o=r[t])?o:(n=s(t,t<0?-1:0,!1),a&&(r[t]=n),n)}function o(t,e){if(isNaN(t)||!isFinite(t))return e?p:g;if(e){if(t<0)return p;if(t>=l)return m}else{if(t<=-c)return E;if(t+1>=c)return w}return t<0?o(-t,e).neg():s(t%h|0,t/h|0,e)}function s(e,r,i){return new t(e,r,i)}t.fromInt=n,t.fromNumber=o,t.fromBits=s;var a=Math.pow;function f(t,e,r){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return g;if("number"==typeof e?(r=e,e=!1):e=!!e,(r=r||10)<2||36<r)throw RangeError("radix");var i;if((i=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===i)return f(t.substring(1),e,r).neg();for(var n=o(a(r,8)),s=g,u=0;u<t.length;u+=8){var h=Math.min(8,t.length-u),l=parseInt(t.substring(u,u+h),r);if(h<8){var c=o(a(r,h));s=s.mul(c).add(o(l))}else s=(s=s.mul(n)).add(o(l))}return s.unsigned=e,s}function u(e){return e instanceof t?e:"number"==typeof e?o(e):"string"==typeof e?f(e):s(e.low,e.high,e.unsigned)}t.fromString=f,t.fromValue=u;var h=4294967296,l=h*h,c=l/2,d=n(1<<24),g=n(0);t.ZERO=g;var p=n(0,!0);t.UZERO=p;var v=n(1);t.ONE=v;var y=n(1,!0);t.UONE=y;var b=n(-1);t.NEG_ONE=b;var w=s(-1,2147483647,!1);t.MAX_VALUE=w;var m=s(-1,-1,!0);t.MAX_UNSIGNED_VALUE=m;var E=s(0,-2147483648,!1);t.MIN_VALUE=E;var T=t.prototype;return T.toInt=function(){return this.unsigned?this.low>>>0:this.low},T.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},T.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var e=o(t),r=this.div(e),i=r.mul(e).sub(this);return r.toString(t)+i.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var n=o(a(t,6),this.unsigned),s=this,f="";;){var u=s.div(n),h=(s.sub(u.mul(n)).toInt()>>>0).toString(t);if((s=u).isZero())return h+f;for(;h.length<6;)h="0"+h;f=""+h+f}},T.getHighBits=function(){return this.high},T.getHighBitsUnsigned=function(){return this.high>>>0},T.getLowBits=function(){return this.low},T.getLowBitsUnsigned=function(){return this.low>>>0},T.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},T.isZero=function(){return 0===this.high&&0===this.low},T.isNegative=function(){return!this.unsigned&&this.high<0},T.isPositive=function(){return this.unsigned||this.high>=0},T.isOdd=function(){return 1==(1&this.low)},T.isEven=function(){return 0==(1&this.low)},T.equals=function(t){return e(t)||(t=u(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},T.eq=T.equals,T.notEquals=function(t){return!this.eq(t)},T.neq=T.notEquals,T.lessThan=function(t){return this.comp(t)<0},T.lt=T.lessThan,T.lessThanOrEqual=function(t){return this.comp(t)<=0},T.lte=T.lessThanOrEqual,T.greaterThan=function(t){return this.comp(t)>0},T.gt=T.greaterThan,T.greaterThanOrEqual=function(t){return this.comp(t)>=0},T.gte=T.greaterThanOrEqual,T.compare=function(t){if(e(t)||(t=u(t)),this.eq(t))return 0;var r=this.isNegative(),i=t.isNegative();return r&&!i?-1:!r&&i?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},T.comp=T.compare,T.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(v)},T.neg=T.negate,T.add=function(t){e(t)||(t=u(t));var r=this.high>>>16,i=65535&this.high,n=this.low>>>16,o=65535&this.low,a=t.high>>>16,f=65535&t.high,h=t.low>>>16,l=0,c=0,d=0,g=0;return d+=(g+=o+(65535&t.low))>>>16,c+=(d+=n+h)>>>16,l+=(c+=i+f)>>>16,l+=r+a,s((d&=65535)<<16|(g&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},T.subtract=function(t){return e(t)||(t=u(t)),this.add(t.neg())},T.sub=T.subtract,T.multiply=function(t){if(this.isZero())return g;if(e(t)||(t=u(t)),t.isZero())return g;if(this.eq(E))return t.isOdd()?E:g;if(t.eq(E))return this.isOdd()?E:g;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(d)&&t.lt(d))return o(this.toNumber()*t.toNumber(),this.unsigned);var r=this.high>>>16,i=65535&this.high,n=this.low>>>16,a=65535&this.low,f=t.high>>>16,h=65535&t.high,l=t.low>>>16,c=65535&t.low,p=0,v=0,y=0,b=0;return y+=(b+=a*c)>>>16,v+=(y+=n*c)>>>16,y&=65535,v+=(y+=a*l)>>>16,p+=(v+=i*c)>>>16,v&=65535,p+=(v+=n*l)>>>16,v&=65535,p+=(v+=a*h)>>>16,p+=r*c+i*l+n*h+a*f,s((y&=65535)<<16|(b&=65535),(p&=65535)<<16|(v&=65535),this.unsigned)},T.mul=T.multiply,T.divide=function(t){if(e(t)||(t=u(t)),t.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?p:g;var r,i,n;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return p;if(t.gt(this.shru(1)))return y;n=p}else{if(this.eq(E))return t.eq(v)||t.eq(b)?E:t.eq(E)?v:(r=this.shr(1).div(t).shl(1)).eq(g)?t.isNegative()?v:b:(i=this.sub(t.mul(r)),n=r.add(i.div(t)));if(t.eq(E))return this.unsigned?p:g;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();n=g}for(i=this;i.gte(t);){r=Math.max(1,Math.floor(i.toNumber()/t.toNumber()));for(var s=Math.ceil(Math.log(r)/Math.LN2),f=s<=48?1:a(2,s-48),h=o(r),l=h.mul(t);l.isNegative()||l.gt(i);)l=(h=o(r-=f,this.unsigned)).mul(t);h.isZero()&&(h=v),n=n.add(h),i=i.sub(l)}return n},T.div=T.divide,T.modulo=function(t){return e(t)||(t=u(t)),this.sub(this.div(t).mul(t))},T.mod=T.modulo,T.not=function(){return s(~this.low,~this.high,this.unsigned)},T.and=function(t){return e(t)||(t=u(t)),s(this.low&t.low,this.high&t.high,this.unsigned)},T.or=function(t){return e(t)||(t=u(t)),s(this.low|t.low,this.high|t.high,this.unsigned)},T.xor=function(t){return e(t)||(t=u(t)),s(this.low^t.low,this.high^t.high,this.unsigned)},T.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?s(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):s(0,this.low<<t-32,this.unsigned)},T.shl=T.shiftLeft,T.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?s(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):s(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},T.shr=T.shiftRight,T.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0==(t&=63))return this;var r=this.high;return t<32?s(this.low>>>t|r<<32-t,r>>>t,this.unsigned):s(32===t?r:r>>>t-32,0,this.unsigned)},T.shru=T.shiftRightUnsigned,T.toSigned=function(){return this.unsigned?s(this.low,this.high,!1):this},T.toUnsigned=function(){return this.unsigned?this:s(this.low,this.high,!0)},T.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},T.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24&255,255&t,t>>>8&255,t>>>16&255,t>>>24&255]},T.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24&255,t>>>16&255,t>>>8&255,255&t,e>>>24&255,e>>>16&255,e>>>8&255,255&e]},t})?r.apply(e,[]):r)||(t.exports=i)},338:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(e,"parse",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(e,"v1",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"v3",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(e,"v4",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"v5",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"validate",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"version",{enumerable:!0,get:function(){return f.default}});var i=c(r(3925)),n=c(r(2220)),o=c(r(8015)),s=c(r(197)),a=c(r(5529)),f=c(r(923)),u=c(r(3447)),h=c(r(3584)),l=c(r(5842));function c(t){return t&&t.__esModule?t:{default:t}}},7809:(t,e)=>{"use strict";function r(t){return 14+(t+64>>>9<<4)+1}function i(t,e){const r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}function n(t,e,r,n,o,s){return i((a=i(i(e,t),i(n,s)))<<(f=o)|a>>>32-f,r);var a,f}function o(t,e,r,i,o,s,a){return n(e&r|~e&i,t,e,o,s,a)}function s(t,e,r,i,o,s,a){return n(e&i|r&~i,t,e,o,s,a)}function a(t,e,r,i,o,s,a){return n(e^r^i,t,e,o,s,a)}function f(t,e,r,i,o,s,a){return n(r^(e|~i),t,e,o,s,a)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r)}return function(t){const e=[],r=32*t.length,i="0123456789abcdef";for(let n=0;n<r;n+=8){const r=t[n>>5]>>>n%32&255,o=parseInt(i.charAt(r>>>4&15)+i.charAt(15&r),16);e.push(o)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[r(e)-1]=e;let n=1732584193,u=-271733879,h=-1732584194,l=271733878;for(let e=0;e<t.length;e+=16){const r=n,c=u,d=h,g=l;n=o(n,u,h,l,t[e],7,-680876936),l=o(l,n,u,h,t[e+1],12,-389564586),h=o(h,l,n,u,t[e+2],17,606105819),u=o(u,h,l,n,t[e+3],22,-1044525330),n=o(n,u,h,l,t[e+4],7,-176418897),l=o(l,n,u,h,t[e+5],12,1200080426),h=o(h,l,n,u,t[e+6],17,-1473231341),u=o(u,h,l,n,t[e+7],22,-45705983),n=o(n,u,h,l,t[e+8],7,1770035416),l=o(l,n,u,h,t[e+9],12,-1958414417),h=o(h,l,n,u,t[e+10],17,-42063),u=o(u,h,l,n,t[e+11],22,-1990404162),n=o(n,u,h,l,t[e+12],7,1804603682),l=o(l,n,u,h,t[e+13],12,-40341101),h=o(h,l,n,u,t[e+14],17,-1502002290),u=o(u,h,l,n,t[e+15],22,1236535329),n=s(n,u,h,l,t[e+1],5,-165796510),l=s(l,n,u,h,t[e+6],9,-1069501632),h=s(h,l,n,u,t[e+11],14,643717713),u=s(u,h,l,n,t[e],20,-373897302),n=s(n,u,h,l,t[e+5],5,-701558691),l=s(l,n,u,h,t[e+10],9,38016083),h=s(h,l,n,u,t[e+15],14,-660478335),u=s(u,h,l,n,t[e+4],20,-405537848),n=s(n,u,h,l,t[e+9],5,568446438),l=s(l,n,u,h,t[e+14],9,-1019803690),h=s(h,l,n,u,t[e+3],14,-187363961),u=s(u,h,l,n,t[e+8],20,1163531501),n=s(n,u,h,l,t[e+13],5,-1444681467),l=s(l,n,u,h,t[e+2],9,-51403784),h=s(h,l,n,u,t[e+7],14,1735328473),u=s(u,h,l,n,t[e+12],20,-1926607734),n=a(n,u,h,l,t[e+5],4,-378558),l=a(l,n,u,h,t[e+8],11,-2022574463),h=a(h,l,n,u,t[e+11],16,1839030562),u=a(u,h,l,n,t[e+14],23,-35309556),n=a(n,u,h,l,t[e+1],4,-1530992060),l=a(l,n,u,h,t[e+4],11,1272893353),h=a(h,l,n,u,t[e+7],16,-155497632),u=a(u,h,l,n,t[e+10],23,-1094730640),n=a(n,u,h,l,t[e+13],4,681279174),l=a(l,n,u,h,t[e],11,-358537222),h=a(h,l,n,u,t[e+3],16,-722521979),u=a(u,h,l,n,t[e+6],23,76029189),n=a(n,u,h,l,t[e+9],4,-640364487),l=a(l,n,u,h,t[e+12],11,-421815835),h=a(h,l,n,u,t[e+15],16,530742520),u=a(u,h,l,n,t[e+2],23,-995338651),n=f(n,u,h,l,t[e],6,-198630844),l=f(l,n,u,h,t[e+7],10,1126891415),h=f(h,l,n,u,t[e+14],15,-1416354905),u=f(u,h,l,n,t[e+5],21,-57434055),n=f(n,u,h,l,t[e+12],6,1700485571),l=f(l,n,u,h,t[e+3],10,-1894986606),h=f(h,l,n,u,t[e+10],15,-1051523),u=f(u,h,l,n,t[e+1],21,-2054922799),n=f(n,u,h,l,t[e+8],6,1873313359),l=f(l,n,u,h,t[e+15],10,-30611744),h=f(h,l,n,u,t[e+6],15,-1560198380),u=f(u,h,l,n,t[e+13],21,1309151649),n=f(n,u,h,l,t[e+4],6,-145523070),l=f(l,n,u,h,t[e+11],10,-1120210379),h=f(h,l,n,u,t[e+2],15,718787259),u=f(u,h,l,n,t[e+9],21,-343485551),n=i(n,r),u=i(u,c),h=i(h,d),l=i(l,g)}return[n,u,h,l]}(function(t){if(0===t.length)return[];const e=8*t.length,i=new Uint32Array(r(e));for(let r=0;r<e;r+=8)i[r>>5]|=(255&t[r/8])<<r%32;return i}(t),8*t.length))}},9871:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};e.default=r},5529:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default="00000000-0000-0000-0000-000000000000"},5842:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i,n=(i=r(3447))&&i.__esModule?i:{default:i};e.default=function(t){if(!(0,n.default)(t))throw TypeError("Invalid UUID");let e;const r=new Uint8Array(16);return r[0]=(e=parseInt(t.slice(0,8),16))>>>24,r[1]=e>>>16&255,r[2]=e>>>8&255,r[3]=255&e,r[4]=(e=parseInt(t.slice(9,13),16))>>>8,r[5]=255&e,r[6]=(e=parseInt(t.slice(14,18),16))>>>8,r[7]=255&e,r[8]=(e=parseInt(t.slice(19,23),16))>>>8,r[9]=255&e,r[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,r[11]=e/4294967296&255,r[12]=e>>>24&255,r[13]=e>>>16&255,r[14]=e>>>8&255,r[15]=255&e,r}},4261:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},9469:(t,e)=>{"use strict";let r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){if(!r&&(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!r))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)};const i=new Uint8Array(16)},7230:(t,e)=>{"use strict";function r(t,e,r,i){switch(t){case 0:return e&r^~e&i;case 1:case 3:return e^r^i;case 2:return e&r^e&i^r&i}}function i(t,e){return t<<e|t>>>32-e}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;e.default=function(t){const e=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);const o=t.length/4+2,s=Math.ceil(o/16),a=new Array(s);for(let e=0;e<s;++e){const r=new Uint32Array(16);for(let i=0;i<16;++i)r[i]=t[64*e+4*i]<<24|t[64*e+4*i+1]<<16|t[64*e+4*i+2]<<8|t[64*e+4*i+3];a[e]=r}a[s-1][14]=8*(t.length-1)/Math.pow(2,32),a[s-1][14]=Math.floor(a[s-1][14]),a[s-1][15]=8*(t.length-1)&4294967295;for(let t=0;t<s;++t){const o=new Uint32Array(80);for(let e=0;e<16;++e)o[e]=a[t][e];for(let t=16;t<80;++t)o[t]=i(o[t-3]^o[t-8]^o[t-14]^o[t-16],1);let s=n[0],f=n[1],u=n[2],h=n[3],l=n[4];for(let t=0;t<80;++t){const n=Math.floor(t/20),a=i(s,5)+r(n,f,u,h)+l+e[n]+o[t]>>>0;l=h,h=u,u=i(f,30)>>>0,f=s,s=a}n[0]=n[0]+s>>>0,n[1]=n[1]+f>>>0,n[2]=n[2]+u>>>0,n[3]=n[3]+h>>>0,n[4]=n[4]+l>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]}},3584:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,e.unsafeStringify=s;var i,n=(i=r(3447))&&i.__esModule?i:{default:i};const o=[];for(let t=0;t<256;++t)o.push((t+256).toString(16).slice(1));function s(t,e=0){return(o[t[e+0]]+o[t[e+1]]+o[t[e+2]]+o[t[e+3]]+"-"+o[t[e+4]]+o[t[e+5]]+"-"+o[t[e+6]]+o[t[e+7]]+"-"+o[t[e+8]]+o[t[e+9]]+"-"+o[t[e+10]]+o[t[e+11]]+o[t[e+12]]+o[t[e+13]]+o[t[e+14]]+o[t[e+15]]).toLowerCase()}e.default=function(t,e=0){const r=s(t,e);if(!(0,n.default)(r))throw TypeError("Stringified UUID is invalid");return r}},3925:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i,n=(i=r(9469))&&i.__esModule?i:{default:i},o=r(3584);let s,a,f=0,u=0;e.default=function(t,e,r){let i=e&&r||0;const h=e||new Array(16);let l=(t=t||{}).node||s,c=void 0!==t.clockseq?t.clockseq:a;if(null==l||null==c){const e=t.random||(t.rng||n.default)();null==l&&(l=s=[1|e[0],e[1],e[2],e[3],e[4],e[5]]),null==c&&(c=a=16383&(e[6]<<8|e[7]))}let d=void 0!==t.msecs?t.msecs:Date.now(),g=void 0!==t.nsecs?t.nsecs:u+1;const p=d-f+(g-u)/1e4;if(p<0&&void 0===t.clockseq&&(c=c+1&16383),(p<0||d>f)&&void 0===t.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=d,u=g,a=c,d+=122192928e5;const v=(1e4*(268435455&d)+g)%4294967296;h[i++]=v>>>24&255,h[i++]=v>>>16&255,h[i++]=v>>>8&255,h[i++]=255&v;const y=d/4294967296*1e4&268435455;h[i++]=y>>>8&255,h[i++]=255&y,h[i++]=y>>>24&15|16,h[i++]=y>>>16&255,h[i++]=c>>>8|128,h[i++]=255&c;for(let t=0;t<6;++t)h[i+t]=l[t];return e||(0,o.unsafeStringify)(h)}},2220:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=o(r(2969)),n=o(r(7809));function o(t){return t&&t.__esModule?t:{default:t}}var s=(0,i.default)("v3",48,n.default);e.default=s},2969:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.URL=e.DNS=void 0,e.default=function(t,e,r){function i(t,i,s,a){var f;if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));const e=[];for(let r=0;r<t.length;++r)e.push(t.charCodeAt(r));return e}(t)),"string"==typeof i&&(i=(0,o.default)(i)),16!==(null===(f=i)||void 0===f?void 0:f.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let u=new Uint8Array(16+t.length);if(u.set(i),u.set(t,i.length),u=r(u),u[6]=15&u[6]|e,u[8]=63&u[8]|128,s){a=a||0;for(let t=0;t<16;++t)s[a+t]=u[t];return s}return(0,n.unsafeStringify)(u)}try{i.name=t}catch(t){}return i.DNS=s,i.URL=a,i};var i,n=r(3584),o=(i=r(5842))&&i.__esModule?i:{default:i};const s="6ba7b810-9dad-11d1-80b4-00c04fd430c8";e.DNS=s;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";e.URL=a},8015:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=s(r(9871)),n=s(r(9469)),o=r(3584);function s(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e,r){if(i.default.randomUUID&&!e&&!t)return i.default.randomUUID();const s=(t=t||{}).random||(t.rng||n.default)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e){r=r||0;for(let t=0;t<16;++t)e[r+t]=s[t];return e}return(0,o.unsafeStringify)(s)}},197:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=o(r(2969)),n=o(r(7230));function o(t){return t&&t.__esModule?t:{default:t}}var s=(0,i.default)("v5",80,n.default);e.default=s},3447:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i,n=(i=r(4261))&&i.__esModule?i:{default:i};e.default=function(t){return"string"==typeof t&&n.default.test(t)}},923:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i,n=(i=r(3447))&&i.__esModule?i:{default:i};e.default=function(t){if(!(0,n.default)(t))throw TypeError("Invalid UUID");return parseInt(t.slice(14,15),16)}}},e={};function r(i){var n=e[i];if(void 0!==n)return n.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(4430),e=new t.NstrumentaBrowserClient;document.addEventListener("readystatechange",(function(){return t=void 0,r=void 0,n=function(){var t,r,i,n,o,s,a;return function(t,e){var r,i,n,o,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(n=2&o[0]?i.return:o[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,o[1])).done)return n;switch(i=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){s.label=o[1];break}if(6===o[0]&&s.label<n[1]){s.label=n[1],n=o;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(o);break}n[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],i=0}finally{r=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(f){switch(f.label){case 0:return"complete"!==document.readyState?[2]:(t=document.getElementById("outputTextArea"),e.addListener("open",(function(){var r=!1;console.log("client open"),e.addSubscription("_nstrumenta",(function(t){"health"===t.type&&(document.getElementById("health").innerText=new Date(Date.now()).toLocaleString())})),e.addSubscription("_status",(function(i){var n=i.agentId;document.getElementById("status").innerText=JSON.stringify(i),n&&!r&&(r=!0,e.addSubscription("_".concat(n,"/stdout"),(function(e){var r=(new TextDecoder).decode(e);t.textContent+="".concat(r,"\n")})))}))})),r=new URL(window.location.href).searchParams,i=r.get("wsUrl"),n=i||window.location.origin.replace("http","ws"),(o=r.get("apiKey"))&&localStorage.setItem("apiKey",o),s=localStorage.getItem("apiKey"),a=o||s,[4,e.connect({apiKey:a,wsUrl:n})]);case 1:return f.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(e,o){function s(t){try{f(n.next(t))}catch(t){o(t)}}function a(t){try{f(n.throw(t))}catch(t){o(t)}}function f(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(t){t(r)}))).then(s,a)}f((n=n.apply(t,r||[])).next())}));var t,r,i,n}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,