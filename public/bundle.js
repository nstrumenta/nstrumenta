/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={4430:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.NstrumentaBrowserClient=t.MCU=t.ClientSDK=t.endpoints=void 0;const r=n(4308),s=n(7374);t.endpoints=(0,r.getEndpoints)("prod");var o=n(4607);Object.defineProperty(t,"ClientSDK",{enumerable:!0,get:function(){return o.ClientSDK}}),Object.defineProperty(t,"MCU",{enumerable:!0,get:function(){return o.MCU}});class a extends r.NstrumentaClientBase{constructor(){super(),this.joinWebRTC=e=>i(this,void 0,void 0,(function*(){return console.log("browserClient joinWebRTC"),this.callRPC("joinWebRTC",{room:e})})),this.candidateWebRTC=(e,t,n)=>i(this,void 0,void 0,(function*(){return this.callRPC("candidateWebRTC",{peerId:e,room:t,candidate:n})})),this.answerWebRTC=(e,t,n)=>i(this,void 0,void 0,(function*(){return this.callRPC("answerWebRTC",{peerId:e,room:t,answer:n})}))}connect(e){return i(this,void 0,void 0,(function*(){return new Promise(((t,n)=>i(this,void 0,void 0,(function*(){const{wsUrl:o,apiKey:a,verify:f=!0}=e||{},{search:u}=window.location,h=new URLSearchParams(u).get("wsUrl"),l=o||h||window.location.origin.replace("http","ws"),c=new URLSearchParams(u).get("apiKey"),d=localStorage.getItem("apiKey"),g=a||c||d||prompt("Enter your nstrumenta apiKey");if(g&&localStorage.setItem("apiKey",g),this.reconnection.attempts>100)throw new Error("Too many reconnection attempts, stopping");if(!g)throw new Error('nstrumenta api key is missing, pass it as an argument to NstrumentaClient.connect({apiKey: "your key"}) for javascript clients in the browser, or set the NSTRUMENTA_API_KEY environment variable get a key from your nstrumenta project settings https://nstrumenta.com/projects/ *your projectId here* /settings');this.apiKey=g;let p="unverified";if(f)try{p=yield(0,r.getToken)(this.apiKey),this.storage=new r.StorageService({apiKey:this.apiKey})}catch(e){throw console.error(e.message),e}this.ws=new WebSocket(l),this.ws.binaryType="arraybuffer",this.ws.addEventListener("open",(()=>i(this,void 0,void 0,(function*(){var e;console.log(`client websocket opened <${l}>`),null===(e=this.ws)||void 0===e||e.send(p),this.reconnection.attempts=0,this.connection.status=r.ClientStatus.CONNECTING})))),this.ws.addEventListener("close",(t=>{var n;this.connection.status=r.ClientStatus.DISCONNECTED,null===(n=this.listeners.get("close"))||void 0===n||n.forEach((e=>e())),console.log(`client websocket closed ${l} code:${t.code} wasClean:${t.wasClean}`),this.subscriptions.clear(),this.reconnection.hasVerified&&(this.reconnection.timeout=setTimeout((()=>{this.reconnection.timeout=null,console.log(`attempting to reconnect, attempts: ${this.reconnection.attempts}`),this.connect(e)}),this.rollOff(this.reconnection.attempts)),this.reconnection.attempts+=1)})),this.ws.addEventListener("error",(e=>{this.connection.status=r.ClientStatus.ERROR,n(`Error in websocket connection: ${e.message}`)})),this.ws.addEventListener("message",(e=>{var n,i;const o=e.data;let a;try{a=(0,s.deserializeWireMessage)(o)}catch(e){return void console.log(`Couldn't deserialize message ${JSON.stringify(e)}`)}const{channel:f,contents:u}=a;if("_nstrumenta"==f){const{verified:e,error:i,clientId:s}=u;i&&console.error(i),e&&(this.connection.status=r.ClientStatus.CONNECTED,this.reconnection.hasVerified=!0,null===(n=this.listeners.get("open"))||void 0===n||n.forEach((e=>e())),this.messageBuffer.forEach((e=>{var t;null===(t=this.ws)||void 0===t||t.send(e)})),this.messageBuffer=[],this.clientId=s,t(this.connection))}null===(i=this.subscriptions.get(f))||void 0===i||i.forEach((e=>{e(u)}))}))}))))}))}}t.NstrumentaBrowserClient=a},3307:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.listenMixedAudio=void 0,t.listenMixedAudio=(e,t,i)=>r=>n(void 0,void 0,void 0,(function*(){const[n,s]=yield e.listenMixedAudio([e.peerId,r]),o=t.listen(n.mixId,n.mid,r),a=yield e.setOffer(s);return yield e.sendAnswer(a),i.onMixerCreated.execute(o),o}))},7886:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.unsubscribe=t.subscribe=void 0,t.subscribe=(e,t)=>i=>n(void 0,void 0,void 0,(function*(){if(t.isSubscribed(i))return;const r=i.map((e=>"application"===e.kind?{info:e}:{info:e,type:e.simulcast?"high":"single"})),[s,o]=yield e.subscribe([e.peerId,r]),a=(yield Promise.all(s.map((({label:t,mediaId:i,mid:r})=>n(void 0,void 0,void 0,(function*(){if(t){const[n]=[e.datachannels[t]]||0;return{dc:n,mediaId:i}}return{mid:r,mediaId:i}})))))).reduce(((e,t)=>(t.dc?e[t.mediaId]={dc:t.dc}:e[t.mediaId]={mid:t.mid},e)),{}),f=t.subscribe(i,a);if(o){const t=yield e.setOffer(o);yield e.sendAnswer(t)}return f})),t.unsubscribe=(e,t)=>i=>n(void 0,void 0,void 0,(function*(){const[n]=yield e.unsubscribe([i,e.peerId]);t.unsubscribe(i);const r=yield e.setOffer(n);yield e.sendAnswer(r)}))},9674:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.unPublish=t.publish=t.join=void 0;const r=n(3386);t.join=e=>(t,n,s)=>i(void 0,void 0,void 0,(function*(){const i=new r.User(t,e),{answer:o,candidates:a}=yield i.join(n,s);return{user:i,answer:o,candidates:a}})),t.publish=(e,t,n,r)=>s=>i(void 0,void 0,void 0,(function*(){const i={kind:s.kind,simulcast:!!s.simulcast},[o,a]=yield e.publish([t.peerId,i]);let f;if("application"===s.kind)f=e.datachannels[`__messaging:${o.mediaId}`];else{const n=yield t.publish(s,a);yield e.sendAnswer(n.localDescription)}return t.published=[...t.published,o],n.onPublish.execute(o),r.publish(o,{datachannel:f})})),t.unPublish=(e,t,n)=>r=>i(void 0,void 0,void 0,(function*(){r.publisherId===e.peerId&&(t.published=t.published.filter((e=>e.mediaId!==r.mediaId)),n.onUnPublish.execute(r),yield e.unPublish([r]))}))},5893:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Events=void 0;const r=i(n(1389));t.Events=class{constructor(){this.onConnect=new r.default,this.onPublish=new r.default,this.onUnPublish=new r.default,this.onLeave=new r.default,this.onJoin=new r.default,this.onTrack=new r.default,this.onDataChannel=new r.default,this.onUnsubscribe=new r.default,this.onMixerCreated=new r.default}}},55:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MCUManager=void 0;const i=n(1999);t.MCUManager=class{constructor(e,t){this.events=e,this.connection=t,this._mixers={}}get mixers(){return Object.values(this._mixers)}listen(e,t,n){return this._mixers[e]=new i.MCU(this.connection,this.events,e,t),n.forEach((t=>this._mixers[e].add(t))),this._mixers[e]}unListen(e){delete this._mixers[e]}getMixer(e){return this._mixers[e]}}},1999:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MCU=void 0;const r=i(n(1389));t.MCU=class{constructor(e,t,n,i){this.connection=e,this.events=t,this.id=n,this.mid=i,this.infos={},this.onAdded=new r.default,this.onRemoved=new r.default,this.listen()}listen(){this.connection.ontrack.subscribe((({transceiver:e,streams:t})=>{const n=e.mid;this.mid===n&&this.events.onTrack.execute(t[0],this.info)}))}get info(){return{mediaId:"mixer",kind:"mixer",publisherId:this.id,simulcast:!1}}add(e){this.infos[e.mediaId]=e,this.onAdded.execute(e)}remove(e){delete this.infos[e.mediaId],this.onRemoved.execute(e)}}},7276:function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Consumer=void 0;const r=i(n(1389));t.Consumer=class{constructor(e,t,n){this.connection=e,this.events=t,this.info=n,this.onMessage=new r.default}initAV(e){return this.connection.ontrack.subscribe((({transceiver:t,streams:n})=>{const i=t.mid;e===i&&this.events.onTrack.execute(n[0],this.info)})),this}initData(e){return this.events.onDataChannel.execute(e),this.datachannel=e,e.onmessage=e=>{this.onMessage.execute(e.data)},this}stop(){this.events.onUnsubscribe.execute(this.info)}}},6698:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SFUManager=void 0;const i=n(7276),r=n(9770);t.SFUManager=class{constructor(e,t){this.events=e,this.connection=t,this.consumers={},this.producers={},this.subscribed=[]}isSubscribed(e){return!!e.find((e=>this.subscribed.find((t=>t.mediaId===e.mediaId))))}publish(e,{datachannel:t}){const n=new r.Producer(e);return t&&(n.datachannel=t),this.producers[e.mediaId]=n,n}subscribe(e,t){return this.subscribed=[...this.subscribed,...e],e.map((e=>{const n=this.consumers[e.mediaId]=new i.Consumer(this.connection,this.events,e),{dc:r,mid:s}=t[e.mediaId];return r?n.initData(r):n.initAV(s),n}))}unsubscribe(e){const t=this.consumers[e.mediaId];this.subscribed=this.subscribed.filter((t=>t.mediaId!==e.mediaId)),delete this.consumers[e.mediaId],t.stop()}getConsumer(e){return this.consumers[e]}getProducer(e){return this.producers[e]}}},9770:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Producer=void 0,t.Producer=class{constructor(e){this.info=e}sendData(e){var t;null===(t=this.datachannel)||void 0===t||t.send(e)}}},3386:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.User=void 0;const s=r(n(1389));t.User=class{constructor(e,t){this.roomName=e,this.connection=t,this.peer=this.connection.peer,this.candidates=[],this.onCandidate=new s.default,this.published=[],this.join=(e,t)=>i(this,void 0,void 0,(function*(){return this.peerId=e,this.connection.peerId=e,this.peer.onicecandidate=({candidate:e})=>{e&&(this.candidates.push(e),this.onCandidate.execute(e))},{answer:yield this.connection.setOffer(t),candidates:this.candidates}}))}publish(e,t){return i(this,void 0,void 0,(function*(){if(t&&(yield this.peer.setRemoteDescription(t)),e.track){const t=this.peer.getTransceivers().slice(-1)[0];if(t.sender.replaceTrack(e.track),t.direction="sendonly",e.simulcast){const e=t.sender.getParameters();e.encodings[0]=Object.assign(Object.assign({},e.encodings[0]),{maxBitrate:68e4,scaleResolutionDownBy:1}),e.encodings[1]=Object.assign(Object.assign({},e.encodings[1]),{maxBitrate:36e3,scaleResolutionDownBy:4}),t.sender.setParameters(e)}}return t&&(yield this.peer.setLocalDescription(yield this.peer.createAnswer())),this.peer}))}}},4607:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MCU=t.ClientSDK=void 0;var i=n(182);Object.defineProperty(t,"ClientSDK",{enumerable:!0,get:function(){return i.ClientSDK}});var r=n(1999);Object.defineProperty(t,"MCU",{enumerable:!0,get:function(){return r.MCU}})},4861:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Connection=void 0;const s=r(n(1389));t.Connection=class{constructor(e){this.events=e,this.onmessage=new s.default,this.ontrack=new s.default,this.ondatachannel=new s.default,this.datachannels={},this.peer=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]}),this.handleLeave=(...e)=>i(this,void 0,void 0,(function*(){const[t,n]=e;if(this.events.onLeave.execute(t),n){const e=yield this.setOffer(n);this.sendAnswer(e)}})),this.handleJoin=(...e)=>i(this,void 0,void 0,(function*(){const[t]=e;this.events.onJoin.execute(t)})),this.handlePublish=(...e)=>{const[t]=e;this.events.onPublish.execute(t)},this.handleUnPublish=(...e)=>i(this,void 0,void 0,(function*(){const[t,n]=e;this.events.onUnPublish.execute(t);const i=yield this.setOffer(n);yield this.sendAnswer(i)})),this.sendCandidate=e=>{this.sendRPC({type:"handleCandidate",payload:[this.peerId,e]})},this.sendAnswer=e=>i(this,void 0,void 0,(function*(){this.sendRPC({type:"handleAnswer",payload:[this.peerId,e]}),yield this.waitRPC("handleAnswerDone")})),this.publish=e=>i(this,void 0,void 0,(function*(){return this.sendRPC({type:"publish",payload:e}),this.waitRPC("handlePublishDone")})),this.unPublish=e=>i(this,void 0,void 0,(function*(){this.sendRPC({type:"unPublish",payload:e});const[t]=yield this.waitRPC("handleUnPublishDone"),n=yield this.setOffer(t);yield this.sendAnswer(n)})),this.subscribe=e=>i(this,void 0,void 0,(function*(){return this.sendRPC({type:"subscribe",payload:e}),yield this.waitRPC("handleSubscribe")})),this.unsubscribe=e=>i(this,void 0,void 0,(function*(){return this.sendRPC({type:"unsubscribe",payload:e}),yield this.waitRPC("handleUnsubscribe")})),this.getMedias=()=>i(this,void 0,void 0,(function*(){this.sendRPC({type:"getMedias",payload:[this.peerId]});const[e]=yield this.waitRPC("handleMedias");return e})),this.changeQuality=e=>{this.sendRPC({type:"changeQuality",payload:e})},this.listenMixedAudio=e=>i(this,void 0,void 0,(function*(){return this.sendRPC({type:"listenMixedAudio",payload:e}),yield this.waitRPC("handleListenMixedAudio")})),this.waitRPC=e=>new Promise((t=>{const{unSubscribe:n}=this.onmessage.subscribe((i=>{const{type:r,payload:s}=JSON.parse(i);r===e&&(n(),t(s))}))})),this.peer.ondatachannel=({channel:t})=>{"__sfu"===t.label?(this.channel=t,e.onConnect.execute(),this.peer.onicecandidate=({candidate:e})=>{e&&this.sendCandidate(e)},t.onmessage=({data:e})=>{const{type:t,payload:n}=JSON.parse(e);console.log("from sfu",t,n),this[t]&&this[t](...n),this.onmessage.execute(e)}):(this.datachannels[t.label]=t,this.ondatachannel.execute(t))},this.peer.ontrack=e=>this.ontrack.execute(e)}setOffer(e){return i(this,void 0,void 0,(function*(){yield this.peer.setRemoteDescription(e);const t=yield this.peer.createAnswer();return yield this.peer.setLocalDescription(t),this.peer.localDescription}))}addMixedAudioTrack(e){this.sendRPC({type:"addMixedAudioTrack",payload:e})}removeMixedAudioTrack(e){this.sendRPC({type:"removeMixedAudioTrack",payload:e})}sendRPC(e){console.log("sendRPC",e),this.channel.send(JSON.stringify(e))}}},182:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ClientSDK=void 0;const r=n(3307),s=n(7886),o=n(9674),a=n(5893),f=n(55),u=n(6698),h=n(4861);t.ClientSDK=class{constructor(){this.events=new a.Events,this.connection=new h.Connection(this.events),this.sfu=new u.SFUManager(this.events,this.connection),this.mcu=new f.MCUManager(this.events,this.connection),this.medias={},this.streams={},this.events.onPublish.subscribe((e=>{this.medias[e.mediaId]=e})),this.events.onUnPublish.subscribe((e=>{delete this.medias[e.mediaId],delete this.streams[e.mediaId]})),this.events.onLeave.subscribe((e=>{e.forEach((e=>{delete this.medias[e.mediaId],this.events.onUnPublish.execute(e)}))})),this.events.onTrack.subscribe(((e,t)=>{this.streams[t.mediaId]={info:t,stream:e}}))}get peerId(){var e;return null===(e=this.user)||void 0===e?void 0:e.peerId}join(e,t,n){return i(this,void 0,void 0,(function*(){const{answer:i,user:r,candidates:s}=yield(0,o.join)(this.connection)(e,t,n);return this.user=r,{answer:i,candidates:s,user:r}}))}publish(e){return i(this,void 0,void 0,(function*(){return yield(0,o.publish)(this.connection,this.user,this.events,this.sfu)(e)}))}unPublish(e){return i(this,void 0,void 0,(function*(){yield(0,o.unPublish)(this.connection,this.user,this.events)(e)}))}subscribe(e){return i(this,void 0,void 0,(function*(){yield(0,s.subscribe)(this.connection,this.sfu)(e)}))}unsubscribe(e){return i(this,void 0,void 0,(function*(){yield(0,s.unsubscribe)(this.connection,this.sfu)(e)}))}getMedias(){return i(this,void 0,void 0,(function*(){const e=yield this.connection.getMedias();return this.medias=e.reduce(((e,t)=>(e[t.mediaId]=t,e)),{}),e}))}listenMixedAudio(e){return i(this,void 0,void 0,(function*(){return yield(0,r.listenMixedAudio)(this.connection,this.mcu,this.events)(e)}))}addMixedAudioTrack(e,t){this.mcu.getMixer(e).add(t),this.connection.addMixedAudioTrack([e,t])}removeMixedAudioTrack(e,t){this.mcu.getMixer(e).remove(t),this.connection.removeMixedAudioTrack([e,t])}changeQuality(e,t){this.connection.changeQuality([this.peerId,e,t])}}},4308:function(e,t,n){"use strict";var i,r=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectTypes=t.getEndpoints=t.DEFAULT_HOST_PORT=void 0,t.DEFAULT_HOST_PORT="8088",t.getEndpoints=e=>{const t="local"===e?"http://localhost:8088":"https://us-central1-macro-coil-194519.cloudfunctions.net";return{ADMIN_UTILS:`${t}/adminUtils`,GET_MACHINES:`${t}/getMachines`,GET_UPLOAD_URL:`${t}/getUploadUrl`,GET_UPLOAD_DATA_URL:`${t}/getUploadDataUrl`,REGISTER_AGENT:`${t}/registerAgent`,LIST_AGENTS:`${t}/listAgents`,SET_AGENT_ACTION:`${t}/setAgentAction`,GET_AGENT_ID_BY_TAG:`${t}/getAgentIdByTag`,CLEAN_AGENT_ACTIONS:`${t}/cleanAgentActions`,GET_DOWNLOAD_URL:`${t}/getDownloadUrl`,GET_PROJECT_DOWNLOAD_URL:`${t}/getProjectDownloadUrl`,GENERATE_DATA_ID:`${t}/generateDataId`,LIST_MODULES:`${t}/listModules`,GET_TOKEN:`${t}/getToken`,VERIFY_TOKEN:`${t}/verifyToken`,VERIFY_API_KEY:`${t}/verifyApiKey`,SET_STORAGE_OBJECT:`${t}/setStorageObject`,SET_DATA_METADATA:`${t}/setDataMetadata`,LIST_STORAGE_OBJECTS:`${t}/listStorageObjects`,QUERY_DATA:`${t}/queryData`,v2:{LIST_MODULES:`${t}/listModulesV2`}}},(i=t.ObjectTypes||(t.ObjectTypes={})).DATA="data",i.MODULES="modules",s(n(7280),t),s(n(1371),t)},7374:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.deserializeByteBuffer=t.deserializeWireMessage=t.deserializeBlob=t.makeBusMessageFromBuffer=t.makeBusMessageFromJsonObject=t.BusMessageType=t.BusMessage=void 0;const s=r(n(1546));class o extends s.default{}var a;t.BusMessage=o,function(e){e[e.BUS_MESSAGE_TYPES_BEGIN=100]="BUS_MESSAGE_TYPES_BEGIN",e[e.Json=101]="Json",e[e.Buffer=102]="Buffer",e[e.BUS_MESSAGE_TYPES_END=103]="BUS_MESSAGE_TYPES_END"}(a=t.BusMessageType||(t.BusMessageType={})),t.makeBusMessageFromJsonObject=(e,t)=>(new s.default).writeUint32(a.Json).writeIString(e).writeIString(JSON.stringify(t)).flip().toBuffer(),t.makeBusMessageFromBuffer=(e,t)=>(new s.default).writeUint32(a.Buffer).writeIString(e).append(t).flip().toBuffer(),t.deserializeBlob=e=>i(void 0,void 0,void 0,(function*(){const n=yield e.arrayBuffer(),i=new s.default(n.byteLength);return new Uint8Array(n).forEach((e=>{i.writeUint8(e)})),i.flip(),(0,t.deserializeByteBuffer)(i)})),t.deserializeWireMessage=e=>{if(e instanceof ArrayBuffer){const n=new s.default(e.byteLength);return new Uint8Array(e).forEach((e=>{n.writeUint8(e)})),n.flip(),(0,t.deserializeByteBuffer)(n)}{const n=new s.default(e.byteLength);return n.buffer=e,(0,t.deserializeByteBuffer)(n)}},t.deserializeByteBuffer=e=>{const t=e.readInt32();if(t<=a.BUS_MESSAGE_TYPES_BEGIN||t>=a.BUS_MESSAGE_TYPES_END)throw`unknown busMessageType ${t}: ${e}`;const n=e.readIString();let i;switch(t){case a.Json:i=JSON.parse(e.readIString());break;case a.Buffer:i=e.buffer.slice(e.offset)}return{channel:n,busMessageType:t,contents:i}}},9187:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StorageService=t.NstrumentaClientBase=t.getToken=t.ClientStatus=void 0;const s=r(n(4206)),o=n(338),a=n(4308),f=n(7374);var u;!function(e){e[e.INIT=0]="INIT",e[e.READY=1]="READY",e[e.CONNECTED=2]="CONNECTED",e[e.DISCONNECTED=3]="DISCONNECTED",e[e.CONNECTING=4]="CONNECTING",e[e.ERROR=5]="ERROR"}(u=t.ClientStatus||(t.ClientStatus={})),t.getToken=e=>i(void 0,void 0,void 0,(function*(){const t={"x-api-key":e,"Content-Type":"application/json"};try{"undefined"!=typeof process&&(yield process.nextTick((()=>{})));const{data:e}=yield s.default.get((0,a.getEndpoints)("prod").GET_TOKEN,{headers:t});return e.token}catch(e){const t=`Problem getting token, check api key, err: ${e.message}`;throw new Error(t)}})),t.NstrumentaClientBase=class{constructor(){this.ws=null,this.apiKey=null,this.reconnection={hasVerified:!1,attempts:0,timeout:null},this.clientId=null,this.connection={status:u.INIT},this.addSubscription=(e,t)=>i(this,void 0,void 0,(function*(){const{subscriptionId:n}=yield this.callRPC("subscribe",{channel:e});console.log(`Nstrumenta client subscribe <${e}> subscriptionId:${n}`);const r=this.subscriptions.get(e)||new Map;return r.set(n,t),this.subscriptions.set(e,r),()=>i(this,void 0,void 0,(function*(){var t;yield this.callRPC("unsubscribe",{channel:e,subscriptionId:n}),null===(t=this.subscriptions.get(e))||void 0===t||t.delete(n)}))})),this.listeners=new Map,this.subscriptions=new Map,this.datalogs=new Map,this.messageBuffer=[],this.endpoints=(0,a.getEndpoints)("prod"),this.addSubscription=this.addSubscription.bind(this),this.addListener=this.addListener.bind(this),this.connect=this.connect.bind(this)}shutdown(){var e,t;return i(this,void 0,void 0,(function*(){this.listeners.clear(),this.subscriptions.clear(),this.datalogs.clear(),this.messageBuffer=[],this.reconnection.timeout&&(clearTimeout(this.reconnection.timeout),this.reconnection.timeout=null),null===(e=this.ws)||void 0===e||e.removeAllListeners(),null===(t=this.ws)||void 0===t||t.close()}))}rollOff(e){return 0==e?0:Math.min(1e3*Math.pow(e,2),18e5)}send(e,t){this.bufferedSend((0,a.makeBusMessageFromJsonObject)(e,t))}sendBuffer(e,t){this.bufferedSend((0,f.makeBusMessageFromBuffer)(e,t))}bufferedSend(e){var t,n,i;(null===(t=this.ws)||void 0===t?void 0:t.readyState)!==(null===(n=this.ws)||void 0===n?void 0:n.OPEN)?(console.log("adding to messageBuffer, length:",this.messageBuffer.length),this.messageBuffer.push(e)):null===(i=this.ws)||void 0===i||i.send(e)}addListener(e,t){this.listeners.get(e)||this.listeners.set(e,[]);const n=this.listeners.get(e);n&&n.push(t)}addStringToDataLog(e,t){const n=this.datalogs.get(e);n?n.push(t):(console.log(`starting new log: ${e}`),this.datalogs.set(e,[t]))}uploadData(e,t,n){var r;return i(this,void 0,void 0,(function*(){const i=t.size;let o;const a=yield s.default.post(this.endpoints.GET_UPLOAD_URL,{path:e,size:i,meta:n},{headers:{contentType:"application/json","x-api-key":this.apiKey}});o=null===(r=a.data)||void 0===r?void 0:r.uploadUrl,yield s.default.put(o,t,{maxBodyLength:1/0,maxContentLength:1/0,headers:{contentType:"application/octet-stream",contentLength:`${i}`,contentLengthRange:`bytes 0-${i-1}/${i}`}})}))}ping(){return i(this,void 0,void 0,(function*(){return this.callRPC("ping",{sendTimestamp:Date.now()})}))}startLog(e,t,n){return i(this,void 0,void 0,(function*(){this.send("_nstrumenta",{command:"startLog",name:e,channels:t,config:n})}))}finishLog(e){return i(this,void 0,void 0,(function*(){console.log("finish log"),this.send("_nstrumenta",{command:"finishLog",name:e})}))}callRPC(e,t){return i(this,void 0,void 0,(function*(){console.log("callRPC",e,t);const n=(0,o.v4)(),r=`__rpc/${e}/${n}`,s=`${r}/request`,f=`${r}/response`;return new Promise((e=>i(this,void 0,void 0,(function*(){var i;const r=this.subscriptions.get(f)||new Map;r.set(n,(t=>{null==r||r.delete(n),e(t)})),this.subscriptions.set(f,r),null===(i=this.ws)||void 0===i||i.send((0,a.makeBusMessageFromJsonObject)(s,t))}))))}))}},t.StorageService=class{constructor(e){this.apiKey=e.apiKey,this.endpoints=(0,a.getEndpoints)("prod")}download(e){return i(this,void 0,void 0,(function*(){const t=yield(0,s.default)(this.endpoints.GET_PROJECT_DOWNLOAD_URL,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{path:e}});console.log("REQ:",t.request);const{data:n}=yield(0,s.default)(t.data,{method:"GET",responseType:"blob"});return n}))}query({filenames:e,tag:t,before:n,after:r,limit:o=1,metadata:a}){return i(this,void 0,void 0,(function*(){const i="string"==typeof a?JSON.parse(a):"object"==typeof a?a:{},f={tags:t,before:n,after:r,limit:o,filenames:e,metadata:i},u={method:"post",headers:{"x-api-key":this.apiKey},data:f};try{return(yield(0,s.default)(this.endpoints.QUERY_DATA,u)).data}catch(e){return console.log(`Something went wrong: ${e.message}`),[]}}))}list(e){return i(this,void 0,void 0,(function*(){return(yield(0,s.default)(this.endpoints.LIST_STORAGE_OBJECTS,{method:"post",headers:{"x-api-key":this.apiKey,"content-type":"application/json"},data:{type:e}})).data}))}upload({filename:e,data:t,meta:n,dataId:r}){var o,a;return i(this,void 0,void 0,(function*(){const i=t.size;let f,u=r;u||(u=(yield(0,s.default)(this.endpoints.GENERATE_DATA_ID,{headers:{"x-api-key":this.apiKey,method:"post"}})).data.dataId);const h={method:"post",headers:{"x-api-key":this.apiKey,"Content-Type":"application/json"},data:{name:e,dataId:u,size:i,metadata:n}};let l=yield(0,s.default)(this.endpoints.GET_UPLOAD_DATA_URL,h);if(f=null===(o=l.data)||void 0===o?void 0:o.uploadUrl,!f)return console.warn(`no upload url returned, can't upload ${e}`),void console.log(l.data);const c=null===(a=l.data)||void 0===a?void 0:a.remoteFilePath,d={maxBodyLength:1/0,maxContentLength:1/0,headers:{contentLength:`${i}`,contentLengthRange:`bytes 0-${i-1}/${i}`,"content-type":"application/octet-stream"},url:f,method:"PUT",data:t};console.log({remoteFilePath:c,uploadConfig:d}),yield(0,s.default)(d)}))}}},7280:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.makeBusMessageFromJsonObject=t.deserializeWireMessage=t.deserializeBlob=t.BusMessage=void 0;var s=n(7374);Object.defineProperty(t,"BusMessage",{enumerable:!0,get:function(){return s.BusMessage}}),Object.defineProperty(t,"deserializeBlob",{enumerable:!0,get:function(){return s.deserializeBlob}}),Object.defineProperty(t,"deserializeWireMessage",{enumerable:!0,get:function(){return s.deserializeWireMessage}}),Object.defineProperty(t,"makeBusMessageFromJsonObject",{enumerable:!0,get:function(){return s.makeBusMessageFromJsonObject}}),r(n(9187),t)},1371:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4206:(e,t,n)=>{e.exports=n(8057)},4387:(e,t,n)=>{"use strict";var i=n(7485),r=n(4570),s=n(2940),o=n(581),a=n(574),f=n(3845),u=n(8338),h=n(8524),l=n(4832),c=n(7132);e.exports=function(e){return new Promise((function(t,n){var d,g=e.data,p=e.headers,v=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}i.isFormData(g)&&delete p["Content-Type"];var b=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(w+":"+m)}var E=a(e.baseURL,e.url);function _(){if(b){var i="getAllResponseHeaders"in b?f(b.getAllResponseHeaders()):null,s={data:v&&"text"!==v&&"json"!==v?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:i,config:e,request:b};r((function(e){t(e),y()}),(function(e){n(e),y()}),s),b=null}}if(b.open(e.method.toUpperCase(),o(E,e.params,e.paramsSerializer),!0),b.timeout=e.timeout,"onloadend"in b?b.onloadend=_:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(_)},b.onabort=function(){b&&(n(h("Request aborted",e,"ECONNABORTED",b)),b=null)},b.onerror=function(){n(h("Network Error",e,null,b)),b=null},b.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",i=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(h(t,e,i.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",b)),b=null},i.isStandardBrowserEnv()){var T=(e.withCredentials||u(E))&&e.xsrfCookieName?s.read(e.xsrfCookieName):void 0;T&&(p[e.xsrfHeaderName]=T)}"setRequestHeader"in b&&i.forEach(p,(function(e,t){void 0===g&&"content-type"===t.toLowerCase()?delete p[t]:b.setRequestHeader(t,e)})),i.isUndefined(e.withCredentials)||(b.withCredentials=!!e.withCredentials),v&&"json"!==v&&(b.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&b.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){b&&(n(!e||e&&e.type?new c("canceled"):e),b.abort(),b=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),g||(g=null),b.send(g)}))}},8057:(e,t,n)=>{"use strict";var i=n(7485),r=n(875),s=n(5029),o=n(4941),a=function e(t){var n=new s(t),a=r(s.prototype.request,n);return i.extend(a,s.prototype,n),i.extend(a,n),a.create=function(n){return e(o(t,n))},a}(n(8396));a.Axios=s,a.Cancel=n(7132),a.CancelToken=n(4603),a.isCancel=n(1475),a.VERSION=n(3345).version,a.all=function(e){return Promise.all(e)},a.spread=n(5739),a.isAxiosError=n(5835),e.exports=a,e.exports.default=a},7132:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4603:(e,t,n)=>{"use strict";var i=n(7132);function r(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,i=n._listeners.length;for(t=0;t<i;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,i=new Promise((function(e){n.subscribe(e),t=e})).then(e);return i.cancel=function(){n.unsubscribe(t)},i},e((function(e){n.reason||(n.reason=new i(e),t(n.reason))}))}r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},r.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},r.source=function(){var e;return{token:new r((function(t){e=t})),cancel:e}},e.exports=r},1475:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},5029:(e,t,n)=>{"use strict";var i=n(7485),r=n(581),s=n(8096),o=n(5009),a=n(4941),f=n(6144),u=f.validators;function h(e){this.defaults=e,this.interceptors={request:new s,response:new s}}h.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&f.assertOptions(n,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var i=[],r=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(r=r&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));var s,h=[];if(this.interceptors.response.forEach((function(e){h.push(e.fulfilled,e.rejected)})),!r){var l=[o,void 0];for(Array.prototype.unshift.apply(l,i),l=l.concat(h),s=Promise.resolve(t);l.length;)s=s.then(l.shift(),l.shift());return s}for(var c=t;i.length;){var d=i.shift(),g=i.shift();try{c=d(c)}catch(e){g(e);break}}try{s=o(c)}catch(e){return Promise.reject(e)}for(;h.length;)s=s.then(h.shift(),h.shift());return s},h.prototype.getUri=function(e){return e=a(this.defaults,e),r(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(e){h.prototype[e]=function(t,n){return this.request(a(n||{},{method:e,url:t,data:(n||{}).data}))}})),i.forEach(["post","put","patch"],(function(e){h.prototype[e]=function(t,n,i){return this.request(a(i||{},{method:e,url:t,data:n}))}})),e.exports=h},8096:(e,t,n)=>{"use strict";var i=n(7485);function r(){this.handlers=[]}r.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){i.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=r},574:(e,t,n)=>{"use strict";var i=n(2642),r=n(2288);e.exports=function(e,t){return e&&!i(t)?r(e,t):t}},8524:(e,t,n)=>{"use strict";var i=n(9953);e.exports=function(e,t,n,r,s){var o=new Error(e);return i(o,t,n,r,s)}},5009:(e,t,n)=>{"use strict";var i=n(7485),r=n(9212),s=n(1475),o=n(8396),a=n(7132);function f(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a("canceled")}e.exports=function(e){return f(e),e.headers=e.headers||{},e.data=r.call(e,e.data,e.headers,e.transformRequest),e.headers=i.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return f(e),t.data=r.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return s(t)||(f(e),t&&t.response&&(t.response.data=r.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},9953:e=>{"use strict";e.exports=function(e,t,n,i,r){return e.config=t,n&&(e.code=n),e.request=i,e.response=r,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},4941:(e,t,n)=>{"use strict";var i=n(7485);e.exports=function(e,t){t=t||{};var n={};function r(e,t){return i.isPlainObject(e)&&i.isPlainObject(t)?i.merge(e,t):i.isPlainObject(t)?i.merge({},t):i.isArray(t)?t.slice():t}function s(n){return i.isUndefined(t[n])?i.isUndefined(e[n])?void 0:r(void 0,e[n]):r(e[n],t[n])}function o(e){if(!i.isUndefined(t[e]))return r(void 0,t[e])}function a(n){return i.isUndefined(t[n])?i.isUndefined(e[n])?void 0:r(void 0,e[n]):r(void 0,t[n])}function f(n){return n in t?r(e[n],t[n]):n in e?r(void 0,e[n]):void 0}var u={url:o,method:o,data:o,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:f};return i.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||s,r=t(e);i.isUndefined(r)&&t!==f||(n[e]=r)})),n}},4570:(e,t,n)=>{"use strict";var i=n(8524);e.exports=function(e,t,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(i("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},9212:(e,t,n)=>{"use strict";var i=n(7485),r=n(8396);e.exports=function(e,t,n){var s=this||r;return i.forEach(n,(function(n){e=n.call(s,e,t)})),e}},8396:(e,t,n)=>{"use strict";var i=n(7485),r=n(1446),s=n(9953),o=n(4832),a={"Content-Type":"application/x-www-form-urlencoded"};function f(e,t){!i.isUndefined(e)&&i.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,h={transitional:o,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=n(4387)),u),transformRequest:[function(e,t){return r(t,"Accept"),r(t,"Content-Type"),i.isFormData(e)||i.isArrayBuffer(e)||i.isBuffer(e)||i.isStream(e)||i.isFile(e)||i.isBlob(e)?e:i.isArrayBufferView(e)?e.buffer:i.isURLSearchParams(e)?(f(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):i.isObject(e)||t&&"application/json"===t["Content-Type"]?(f(t,"application/json"),function(e,t,n){if(i.isString(e))try{return(0,JSON.parse)(e),i.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||h.transitional,n=t&&t.silentJSONParsing,r=t&&t.forcedJSONParsing,o=!n&&"json"===this.responseType;if(o||r&&i.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(o){if("SyntaxError"===e.name)throw s(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};i.forEach(["delete","get","head"],(function(e){h.headers[e]={}})),i.forEach(["post","put","patch"],(function(e){h.headers[e]=i.merge(a)})),e.exports=h},4832:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},3345:e=>{e.exports={version:"0.26.1"}},875:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),i=0;i<n.length;i++)n[i]=arguments[i];return e.apply(t,n)}}},581:(e,t,n)=>{"use strict";var i=n(7485);function r(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var s;if(n)s=n(t);else if(i.isURLSearchParams(t))s=t.toString();else{var o=[];i.forEach(t,(function(e,t){null!=e&&(i.isArray(e)?t+="[]":e=[e],i.forEach(e,(function(e){i.isDate(e)?e=e.toISOString():i.isObject(e)&&(e=JSON.stringify(e)),o.push(r(t)+"="+r(e))})))})),s=o.join("&")}if(s){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},2288:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},2940:(e,t,n)=>{"use strict";var i=n(7485);e.exports=i.isStandardBrowserEnv()?{write:function(e,t,n,r,s,o){var a=[];a.push(e+"="+encodeURIComponent(t)),i.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),i.isString(r)&&a.push("path="+r),i.isString(s)&&a.push("domain="+s),!0===o&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},2642:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},5835:(e,t,n)=>{"use strict";var i=n(7485);e.exports=function(e){return i.isObject(e)&&!0===e.isAxiosError}},8338:(e,t,n)=>{"use strict";var i=n(7485);e.exports=i.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function r(e){var i=e;return t&&(n.setAttribute("href",i),i=n.href),n.setAttribute("href",i),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=r(window.location.href),function(t){var n=i.isString(t)?r(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},1446:(e,t,n)=>{"use strict";var i=n(7485);e.exports=function(e,t){i.forEach(e,(function(n,i){i!==t&&i.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[i])}))}},3845:(e,t,n)=>{"use strict";var i=n(7485),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,s,o={};return e?(i.forEach(e.split("\n"),(function(e){if(s=e.indexOf(":"),t=i.trim(e.substr(0,s)).toLowerCase(),n=i.trim(e.substr(s+1)),t){if(o[t]&&r.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([n]):o[t]?o[t]+", "+n:n}})),o):o}},5739:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},6144:(e,t,n)=>{"use strict";var i=n(3345).version,r={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){r[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var s={};r.transitional=function(e,t,n){function r(e,t){return"[Axios v"+i+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,i,o){if(!1===e)throw new Error(r(i," has been removed"+(t?" in "+t:"")));return t&&!s[i]&&(s[i]=!0,console.warn(r(i," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,i,o)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var i=Object.keys(e),r=i.length;r-- >0;){var s=i[r],o=t[s];if(o){var a=e[s],f=void 0===a||o(a,s,e);if(!0!==f)throw new TypeError("option "+s+" must be "+f)}else if(!0!==n)throw Error("Unknown option "+s)}},validators:r}},7485:(e,t,n)=>{"use strict";var i=n(875),r=Object.prototype.toString;function s(e){return Array.isArray(e)}function o(e){return void 0===e}function a(e){return"[object ArrayBuffer]"===r.call(e)}function f(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==r.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function h(e){return"[object Function]"===r.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,i=e.length;n<i;n++)t.call(null,e[n],n,e);else for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.call(null,e[r],r,e)}e.exports={isArray:s,isArrayBuffer:a,isBuffer:function(e){return null!==e&&!o(e)&&null!==e.constructor&&!o(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===r.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&a(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isPlainObject:u,isUndefined:o,isDate:function(e){return"[object Date]"===r.call(e)},isFile:function(e){return"[object File]"===r.call(e)},isBlob:function(e){return"[object Blob]"===r.call(e)},isFunction:h,isStream:function(e){return f(e)&&h(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===r.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function n(n,i){u(t[i])&&u(n)?t[i]=e(t[i],n):u(n)?t[i]=e({},n):s(n)?t[i]=n.slice():t[i]=n}for(var i=0,r=arguments.length;i<r;i++)l(arguments[i],n);return t},extend:function(e,t,n){return l(t,(function(t,r){e[r]=n&&"function"==typeof t?i(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},1546:function(e,t,n){var i,r,s;r=[n(6734)],i=function(e){"use strict";var t=function(e,n,r){if(void 0===e&&(e=t.DEFAULT_CAPACITY),void 0===n&&(n=t.DEFAULT_ENDIAN),void 0===r&&(r=t.DEFAULT_NOASSERT),!r){if((e|=0)<0)throw RangeError("Illegal capacity");n=!!n,r=!!r}this.buffer=0===e?i:new ArrayBuffer(e),this.view=0===e?null:new Uint8Array(this.buffer),this.offset=0,this.markedOffset=-1,this.limit=e,this.littleEndian=n,this.noAssert=r};t.VERSION="5.0.1",t.LITTLE_ENDIAN=!0,t.BIG_ENDIAN=!1,t.DEFAULT_CAPACITY=16,t.DEFAULT_ENDIAN=t.BIG_ENDIAN,t.DEFAULT_NOASSERT=!1,t.Long=e||null;var n=t.prototype;n.__isByteBuffer__,Object.defineProperty(n,"__isByteBuffer__",{value:!0,enumerable:!1,configurable:!1});var i=new ArrayBuffer(0),r=String.fromCharCode;function s(e){var t=0;return function(){return t<e.length?e.charCodeAt(t++):null}}function o(){var e=[],t=[];return function(){if(0===arguments.length)return t.join("")+r.apply(String,e);e.length+arguments.length>1024&&(t.push(r.apply(String,e)),e.length=0),Array.prototype.push.apply(e,arguments)}}function a(e,t,n,i,r){var s,o,a=8*r-i-1,f=(1<<a)-1,u=f>>1,h=-7,l=n?r-1:0,c=n?-1:1,d=e[t+l];for(l+=c,s=d&(1<<-h)-1,d>>=-h,h+=a;h>0;s=256*s+e[t+l],l+=c,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=i;h>0;o=256*o+e[t+l],l+=c,h-=8);if(0===s)s=1-u;else{if(s===f)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,i),s-=u}return(d?-1:1)*o*Math.pow(2,s-i)}function f(e,t,n,i,r,s){var o,a,f,u=8*s-r-1,h=(1<<u)-1,l=h>>1,c=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,d=i?0:s-1,g=i?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=h):(o=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-o))<1&&(o--,f*=2),(t+=o+l>=1?c/f:c*Math.pow(2,1-l))*f>=2&&(o++,f/=2),o+l>=h?(a=0,o=h):o+l>=1?(a=(t*f-1)*Math.pow(2,r),o+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,r),o=0));r>=8;e[n+d]=255&a,d+=g,a/=256,r-=8);for(o=o<<r|a,u+=r;u>0;e[n+d]=255&o,d+=g,o/=256,u-=8);e[n+d-g]|=128*p}t.accessor=function(){return Uint8Array},t.allocate=function(e,n,i){return new t(e,n,i)},t.concat=function(e,n,i,r){"boolean"!=typeof n&&"string"==typeof n||(r=i,i=n,n=void 0);for(var s,o=0,a=0,f=e.length;a<f;++a)t.isByteBuffer(e[a])||(e[a]=t.wrap(e[a],n)),(s=e[a].limit-e[a].offset)>0&&(o+=s);if(0===o)return new t(0,i,r);var u,h=new t(o,i,r);for(a=0;a<f;)(s=(u=e[a++]).limit-u.offset)<=0||(h.view.set(u.view.subarray(u.offset,u.limit),h.offset),h.offset+=s);return h.limit=h.offset,h.offset=0,h},t.isByteBuffer=function(e){return!0===(e&&e.__isByteBuffer__)},t.type=function(){return ArrayBuffer},t.wrap=function(e,i,r,s){if("string"!=typeof i&&(s=r,r=i,i=void 0),"string"==typeof e)switch(void 0===i&&(i="utf8"),i){case"base64":return t.fromBase64(e,r);case"hex":return t.fromHex(e,r);case"binary":return t.fromBinary(e,r);case"utf8":return t.fromUTF8(e,r);case"debug":return t.fromDebug(e,r);default:throw Error("Unsupported encoding: "+i)}if(null===e||"object"!=typeof e)throw TypeError("Illegal buffer");var o;if(t.isByteBuffer(e))return(o=n.clone.call(e)).markedOffset=-1,o;if(e instanceof Uint8Array)o=new t(0,r,s),e.length>0&&(o.buffer=e.buffer,o.offset=e.byteOffset,o.limit=e.byteOffset+e.byteLength,o.view=new Uint8Array(e.buffer));else if(e instanceof ArrayBuffer)o=new t(0,r,s),e.byteLength>0&&(o.buffer=e,o.offset=0,o.limit=e.byteLength,o.view=e.byteLength>0?new Uint8Array(e):null);else{if("[object Array]"!==Object.prototype.toString.call(e))throw TypeError("Illegal buffer");(o=new t(e.length,r,s)).limit=e.length;for(var a=0;a<e.length;++a)o.view[a]=e[a]}return o},n.writeBitSet=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if(!(e instanceof Array))throw TypeError("Illegal BitSet: Not an array");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var i,r=t,s=e.length,o=s>>3,a=0;for(t+=this.writeVarint32(s,t);o--;)i=1&!!e[a++]|(1&!!e[a++])<<1|(1&!!e[a++])<<2|(1&!!e[a++])<<3|(1&!!e[a++])<<4|(1&!!e[a++])<<5|(1&!!e[a++])<<6|(1&!!e[a++])<<7,this.writeByte(i,t++);if(a<s){var f=0;for(i=0;a<s;)i|=(1&!!e[a++])<<f++;this.writeByte(i,t++)}return n?(this.offset=t,this):t-r},n.readBitSet=function(e){var t=void 0===e;t&&(e=this.offset);var n,i=this.readVarint32(e),r=i.value,s=r>>3,o=0,a=[];for(e+=i.length;s--;)n=this.readByte(e++),a[o++]=!!(1&n),a[o++]=!!(2&n),a[o++]=!!(4&n),a[o++]=!!(8&n),a[o++]=!!(16&n),a[o++]=!!(32&n),a[o++]=!!(64&n),a[o++]=!!(128&n);if(o<r){var f=0;for(n=this.readByte(e++);o<r;)a[o++]=!!(n>>f++&1)}return t&&(this.offset=e),a},n.readBytes=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+e>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+"+e+") <= "+this.buffer.byteLength)}var i=this.slice(t,t+e);return n&&(this.offset+=e),i},n.writeBytes=n.append,n.writeInt8=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=1;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=1,this.view[t]=e,n&&(this.offset+=1),this},n.writeByte=n.writeInt8,n.readInt8=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n=this.view[e];return 128==(128&n)&&(n=-(255-n+1)),t&&(this.offset+=1),n},n.readByte=n.readInt8,n.writeUint8=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=1;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=1,this.view[t]=e,n&&(this.offset+=1),this},n.writeUInt8=n.writeUint8,n.readUint8=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n=this.view[e];return t&&(this.offset+=1),n},n.readUInt8=n.readUint8,n.writeInt16=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=2;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=2,this.littleEndian?(this.view[t+1]=(65280&e)>>>8,this.view[t]=255&e):(this.view[t]=(65280&e)>>>8,this.view[t+1]=255&e),n&&(this.offset+=2),this},n.writeShort=n.writeInt16,n.readInt16=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e],n|=this.view[e+1]<<8):(n=this.view[e]<<8,n|=this.view[e+1]),32768==(32768&n)&&(n=-(65535-n+1)),t&&(this.offset+=2),n},n.readShort=n.readInt16,n.writeUint16=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=2;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=2,this.littleEndian?(this.view[t+1]=(65280&e)>>>8,this.view[t]=255&e):(this.view[t]=(65280&e)>>>8,this.view[t+1]=255&e),n&&(this.offset+=2),this},n.writeUInt16=n.writeUint16,n.readUint16=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+2>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+2) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e],n|=this.view[e+1]<<8):(n=this.view[e]<<8,n|=this.view[e+1]),t&&(this.offset+=2),n},n.readUInt16=n.readUint16,n.writeInt32=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=4,this.littleEndian?(this.view[t+3]=e>>>24&255,this.view[t+2]=e>>>16&255,this.view[t+1]=e>>>8&255,this.view[t]=255&e):(this.view[t]=e>>>24&255,this.view[t+1]=e>>>16&255,this.view[t+2]=e>>>8&255,this.view[t+3]=255&e),n&&(this.offset+=4),this},n.writeInt=n.writeInt32,n.readInt32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0),n|=0,t&&(this.offset+=4),n},n.readInt=n.readInt32,n.writeUint32=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=4,this.littleEndian?(this.view[t+3]=e>>>24&255,this.view[t+2]=e>>>16&255,this.view[t+1]=e>>>8&255,this.view[t]=255&e):(this.view[t]=e>>>24&255,this.view[t+1]=e>>>16&255,this.view[t+2]=e>>>8&255,this.view[t+3]=255&e),n&&(this.offset+=4),this},n.writeUInt32=n.writeUint32,n.readUint32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var n=0;return this.littleEndian?(n=this.view[e+2]<<16,n|=this.view[e+1]<<8,n|=this.view[e],n+=this.view[e+3]<<24>>>0):(n=this.view[e+1]<<16,n|=this.view[e+2]<<8,n|=this.view[e+3],n+=this.view[e]<<24>>>0),t&&(this.offset+=4),n},n.readUInt32=n.readUint32,e&&(n.writeInt64=function(t,n){var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"==typeof t)t=e.fromNumber(t);else if("string"==typeof t)t=e.fromString(t);else if(!(t&&t instanceof e))throw TypeError("Illegal value: "+t+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t)),n+=8;var r=this.buffer.byteLength;n>r&&this.resize((r*=2)>n?r:n),n-=8;var s=t.low,o=t.high;return this.littleEndian?(this.view[n+3]=s>>>24&255,this.view[n+2]=s>>>16&255,this.view[n+1]=s>>>8&255,this.view[n]=255&s,n+=4,this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o):(this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o,n+=4,this.view[n]=s>>>24&255,this.view[n+1]=s>>>16&255,this.view[n+2]=s>>>8&255,this.view[n+3]=255&s),i&&(this.offset+=8),this},n.writeLong=n.writeInt64,n.readInt64=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var i=0,r=0;this.littleEndian?(i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0,t+=4,r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0,t+=4,i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0);var s=new e(i,r,!1);return n&&(this.offset+=8),s},n.readLong=n.readInt64,n.writeUint64=function(t,n){var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"==typeof t)t=e.fromNumber(t);else if("string"==typeof t)t=e.fromString(t);else if(!(t&&t instanceof e))throw TypeError("Illegal value: "+t+" (not an integer or Long)");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t)),n+=8;var r=this.buffer.byteLength;n>r&&this.resize((r*=2)>n?r:n),n-=8;var s=t.low,o=t.high;return this.littleEndian?(this.view[n+3]=s>>>24&255,this.view[n+2]=s>>>16&255,this.view[n+1]=s>>>8&255,this.view[n]=255&s,n+=4,this.view[n+3]=o>>>24&255,this.view[n+2]=o>>>16&255,this.view[n+1]=o>>>8&255,this.view[n]=255&o):(this.view[n]=o>>>24&255,this.view[n+1]=o>>>16&255,this.view[n+2]=o>>>8&255,this.view[n+3]=255&o,n+=4,this.view[n]=s>>>24&255,this.view[n+1]=s>>>16&255,this.view[n+2]=s>>>8&255,this.view[n+3]=255&s),i&&(this.offset+=8),this},n.writeUInt64=n.writeUint64,n.readUint64=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+8) <= "+this.buffer.byteLength)}var i=0,r=0;this.littleEndian?(i=this.view[t+2]<<16,i|=this.view[t+1]<<8,i|=this.view[t],i+=this.view[t+3]<<24>>>0,t+=4,r=this.view[t+2]<<16,r|=this.view[t+1]<<8,r|=this.view[t],r+=this.view[t+3]<<24>>>0):(r=this.view[t+1]<<16,r|=this.view[t+2]<<8,r|=this.view[t+3],r+=this.view[t]<<24>>>0,t+=4,i=this.view[t+1]<<16,i|=this.view[t+2]<<8,i|=this.view[t+3],i+=this.view[t]<<24>>>0);var s=new e(i,r,!0);return n&&(this.offset+=8),s},n.readUInt64=n.readUint64),n.writeFloat32=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e)throw TypeError("Illegal value: "+e+" (not a number)");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=4;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=4,f(this.view,e,t,this.littleEndian,23,4),n&&(this.offset+=4),this},n.writeFloat=n.writeFloat32,n.readFloat32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var n=a(this.view,e,this.littleEndian,23,4);return t&&(this.offset+=4),n},n.readFloat=n.readFloat32,n.writeFloat64=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof e)throw TypeError("Illegal value: "+e+" (not a number)");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}t+=8;var i=this.buffer.byteLength;return t>i&&this.resize((i*=2)>t?i:t),t-=8,f(this.view,e,t,this.littleEndian,52,8),n&&(this.offset+=8),this},n.writeDouble=n.writeFloat64,n.readFloat64=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+8>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+8) <= "+this.buffer.byteLength)}var n=a(this.view,e,this.littleEndian,52,8);return t&&(this.offset+=8),n},n.readDouble=n.readFloat64,t.MAX_VARINT32_BYTES=5,t.calculateVarint32=function(e){return(e>>>=0)<128?1:e<16384?2:e<1<<21?3:e<1<<28?4:5},t.zigZagEncode32=function(e){return((e|=0)<<1^e>>31)>>>0},t.zigZagDecode32=function(e){return e>>>1^-(1&e)|0},n.writeVarint32=function(e,n){var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var r,s=t.calculateVarint32(e);n+=s;var o=this.buffer.byteLength;for(n>o&&this.resize((o*=2)>n?o:n),n-=s,e>>>=0;e>=128;)r=127&e|128,this.view[n++]=r,e>>>=7;return this.view[n++]=e,i?(this.offset=n,this):s},n.writeVarint32ZigZag=function(e,n){return this.writeVarint32(t.zigZagEncode32(e),n)},n.readVarint32=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n,i=0,r=0;do{if(!this.noAssert&&e>this.limit){var s=Error("Truncated");throw s.truncated=!0,s}n=this.view[e++],i<5&&(r|=(127&n)<<7*i),++i}while(0!=(128&n));return r|=0,t?(this.offset=e,r):{value:r,length:i}},n.readVarint32ZigZag=function(e){var n=this.readVarint32(e);return"object"==typeof n?n.value=t.zigZagDecode32(n.value):n=t.zigZagDecode32(n),n},e&&(t.MAX_VARINT64_BYTES=10,t.calculateVarint64=function(t){"number"==typeof t?t=e.fromNumber(t):"string"==typeof t&&(t=e.fromString(t));var n=t.toInt()>>>0,i=t.shiftRightUnsigned(28).toInt()>>>0,r=t.shiftRightUnsigned(56).toInt()>>>0;return 0==r?0==i?n<16384?n<128?1:2:n<1<<21?3:4:i<16384?i<128?5:6:i<1<<21?7:8:r<128?9:10},t.zigZagEncode64=function(t){return"number"==typeof t?t=e.fromNumber(t,!1):"string"==typeof t?t=e.fromString(t,!1):!1!==t.unsigned&&(t=t.toSigned()),t.shiftLeft(1).xor(t.shiftRight(63)).toUnsigned()},t.zigZagDecode64=function(t){return"number"==typeof t?t=e.fromNumber(t,!1):"string"==typeof t?t=e.fromString(t,!1):!1!==t.unsigned&&(t=t.toSigned()),t.shiftRightUnsigned(1).xor(t.and(e.ONE).toSigned().negate()).toSigned()},n.writeVarint64=function(n,i){var r=void 0===i;if(r&&(i=this.offset),!this.noAssert){if("number"==typeof n)n=e.fromNumber(n);else if("string"==typeof n)n=e.fromString(n);else if(!(n&&n instanceof e))throw TypeError("Illegal value: "+n+" (not an integer or Long)");if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}"number"==typeof n?n=e.fromNumber(n,!1):"string"==typeof n?n=e.fromString(n,!1):!1!==n.unsigned&&(n=n.toSigned());var s=t.calculateVarint64(n),o=n.toInt()>>>0,a=n.shiftRightUnsigned(28).toInt()>>>0,f=n.shiftRightUnsigned(56).toInt()>>>0;i+=s;var u=this.buffer.byteLength;switch(i>u&&this.resize((u*=2)>i?u:i),i-=s,s){case 10:this.view[i+9]=f>>>7&1;case 9:this.view[i+8]=9!==s?128|f:127&f;case 8:this.view[i+7]=8!==s?a>>>21|128:a>>>21&127;case 7:this.view[i+6]=7!==s?a>>>14|128:a>>>14&127;case 6:this.view[i+5]=6!==s?a>>>7|128:a>>>7&127;case 5:this.view[i+4]=5!==s?128|a:127&a;case 4:this.view[i+3]=4!==s?o>>>21|128:o>>>21&127;case 3:this.view[i+2]=3!==s?o>>>14|128:o>>>14&127;case 2:this.view[i+1]=2!==s?o>>>7|128:o>>>7&127;case 1:this.view[i]=1!==s?128|o:127&o}return r?(this.offset+=s,this):s},n.writeVarint64ZigZag=function(e,n){return this.writeVarint64(t.zigZagEncode64(e),n)},n.readVarint64=function(t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+1) <= "+this.buffer.byteLength)}var i=t,r=0,s=0,o=0,a=0;if(r=127&(a=this.view[t++]),128&a&&(r|=(127&(a=this.view[t++]))<<7,(128&a||this.noAssert&&void 0===a)&&(r|=(127&(a=this.view[t++]))<<14,(128&a||this.noAssert&&void 0===a)&&(r|=(127&(a=this.view[t++]))<<21,(128&a||this.noAssert&&void 0===a)&&(s=127&(a=this.view[t++]),(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[t++]))<<7,(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[t++]))<<14,(128&a||this.noAssert&&void 0===a)&&(s|=(127&(a=this.view[t++]))<<21,(128&a||this.noAssert&&void 0===a)&&(o=127&(a=this.view[t++]),(128&a||this.noAssert&&void 0===a)&&(o|=(127&(a=this.view[t++]))<<7,128&a||this.noAssert&&void 0===a))))))))))throw Error("Buffer overrun");var f=e.fromBits(r|s<<28,s>>>4|o<<24,!1);return n?(this.offset=t,f):{value:f,length:t-i}},n.readVarint64ZigZag=function(n){var i=this.readVarint64(n);return i&&i.value instanceof e?i.value=t.zigZagDecode64(i.value):i=t.zigZagDecode64(i),i}),n.writeCString=function(e,t){var n=void 0===t;n&&(t=this.offset);var i,r=e.length;if(!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");for(i=0;i<r;++i)if(0===e.charCodeAt(i))throw RangeError("Illegal str: Contains NULL-characters");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}r=h.calculateUTF16asUTF8(s(e))[1],t+=r+1;var o=this.buffer.byteLength;return t>o&&this.resize((o*=2)>t?o:t),t-=r+1,h.encodeUTF16toUTF8(s(e),function(e){this.view[t++]=e}.bind(this)),this.view[t++]=0,n?(this.offset=t,this):r},n.readCString=function(e){var t=void 0===e;if(t&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var n,i=e,r=-1;return h.decodeUTF8toUTF16(function(){if(0===r)return null;if(e>=this.limit)throw RangeError("Illegal range: Truncated data, "+e+" < "+this.limit);return 0===(r=this.view[e++])?null:r}.bind(this),n=o(),!0),t?(this.offset=e,n()):{string:n(),length:e-i}},n.writeIString=function(e,t){var n=void 0===t;if(n&&(t=this.offset),!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var i,r=t;i=h.calculateUTF16asUTF8(s(e),this.noAssert)[1],t+=4+i;var o=this.buffer.byteLength;if(t>o&&this.resize((o*=2)>t?o:t),t-=4+i,this.littleEndian?(this.view[t+3]=i>>>24&255,this.view[t+2]=i>>>16&255,this.view[t+1]=i>>>8&255,this.view[t]=255&i):(this.view[t]=i>>>24&255,this.view[t+1]=i>>>16&255,this.view[t+2]=i>>>8&255,this.view[t+3]=255&i),t+=4,h.encodeUTF16toUTF8(s(e),function(e){this.view[t++]=e}.bind(this)),t!==r+4+i)throw RangeError("Illegal range: Truncated data, "+t+" == "+(t+4+i));return n?(this.offset=t,this):t-r},n.readIString=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+4>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+4) <= "+this.buffer.byteLength)}var i=e,r=this.readUint32(e),s=this.readUTF8String(r,t.METRICS_BYTES,e+=4);return e+=s.length,n?(this.offset=e,s.string):{string:s.string,length:e-i}},t.METRICS_CHARS="c",t.METRICS_BYTES="b",n.writeUTF8String=function(e,t){var n,i=void 0===t;if(i&&(t=this.offset),!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: "+t+" (not an integer)");if((t>>>=0)<0||t+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+t+" (+0) <= "+this.buffer.byteLength)}var r=t;n=h.calculateUTF16asUTF8(s(e))[1],t+=n;var o=this.buffer.byteLength;return t>o&&this.resize((o*=2)>t?o:t),t-=n,h.encodeUTF16toUTF8(s(e),function(e){this.view[t++]=e}.bind(this)),i?(this.offset=t,this):t-r},n.writeString=n.writeUTF8String,t.calculateUTF8Chars=function(e){return h.calculateUTF16asUTF8(s(e))[0]},t.calculateUTF8Bytes=function(e){return h.calculateUTF16asUTF8(s(e))[1]},t.calculateString=t.calculateUTF8Bytes,n.readUTF8String=function(e,n,i){"number"==typeof n&&(i=n,n=void 0);var r=void 0===i;if(r&&(i=this.offset),void 0===n&&(n=t.METRICS_CHARS),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal length: "+e+" (not an integer)");if(e|=0,"number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}var s,a=0,f=i;if(n===t.METRICS_CHARS){if(s=o(),h.decodeUTF8(function(){return a<e&&i<this.limit?this.view[i++]:null}.bind(this),(function(e){++a,h.UTF8toUTF16(e,s)})),a!==e)throw RangeError("Illegal range: Truncated data, "+a+" == "+e);return r?(this.offset=i,s()):{string:s(),length:i-f}}if(n===t.METRICS_BYTES){if(!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+e>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+"+e+") <= "+this.buffer.byteLength)}var u=i+e;if(h.decodeUTF8toUTF16(function(){return i<u?this.view[i++]:null}.bind(this),s=o(),this.noAssert),i!==u)throw RangeError("Illegal range: Truncated data, "+i+" == "+u);return r?(this.offset=i,s()):{string:s(),length:i-f}}throw TypeError("Unsupported metrics: "+n)},n.readString=n.readUTF8String,n.writeVString=function(e,n){var i=void 0===n;if(i&&(n=this.offset),!this.noAssert){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if("number"!=typeof n||n%1!=0)throw TypeError("Illegal offset: "+n+" (not an integer)");if((n>>>=0)<0||n+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+n+" (+0) <= "+this.buffer.byteLength)}var r,o,a=n;r=h.calculateUTF16asUTF8(s(e),this.noAssert)[1],o=t.calculateVarint32(r),n+=o+r;var f=this.buffer.byteLength;if(n>f&&this.resize((f*=2)>n?f:n),n-=o+r,n+=this.writeVarint32(r,n),h.encodeUTF16toUTF8(s(e),function(e){this.view[n++]=e}.bind(this)),n!==a+r+o)throw RangeError("Illegal range: Truncated data, "+n+" == "+(n+r+o));return i?(this.offset=n,this):n-a},n.readVString=function(e){var n=void 0===e;if(n&&(e=this.offset),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+1>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+1) <= "+this.buffer.byteLength)}var i=e,r=this.readVarint32(e),s=this.readUTF8String(r.value,t.METRICS_BYTES,e+=r.length);return e+=s.length,n?(this.offset=e,s.string):{string:s.string,length:e-i}},n.append=function(e,n,i){"number"!=typeof n&&"string"==typeof n||(i=n,n=void 0);var r=void 0===i;if(r&&(i=this.offset),!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}e instanceof t||(e=t.wrap(e,n));var s=e.limit-e.offset;if(s<=0)return this;i+=s;var o=this.buffer.byteLength;return i>o&&this.resize((o*=2)>i?o:i),i-=s,this.view.set(e.view.subarray(e.offset,e.limit),i),e.offset+=s,r&&(this.offset+=s),this},n.appendTo=function(e,t){return e.append(this,t),this},n.assert=function(e){return this.noAssert=!e,this},n.capacity=function(){return this.buffer.byteLength},n.clear=function(){return this.offset=0,this.limit=this.buffer.byteLength,this.markedOffset=-1,this},n.clone=function(e){var n=new t(0,this.littleEndian,this.noAssert);return e?(n.buffer=new ArrayBuffer(this.buffer.byteLength),n.view=new Uint8Array(n.buffer)):(n.buffer=this.buffer,n.view=this.view),n.offset=this.offset,n.markedOffset=this.markedOffset,n.limit=this.limit,n},n.compact=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}if(0===e&&t===this.buffer.byteLength)return this;var n=t-e;if(0===n)return this.buffer=i,this.view=null,this.markedOffset>=0&&(this.markedOffset-=e),this.offset=0,this.limit=0,this;var r=new ArrayBuffer(n),s=new Uint8Array(r);return s.set(this.view.subarray(e,t)),this.buffer=r,this.view=s,this.markedOffset>=0&&(this.markedOffset-=e),this.offset=0,this.limit=n,this},n.copy=function(e,n){if(void 0===e&&(e=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,e<0||e>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+n+" <= "+this.buffer.byteLength)}if(e===n)return new t(0,this.littleEndian,this.noAssert);var i=n-e,r=new t(i,this.littleEndian,this.noAssert);return r.offset=0,r.limit=i,r.markedOffset>=0&&(r.markedOffset-=e),this.copyTo(r,0,e,n),r},n.copyTo=function(e,n,i,r){var s,o;if(!this.noAssert&&!t.isByteBuffer(e))throw TypeError("Illegal target: Not a ByteBuffer");if(n=(o=void 0===n)?e.offset:0|n,i=(s=void 0===i)?this.offset:0|i,r=void 0===r?this.limit:0|r,n<0||n>e.buffer.byteLength)throw RangeError("Illegal target range: 0 <= "+n+" <= "+e.buffer.byteLength);if(i<0||r>this.buffer.byteLength)throw RangeError("Illegal source range: 0 <= "+i+" <= "+this.buffer.byteLength);var a=r-i;return 0===a?e:(e.ensureCapacity(n+a),e.view.set(this.view.subarray(i,r),n),s&&(this.offset+=a),o&&(e.offset+=a),this)},n.ensureCapacity=function(e){var t=this.buffer.byteLength;return t<e?this.resize((t*=2)>e?t:e):this},n.fill=function(e,t,n){var i=void 0===t;if(i&&(t=this.offset),"string"==typeof e&&e.length>0&&(e=e.charCodeAt(0)),void 0===t&&(t=this.offset),void 0===n&&(n=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal value: "+e+" (not an integer)");if(e|=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal begin: Not an integer");if(t>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal end: Not an integer");if(n>>>=0,t<0||t>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+n+" <= "+this.buffer.byteLength)}if(t>=n)return this;for(;t<n;)this.view[t++]=e;return i&&(this.offset=t),this},n.flip=function(){return this.limit=this.offset,this.offset=0,this},n.mark=function(e){if(e=void 0===e?this.offset:e,!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal offset: "+e+" (not an integer)");if((e>>>=0)<0||e+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+e+" (+0) <= "+this.buffer.byteLength)}return this.markedOffset=e,this},n.order=function(e){if(!this.noAssert&&"boolean"!=typeof e)throw TypeError("Illegal littleEndian: Not a boolean");return this.littleEndian=!!e,this},n.LE=function(e){return this.littleEndian=void 0===e||!!e,this},n.BE=function(e){return this.littleEndian=void 0!==e&&!e,this},n.prepend=function(e,n,i){"number"!=typeof n&&"string"==typeof n||(i=n,n=void 0);var r=void 0===i;if(r&&(i=this.offset),!this.noAssert){if("number"!=typeof i||i%1!=0)throw TypeError("Illegal offset: "+i+" (not an integer)");if((i>>>=0)<0||i+0>this.buffer.byteLength)throw RangeError("Illegal offset: 0 <= "+i+" (+0) <= "+this.buffer.byteLength)}e instanceof t||(e=t.wrap(e,n));var s=e.limit-e.offset;if(s<=0)return this;var o=s-i;if(o>0){var a=new ArrayBuffer(this.buffer.byteLength+o),f=new Uint8Array(a);f.set(this.view.subarray(i,this.buffer.byteLength),s),this.buffer=a,this.view=f,this.offset+=o,this.markedOffset>=0&&(this.markedOffset+=o),this.limit+=o,i+=o}else new Uint8Array(this.buffer);return this.view.set(e.view.subarray(e.offset,e.limit),i-s),e.offset=e.limit,r&&(this.offset-=s),this},n.prependTo=function(e,t){return e.prepend(this,t),this},n.printDebug=function(e){"function"!=typeof e&&(e=console.log.bind(console)),e(this.toString()+"\n-------------------------------------------------------------------\n"+this.toDebug(!0))},n.remaining=function(){return this.limit-this.offset},n.reset=function(){return this.markedOffset>=0?(this.offset=this.markedOffset,this.markedOffset=-1):this.offset=0,this},n.resize=function(e){if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal capacity: "+e+" (not an integer)");if((e|=0)<0)throw RangeError("Illegal capacity: 0 <= "+e)}if(this.buffer.byteLength<e){var t=new ArrayBuffer(e),n=new Uint8Array(t);n.set(this.view),this.buffer=t,this.view=n}return this},n.reverse=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}return e===t||Array.prototype.reverse.call(this.view.subarray(e,t)),this},n.skip=function(e){if(!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal length: "+e+" (not an integer)");e|=0}var t=this.offset+e;if(!this.noAssert&&(t<0||t>this.buffer.byteLength))throw RangeError("Illegal length: 0 <= "+this.offset+" + "+e+" <= "+this.buffer.byteLength);return this.offset=t,this},n.slice=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}var n=this.clone();return n.offset=e,n.limit=t,n},n.toBuffer=function(e){var t=this.offset,n=this.limit;if(!this.noAssert){if("number"!=typeof t||t%1!=0)throw TypeError("Illegal offset: Not an integer");if(t>>>=0,"number"!=typeof n||n%1!=0)throw TypeError("Illegal limit: Not an integer");if(n>>>=0,t<0||t>n||n>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+t+" <= "+n+" <= "+this.buffer.byteLength)}if(!e&&0===t&&n===this.buffer.byteLength)return this.buffer;if(t===n)return i;var r=new ArrayBuffer(n-t);return new Uint8Array(r).set(new Uint8Array(this.buffer).subarray(t,n),0),r},n.toArrayBuffer=n.toBuffer,n.toString=function(e,t,n){if(void 0===e)return"ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";switch("number"==typeof e&&(n=t=e="utf8"),e){case"utf8":return this.toUTF8(t,n);case"base64":return this.toBase64(t,n);case"hex":return this.toHex(t,n);case"binary":return this.toBinary(t,n);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+e)}};var u=function(){for(var e={},t=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],n=[],i=0,r=t.length;i<r;++i)n[t[i]]=i;return e.encode=function(e,n){for(var i,r;null!==(i=e());)n(t[i>>2&63]),r=(3&i)<<4,null!==(i=e())?(n(t[63&((r|=i>>4&15)|i>>4&15)]),r=(15&i)<<2,null!==(i=e())?(n(t[63&(r|i>>6&3)]),n(t[63&i])):(n(t[63&r]),n(61))):(n(t[63&r]),n(61),n(61))},e.decode=function(e,t){var i,r,s;function o(e){throw Error("Illegal character code: "+e)}for(;null!==(i=e());)if(void 0===(r=n[i])&&o(i),null!==(i=e())&&(void 0===(s=n[i])&&o(i),t(r<<2>>>0|(48&s)>>4),null!==(i=e()))){if(void 0===(r=n[i])){if(61===i)break;o(i)}if(t((15&s)<<4>>>0|(60&r)>>2),null!==(i=e())){if(void 0===(s=n[i])){if(61===i)break;o(i)}t((3&r)<<6>>>0|s)}}},e.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)},e}();n.toBase64=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),t|=0,(e|=0)<0||t>this.capacity||e>t)throw RangeError("begin, end");var n;return u.encode(function(){return e<t?this.view[e++]:null}.bind(this),n=o()),n()},t.fromBase64=function(e,n){if("string"!=typeof e)throw TypeError("str");var i=new t(e.length/4*3,n),r=0;return u.decode(s(e),(function(e){i.view[r++]=e})),i.limit=r,i},t.btoa=function(e){return t.fromBinary(e).toBase64()},t.atob=function(e){return t.fromBase64(e).toBinary()},n.toBinary=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),t|=0,(e|=0)<0||t>this.capacity()||e>t)throw RangeError("begin, end");if(e===t)return"";for(var n=[],i=[];e<t;)n.push(this.view[e++]),n.length>=1024&&(i.push(String.fromCharCode.apply(String,n)),n=[]);return i.join("")+String.fromCharCode.apply(String,n)},t.fromBinary=function(e,n){if("string"!=typeof e)throw TypeError("str");for(var i,r=0,s=e.length,o=new t(s,n);r<s;){if((i=e.charCodeAt(r))>255)throw RangeError("illegal char code: "+i);o.view[r++]=i}return o.limit=s,o},n.toDebug=function(e){for(var t,n=-1,i=this.buffer.byteLength,r="",s="",o="";n<i;){if(-1!==n&&(r+=(t=this.view[n])<16?"0"+t.toString(16).toUpperCase():t.toString(16).toUpperCase(),e&&(s+=t>32&&t<127?String.fromCharCode(t):".")),++n,e&&n>0&&n%16==0&&n!==i){for(;r.length<51;)r+=" ";o+=r+s+"\n",r=s=""}n===this.offset&&n===this.limit?r+=n===this.markedOffset?"!":"|":n===this.offset?r+=n===this.markedOffset?"[":"<":n===this.limit?r+=n===this.markedOffset?"]":">":r+=n===this.markedOffset?"'":e||0!==n&&n!==i?" ":""}if(e&&" "!==r){for(;r.length<51;)r+=" ";o+=r+s+"\n"}return e?o:r},t.fromDebug=function(e,n,i){for(var r,s,o=e.length,a=new t((o+1)/3|0,n,i),f=0,u=0,h=!1,l=!1,c=!1,d=!1,g=!1;f<o;){switch(r=e.charAt(f++)){case"!":if(!i){if(l||c||d){g=!0;break}l=c=d=!0}a.offset=a.markedOffset=a.limit=u,h=!1;break;case"|":if(!i){if(l||d){g=!0;break}l=d=!0}a.offset=a.limit=u,h=!1;break;case"[":if(!i){if(l||c){g=!0;break}l=c=!0}a.offset=a.markedOffset=u,h=!1;break;case"<":if(!i){if(l){g=!0;break}l=!0}a.offset=u,h=!1;break;case"]":if(!i){if(d||c){g=!0;break}d=c=!0}a.limit=a.markedOffset=u,h=!1;break;case">":if(!i){if(d){g=!0;break}d=!0}a.limit=u,h=!1;break;case"'":if(!i){if(c){g=!0;break}c=!0}a.markedOffset=u,h=!1;break;case" ":h=!1;break;default:if(!i&&h){g=!0;break}if(s=parseInt(r+e.charAt(f++),16),!i&&(isNaN(s)||s<0||s>255))throw TypeError("Illegal str: Not a debug encoded string");a.view[u++]=s,h=!0}if(g)throw TypeError("Illegal str: Invalid symbol at "+f)}if(!i){if(!l||!d)throw TypeError("Illegal str: Missing offset or limit");if(u<a.buffer.byteLength)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+u+" < "+o)}return a},n.toHex=function(e,t){if(e=void 0===e?this.offset:e,t=void 0===t?this.limit:t,!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}for(var n,i=new Array(t-e);e<t;)(n=this.view[e++])<16?i.push("0",n.toString(16)):i.push(n.toString(16));return i.join("")},t.fromHex=function(e,n,i){if(!i){if("string"!=typeof e)throw TypeError("Illegal str: Not a string");if(e.length%2!=0)throw TypeError("Illegal str: Length not a multiple of 2")}for(var r,s=e.length,o=new t(s/2|0,n),a=0,f=0;a<s;a+=2){if(r=parseInt(e.substring(a,a+2),16),!i&&(!isFinite(r)||r<0||r>255))throw TypeError("Illegal str: Contains non-hex characters");o.view[f++]=r}return o.limit=f,o};var h=function(){var e={MAX_CODEPOINT:1114111,encodeUTF8:function(e,t){var n=null;for("number"==typeof e&&(n=e,e=function(){return null});null!==n||null!==(n=e());)n<128?t(127&n):n<2048?(t(n>>6&31|192),t(63&n|128)):n<65536?(t(n>>12&15|224),t(n>>6&63|128),t(63&n|128)):(t(n>>18&7|240),t(n>>12&63|128),t(n>>6&63|128),t(63&n|128)),n=null},decodeUTF8:function(e,t){for(var n,i,r,s,o=function(e){e=e.slice(0,e.indexOf(null));var t=Error(e.toString());throw t.name="TruncatedError",t.bytes=e,t};null!==(n=e());)if(0==(128&n))t(n);else if(192==(224&n))null===(i=e())&&o([n,i]),t((31&n)<<6|63&i);else if(224==(240&n))(null===(i=e())||null===(r=e()))&&o([n,i,r]),t((15&n)<<12|(63&i)<<6|63&r);else{if(240!=(248&n))throw RangeError("Illegal starting byte: "+n);(null===(i=e())||null===(r=e())||null===(s=e()))&&o([n,i,r,s]),t((7&n)<<18|(63&i)<<12|(63&r)<<6|63&s)}},UTF16toUTF8:function(e,t){for(var n,i=null;null!==(n=null!==i?i:e());)n>=55296&&n<=57343&&null!==(i=e())&&i>=56320&&i<=57343?(t(1024*(n-55296)+i-56320+65536),i=null):t(n);null!==i&&t(i)},UTF8toUTF16:function(e,t){var n=null;for("number"==typeof e&&(n=e,e=function(){return null});null!==n||null!==(n=e());)n<=65535?t(n):(t(55296+((n-=65536)>>10)),t(n%1024+56320)),n=null},encodeUTF16toUTF8:function(t,n){e.UTF16toUTF8(t,(function(t){e.encodeUTF8(t,n)}))},decodeUTF8toUTF16:function(t,n){e.decodeUTF8(t,(function(t){e.UTF8toUTF16(t,n)}))},calculateCodePoint:function(e){return e<128?1:e<2048?2:e<65536?3:4},calculateUTF8:function(e){for(var t,n=0;null!==(t=e());)n+=t<128?1:t<2048?2:t<65536?3:4;return n},calculateUTF16asUTF8:function(t){var n=0,i=0;return e.UTF16toUTF8(t,(function(e){++n,i+=e<128?1:e<2048?2:e<65536?3:4})),[n,i]}};return e}();return n.toUTF8=function(e,t){if(void 0===e&&(e=this.offset),void 0===t&&(t=this.limit),!this.noAssert){if("number"!=typeof e||e%1!=0)throw TypeError("Illegal begin: Not an integer");if(e>>>=0,"number"!=typeof t||t%1!=0)throw TypeError("Illegal end: Not an integer");if(t>>>=0,e<0||e>t||t>this.buffer.byteLength)throw RangeError("Illegal range: 0 <= "+e+" <= "+t+" <= "+this.buffer.byteLength)}var n;try{h.decodeUTF8toUTF16(function(){return e<t?this.view[e++]:null}.bind(this),n=o())}catch(n){if(e!==t)throw RangeError("Illegal range: Truncated data, "+e+" != "+t)}return n()},t.fromUTF8=function(e,n,i){if(!i&&"string"!=typeof e)throw TypeError("Illegal str: Not a string");var r=new t(h.calculateUTF16asUTF8(s(e),!0)[1],n,i),o=0;return h.encodeUTF16toUTF8(s(e),(function(e){r.view[o++]=e})),r.limit=o,r},t},void 0===(s=i.apply(t,r))||(e.exports=s)},6734:function(e,t){var n,i;void 0===(i="function"==typeof(n=function(){"use strict";function e(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function t(e){return!0===(e&&e.__isLong__)}e.prototype.__isLong__,Object.defineProperty(e.prototype,"__isLong__",{value:!0,enumerable:!1,configurable:!1}),e.isLong=t;var n={},i={};function r(e,t){var r,s,a;return t?(a=0<=(e>>>=0)&&e<256)&&(s=i[e])?s:(r=o(e,(0|e)<0?-1:0,!0),a&&(i[e]=r),r):(a=-128<=(e|=0)&&e<128)&&(s=n[e])?s:(r=o(e,e<0?-1:0,!1),a&&(n[e]=r),r)}function s(e,t){if(isNaN(e)||!isFinite(e))return t?p:g;if(t){if(e<0)return p;if(e>=l)return m}else{if(e<=-c)return E;if(e+1>=c)return w}return e<0?s(-e,t).neg():o(e%h|0,e/h|0,t)}function o(t,n,i){return new e(t,n,i)}e.fromInt=r,e.fromNumber=s,e.fromBits=o;var a=Math.pow;function f(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var i;if((i=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===i)return f(e.substring(1),t,n).neg();for(var r=s(a(n,8)),o=g,u=0;u<e.length;u+=8){var h=Math.min(8,e.length-u),l=parseInt(e.substring(u,u+h),n);if(h<8){var c=s(a(n,h));o=o.mul(c).add(s(l))}else o=(o=o.mul(r)).add(s(l))}return o.unsigned=t,o}function u(t){return t instanceof e?t:"number"==typeof t?s(t):"string"==typeof t?f(t):o(t.low,t.high,t.unsigned)}e.fromString=f,e.fromValue=u;var h=4294967296,l=h*h,c=l/2,d=r(1<<24),g=r(0);e.ZERO=g;var p=r(0,!0);e.UZERO=p;var v=r(1);e.ONE=v;var y=r(1,!0);e.UONE=y;var b=r(-1);e.NEG_ONE=b;var w=o(-1,2147483647,!1);e.MAX_VALUE=w;var m=o(-1,-1,!0);e.MAX_UNSIGNED_VALUE=m;var E=o(0,-2147483648,!1);e.MIN_VALUE=E;var _=e.prototype;return _.toInt=function(){return this.unsigned?this.low>>>0:this.low},_.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},_.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var t=s(e),n=this.div(t),i=n.mul(t).sub(this);return n.toString(e)+i.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=s(a(e,6),this.unsigned),o=this,f="";;){var u=o.div(r),h=(o.sub(u.mul(r)).toInt()>>>0).toString(e);if((o=u).isZero())return h+f;for(;h.length<6;)h="0"+h;f=""+h+f}},_.getHighBits=function(){return this.high},_.getHighBitsUnsigned=function(){return this.high>>>0},_.getLowBits=function(){return this.low},_.getLowBitsUnsigned=function(){return this.low>>>0},_.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},_.isZero=function(){return 0===this.high&&0===this.low},_.isNegative=function(){return!this.unsigned&&this.high<0},_.isPositive=function(){return this.unsigned||this.high>=0},_.isOdd=function(){return 1==(1&this.low)},_.isEven=function(){return 0==(1&this.low)},_.equals=function(e){return t(e)||(e=u(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},_.eq=_.equals,_.notEquals=function(e){return!this.eq(e)},_.neq=_.notEquals,_.lessThan=function(e){return this.comp(e)<0},_.lt=_.lessThan,_.lessThanOrEqual=function(e){return this.comp(e)<=0},_.lte=_.lessThanOrEqual,_.greaterThan=function(e){return this.comp(e)>0},_.gt=_.greaterThan,_.greaterThanOrEqual=function(e){return this.comp(e)>=0},_.gte=_.greaterThanOrEqual,_.compare=function(e){if(t(e)||(e=u(e)),this.eq(e))return 0;var n=this.isNegative(),i=e.isNegative();return n&&!i?-1:!n&&i?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},_.comp=_.compare,_.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(v)},_.neg=_.negate,_.add=function(e){t(e)||(e=u(e));var n=this.high>>>16,i=65535&this.high,r=this.low>>>16,s=65535&this.low,a=e.high>>>16,f=65535&e.high,h=e.low>>>16,l=0,c=0,d=0,g=0;return d+=(g+=s+(65535&e.low))>>>16,c+=(d+=r+h)>>>16,l+=(c+=i+f)>>>16,l+=n+a,o((d&=65535)<<16|(g&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},_.subtract=function(e){return t(e)||(e=u(e)),this.add(e.neg())},_.sub=_.subtract,_.multiply=function(e){if(this.isZero())return g;if(t(e)||(e=u(e)),e.isZero())return g;if(this.eq(E))return e.isOdd()?E:g;if(e.eq(E))return this.isOdd()?E:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(d)&&e.lt(d))return s(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,i=65535&this.high,r=this.low>>>16,a=65535&this.low,f=e.high>>>16,h=65535&e.high,l=e.low>>>16,c=65535&e.low,p=0,v=0,y=0,b=0;return y+=(b+=a*c)>>>16,v+=(y+=r*c)>>>16,y&=65535,v+=(y+=a*l)>>>16,p+=(v+=i*c)>>>16,v&=65535,p+=(v+=r*l)>>>16,v&=65535,p+=(v+=a*h)>>>16,p+=n*c+i*l+r*h+a*f,o((y&=65535)<<16|(b&=65535),(p&=65535)<<16|(v&=65535),this.unsigned)},_.mul=_.multiply,_.divide=function(e){if(t(e)||(e=u(e)),e.isZero())throw Error("division by zero");if(this.isZero())return this.unsigned?p:g;var n,i,r;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return p;if(e.gt(this.shru(1)))return y;r=p}else{if(this.eq(E))return e.eq(v)||e.eq(b)?E:e.eq(E)?v:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?v:b:(i=this.sub(e.mul(n)),r=n.add(i.div(e)));if(e.eq(E))return this.unsigned?p:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=g}for(i=this;i.gte(e);){n=Math.max(1,Math.floor(i.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),f=o<=48?1:a(2,o-48),h=s(n),l=h.mul(e);l.isNegative()||l.gt(i);)l=(h=s(n-=f,this.unsigned)).mul(e);h.isZero()&&(h=v),r=r.add(h),i=i.sub(l)}return r},_.div=_.divide,_.modulo=function(e){return t(e)||(e=u(e)),this.sub(this.div(e).mul(e))},_.mod=_.modulo,_.not=function(){return o(~this.low,~this.high,this.unsigned)},_.and=function(e){return t(e)||(e=u(e)),o(this.low&e.low,this.high&e.high,this.unsigned)},_.or=function(e){return t(e)||(e=u(e)),o(this.low|e.low,this.high|e.high,this.unsigned)},_.xor=function(e){return t(e)||(e=u(e)),o(this.low^e.low,this.high^e.high,this.unsigned)},_.shiftLeft=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?o(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):o(0,this.low<<e-32,this.unsigned)},_.shl=_.shiftLeft,_.shiftRight=function(e){return t(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?o(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):o(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},_.shr=_.shiftRight,_.shiftRightUnsigned=function(e){if(t(e)&&(e=e.toInt()),0==(e&=63))return this;var n=this.high;return e<32?o(this.low>>>e|n<<32-e,n>>>e,this.unsigned):o(32===e?n:n>>>e-32,0,this.unsigned)},_.shru=_.shiftRightUnsigned,_.toSigned=function(){return this.unsigned?o(this.low,this.high,!1):this},_.toUnsigned=function(){return this.unsigned?this:o(this.low,this.high,!0)},_.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},_.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24&255,255&e,e>>>8&255,e>>>16&255,e>>>24&255]},_.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t]},e})?n.apply(t,[]):n)||(e.exports=i)},5618:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventDisposer=t.Event=void 0;var n=function(){function e(){var e=this;this.event={stack:[],index:0},this.ended=!1,this.execute=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(e.ended)throw new Error("event completed");for(var i=0,r=e.event.stack;i<r.length;i++){var s=r[i];s.execute.apply(s,t)}},this.complete=function(){if(e.ended)throw new Error("event completed");for(var t=0,n=e.event.stack;t<n.length;t++){var i=n[t];i.complete&&i.complete()}e.allUnsubscribe(),e.ended=!0},this.error=function(t){if(e.ended)throw new Error("event completed");for(var n=0,i=e.event.stack;n<i.length;n++){var r=i[n];r.error&&r.error(t)}e.allUnsubscribe()},this.allUnsubscribe=function(){if(e.ended)throw new Error("event completed");e.event={stack:[],index:0}},this.subscribe=function(t,n,i){if(e.ended)throw new Error("event completed");var r=e.event.index;e.event.stack.push({execute:t,id:r,complete:n,error:i}),e.event.index++;var s=function(){e.event.stack=e.event.stack.filter((function(e){return e.id!==r&&e}))};return{unSubscribe:s,disposer:function(e){e.push(s)}}},this.once=function(t,n,i){var r=e.subscribe((function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];r.unSubscribe(),t.apply(void 0,e)}),n,i)},this.watch=function(t,n){return new Promise((function(i,r){var s=n&&setTimeout((function(){r("Event watch timeout")}),n),o=e.subscribe((function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=t.apply(void 0,e);r&&(s&&clearTimeout(s),o(),i(e))})).unSubscribe}))},this.asPromise=function(t){return new Promise((function(n,i){var r=t&&setTimeout((function(){i("Event asPromise timeout")}),t);e.once((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];r&&clearTimeout(r),n(e)}),(function(){r&&clearTimeout(r),n([])}),(function(e){r&&clearTimeout(r),i(e)}))}))}}return Object.defineProperty(e.prototype,"returnTrigger",{get:function(){var e=this;return{execute:e.execute,error:e.error,complete:e.complete}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"returnListener",{get:function(){var e=this;return{subscribe:e.subscribe,once:e.once,asPromise:e.asPromise}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this.event.stack.length},enumerable:!1,configurable:!0}),e}();t.Event=n;var i=function(){function e(){this._disposer=[]}return e.prototype.push=function(e){this._disposer.push(e)},e.prototype.dispose=function(){this._disposer.forEach((function(e){return e()})),this._disposer=[]},e}();t.EventDisposer=i},5373:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Buffer=void 0;var i=n(5618);t.Buffer=function(e,t){var n=new i.Event,r=[],s=!1;return t.subscribe((function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];s||r.length!==e||(r.forEach((function(e){return n.execute.apply(n,e)})),s=!0),s?n.execute.apply(n,t):r.push(t)})),{subscribe:n.subscribe,asPromise:n.asPromise,once:n.once}}},5124:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(5618);t.default=function(){var e=[];return{event:function(){var t=new i.Event;return e.push(t),t},finishAll:function(){e.forEach((function(e){return e.allUnsubscribe()})),e=[]}}}},167:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(9312),r=i.__importDefault(n(1389)),s=function(){function e(){this.candidates={}}return e.prototype.exist=function(e){return Object.keys(this.candidates).includes(e)},e.prototype.delete=function(e){delete this.candidates[e]},e.prototype.create=function(e,t){return i.__awaiter(this,void 0,void 0,(function(){var n,s;return i.__generator(this,(function(i){switch(i.label){case 0:return this.exist(e)?[2,{exist:this.candidates[e]}]:[3,1];case 1:return n=new r.default,this.candidates[e]=n,[4,t()];case 2:return s=i.sent(),n.execute.apply(n,s),this.delete(e),[2,{result:s}]}}))}))},e}();t.default=s},1389:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(9312),r=n(5618);t.default=r.Event,i.__exportStar(n(5618),t),i.__exportStar(n(5124),t),i.__exportStar(n(167),t),i.__exportStar(n(5373),t)},9312:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>s,__asyncDelegator:()=>E,__asyncGenerator:()=>m,__asyncValues:()=>_,__await:()=>w,__awaiter:()=>h,__classPrivateFieldGet:()=>O,__classPrivateFieldSet:()=>U,__createBinding:()=>c,__decorate:()=>a,__exportStar:()=>d,__extends:()=>r,__generator:()=>l,__importDefault:()=>S,__importStar:()=>A,__makeTemplateObject:()=>T,__metadata:()=>u,__param:()=>f,__read:()=>p,__rest:()=>o,__spread:()=>v,__spreadArray:()=>b,__spreadArrays:()=>y,__values:()=>g});var i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},i(e,t)};function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var s=function(){return s=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},s.apply(this,arguments)};function o(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n}function a(e,t,n,i){var r,s=arguments.length,o=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,i);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(s<3?r(o):s>3?r(t,n,o):r(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o}function f(e,t){return function(n,i){t(n,i,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function h(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{f(i.next(e))}catch(e){s(e)}}function a(e){try{f(i.throw(e))}catch(e){s(e)}}function f(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}f((i=i.apply(e,t||[])).next())}))}function l(e,t){var n,i,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,i&&(r=2&s[0]?i.return:s[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,s[1])).done)return r;switch(i=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,i=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],i=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}var c=Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]};function d(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||c(t,e,n)}function g(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function p(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,r,s=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(i=s.next()).done;)o.push(i.value)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return o}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(p(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var i=Array(e),r=0;for(t=0;t<n;t++)for(var s=arguments[t],o=0,a=s.length;o<a;o++,r++)i[r]=s[o];return i}function b(e,t){for(var n=0,i=t.length,r=e.length;n<i;n++,r++)e[r]=t[n];return e}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function m(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,r=n.apply(e,t||[]),s=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(e){r[e]&&(i[e]=function(t){return new Promise((function(n,i){s.push([e,t,n,i])>1||a(e,t)}))})}function a(e,t){try{(n=r[e](t)).value instanceof w?Promise.resolve(n.value.v).then(f,u):h(s[0][2],n)}catch(e){h(s[0][3],e)}var n}function f(e){a("next",e)}function u(e){a("throw",e)}function h(e,t){e(t),s.shift(),s.length&&a(s[0][0],s[0][1])}}function E(e){var t,n;return t={},i("next"),i("throw",(function(e){throw e})),i("return"),t[Symbol.iterator]=function(){return this},t;function i(i,r){t[i]=e[i]?function(t){return(n=!n)?{value:w(e[i](t)),done:"return"===i}:r?r(t):t}:r}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=g(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(i,r){!function(e,t,n,i){Promise.resolve(i).then((function(t){e({value:t,done:n})}),t)}(i,r,(t=e[n](t)).done,t.value)}))}}}function T(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var I=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&c(t,e,n);return I(t,e),t}function S(e){return e&&e.__esModule?e:{default:e}}function O(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function U(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},338:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return f.default}});var i=c(n(3925)),r=c(n(2220)),s=c(n(8015)),o=c(n(197)),a=c(n(5529)),f=c(n(923)),u=c(n(3447)),h=c(n(3584)),l=c(n(5842));function c(e){return e&&e.__esModule?e:{default:e}}},7809:(e,t)=>{"use strict";function n(e){return 14+(e+64>>>9<<4)+1}function i(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function r(e,t,n,r,s,o){return i((a=i(i(t,e),i(r,o)))<<(f=s)|a>>>32-f,n);var a,f}function s(e,t,n,i,s,o,a){return r(t&n|~t&i,e,t,s,o,a)}function o(e,t,n,i,s,o,a){return r(t&i|n&~i,e,t,s,o,a)}function a(e,t,n,i,s,o,a){return r(t^n^i,e,t,s,o,a)}function f(e,t,n,i,s,o,a){return r(n^(t|~i),e,t,s,o,a)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length,i="0123456789abcdef";for(let r=0;r<n;r+=8){const n=e[r>>5]>>>r%32&255,s=parseInt(i.charAt(n>>>4&15)+i.charAt(15&n),16);t.push(s)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[n(t)-1]=t;let r=1732584193,u=-271733879,h=-1732584194,l=271733878;for(let t=0;t<e.length;t+=16){const n=r,c=u,d=h,g=l;r=s(r,u,h,l,e[t],7,-680876936),l=s(l,r,u,h,e[t+1],12,-389564586),h=s(h,l,r,u,e[t+2],17,606105819),u=s(u,h,l,r,e[t+3],22,-1044525330),r=s(r,u,h,l,e[t+4],7,-176418897),l=s(l,r,u,h,e[t+5],12,1200080426),h=s(h,l,r,u,e[t+6],17,-1473231341),u=s(u,h,l,r,e[t+7],22,-45705983),r=s(r,u,h,l,e[t+8],7,1770035416),l=s(l,r,u,h,e[t+9],12,-1958414417),h=s(h,l,r,u,e[t+10],17,-42063),u=s(u,h,l,r,e[t+11],22,-1990404162),r=s(r,u,h,l,e[t+12],7,1804603682),l=s(l,r,u,h,e[t+13],12,-40341101),h=s(h,l,r,u,e[t+14],17,-1502002290),u=s(u,h,l,r,e[t+15],22,1236535329),r=o(r,u,h,l,e[t+1],5,-165796510),l=o(l,r,u,h,e[t+6],9,-1069501632),h=o(h,l,r,u,e[t+11],14,643717713),u=o(u,h,l,r,e[t],20,-373897302),r=o(r,u,h,l,e[t+5],5,-701558691),l=o(l,r,u,h,e[t+10],9,38016083),h=o(h,l,r,u,e[t+15],14,-660478335),u=o(u,h,l,r,e[t+4],20,-405537848),r=o(r,u,h,l,e[t+9],5,568446438),l=o(l,r,u,h,e[t+14],9,-1019803690),h=o(h,l,r,u,e[t+3],14,-187363961),u=o(u,h,l,r,e[t+8],20,1163531501),r=o(r,u,h,l,e[t+13],5,-1444681467),l=o(l,r,u,h,e[t+2],9,-51403784),h=o(h,l,r,u,e[t+7],14,1735328473),u=o(u,h,l,r,e[t+12],20,-1926607734),r=a(r,u,h,l,e[t+5],4,-378558),l=a(l,r,u,h,e[t+8],11,-2022574463),h=a(h,l,r,u,e[t+11],16,1839030562),u=a(u,h,l,r,e[t+14],23,-35309556),r=a(r,u,h,l,e[t+1],4,-1530992060),l=a(l,r,u,h,e[t+4],11,1272893353),h=a(h,l,r,u,e[t+7],16,-155497632),u=a(u,h,l,r,e[t+10],23,-1094730640),r=a(r,u,h,l,e[t+13],4,681279174),l=a(l,r,u,h,e[t],11,-358537222),h=a(h,l,r,u,e[t+3],16,-722521979),u=a(u,h,l,r,e[t+6],23,76029189),r=a(r,u,h,l,e[t+9],4,-640364487),l=a(l,r,u,h,e[t+12],11,-421815835),h=a(h,l,r,u,e[t+15],16,530742520),u=a(u,h,l,r,e[t+2],23,-995338651),r=f(r,u,h,l,e[t],6,-198630844),l=f(l,r,u,h,e[t+7],10,1126891415),h=f(h,l,r,u,e[t+14],15,-1416354905),u=f(u,h,l,r,e[t+5],21,-57434055),r=f(r,u,h,l,e[t+12],6,1700485571),l=f(l,r,u,h,e[t+3],10,-1894986606),h=f(h,l,r,u,e[t+10],15,-1051523),u=f(u,h,l,r,e[t+1],21,-2054922799),r=f(r,u,h,l,e[t+8],6,1873313359),l=f(l,r,u,h,e[t+15],10,-30611744),h=f(h,l,r,u,e[t+6],15,-1560198380),u=f(u,h,l,r,e[t+13],21,1309151649),r=f(r,u,h,l,e[t+4],6,-145523070),l=f(l,r,u,h,e[t+11],10,-1120210379),h=f(h,l,r,u,e[t+2],15,718787259),u=f(u,h,l,r,e[t+9],21,-343485551),r=i(r,n),u=i(u,c),h=i(h,d),l=i(l,g)}return[r,u,h,l]}(function(e){if(0===e.length)return[];const t=8*e.length,i=new Uint32Array(n(t));for(let n=0;n<t;n+=8)i[n>>5]|=(255&e[n/8])<<n%32;return i}(e),8*e.length))}},9871:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=n},5529:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},5842:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(3447))&&i.__esModule?i:{default:i};t.default=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n}},4261:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},9469:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(i)};const i=new Uint8Array(16)},7230:(e,t)=>{"use strict";function n(e,t,n,i){switch(e){case 0:return t&n^~t&i;case 1:case 3:return t^n^i;case 2:return t&n^t&i^n&i}}function i(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const s=e.length/4+2,o=Math.ceil(s/16),a=new Array(o);for(let t=0;t<o;++t){const n=new Uint32Array(16);for(let i=0;i<16;++i)n[i]=e[64*t+4*i]<<24|e[64*t+4*i+1]<<16|e[64*t+4*i+2]<<8|e[64*t+4*i+3];a[t]=n}a[o-1][14]=8*(e.length-1)/Math.pow(2,32),a[o-1][14]=Math.floor(a[o-1][14]),a[o-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<o;++e){const s=new Uint32Array(80);for(let t=0;t<16;++t)s[t]=a[e][t];for(let e=16;e<80;++e)s[e]=i(s[e-3]^s[e-8]^s[e-14]^s[e-16],1);let o=r[0],f=r[1],u=r[2],h=r[3],l=r[4];for(let e=0;e<80;++e){const r=Math.floor(e/20),a=i(o,5)+n(r,f,u,h)+l+t[r]+s[e]>>>0;l=h,h=u,u=i(f,30)>>>0,f=o,o=a}r[0]=r[0]+o>>>0,r[1]=r[1]+f>>>0,r[2]=r[2]+u>>>0,r[3]=r[3]+h>>>0,r[4]=r[4]+l>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]}},3584:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=o;var i,r=(i=n(3447))&&i.__esModule?i:{default:i};const s=[];for(let e=0;e<256;++e)s.push((e+256).toString(16).slice(1));function o(e,t=0){return(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase()}t.default=function(e,t=0){const n=o(e,t);if(!(0,r.default)(n))throw TypeError("Stringified UUID is invalid");return n}},3925:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(9469))&&i.__esModule?i:{default:i},s=n(3584);let o,a,f=0,u=0;t.default=function(e,t,n){let i=t&&n||0;const h=t||new Array(16);let l=(e=e||{}).node||o,c=void 0!==e.clockseq?e.clockseq:a;if(null==l||null==c){const t=e.random||(e.rng||r.default)();null==l&&(l=o=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==c&&(c=a=16383&(t[6]<<8|t[7]))}let d=void 0!==e.msecs?e.msecs:Date.now(),g=void 0!==e.nsecs?e.nsecs:u+1;const p=d-f+(g-u)/1e4;if(p<0&&void 0===e.clockseq&&(c=c+1&16383),(p<0||d>f)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=d,u=g,a=c,d+=122192928e5;const v=(1e4*(268435455&d)+g)%4294967296;h[i++]=v>>>24&255,h[i++]=v>>>16&255,h[i++]=v>>>8&255,h[i++]=255&v;const y=d/4294967296*1e4&268435455;h[i++]=y>>>8&255,h[i++]=255&y,h[i++]=y>>>24&15|16,h[i++]=y>>>16&255,h[i++]=c>>>8|128,h[i++]=255&c;for(let e=0;e<6;++e)h[i+e]=l[e];return t||(0,s.unsafeStringify)(h)}},2220:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(2969)),r=s(n(7809));function s(e){return e&&e.__esModule?e:{default:e}}var o=(0,i.default)("v3",48,r.default);t.default=o},2969:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,n){function i(e,i,o,a){var f;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof i&&(i=(0,s.default)(i)),16!==(null===(f=i)||void 0===f?void 0:f.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let u=new Uint8Array(16+e.length);if(u.set(i),u.set(e,i.length),u=n(u),u[6]=15&u[6]|t,u[8]=63&u[8]|128,o){a=a||0;for(let e=0;e<16;++e)o[a+e]=u[e];return o}return(0,r.unsafeStringify)(u)}try{i.name=e}catch(e){}return i.DNS=o,i.URL=a,i};var i,r=n(3584),s=(i=n(5842))&&i.__esModule?i:{default:i};const o="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=o;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=a},8015:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=o(n(9871)),r=o(n(9469)),s=n(3584);function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,n){if(i.default.randomUUID&&!t&&!e)return i.default.randomUUID();const o=(e=e||{}).random||(e.rng||r.default)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=o[e];return t}return(0,s.unsafeStringify)(o)}},197:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(2969)),r=s(n(7230));function s(e){return e&&e.__esModule?e:{default:e}}var o=(0,i.default)("v5",80,r.default);t.default=o},3447:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(4261))&&i.__esModule?i:{default:i};t.default=function(e){return"string"==typeof e&&r.default.test(e)}},923:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(3447))&&i.__esModule?i:{default:i};t.default=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={exports:{}};return e[i].call(s.exports,s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(4430),t=new e.NstrumentaBrowserClient;document.addEventListener("readystatechange",(function(){return e=void 0,n=void 0,r=function(){var e,n,i,r,s,o,a;return function(e,t){var n,i,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,i&&(r=2&s[0]?i.return:s[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,s[1])).done)return r;switch(i=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,i=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],i=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}(this,(function(f){switch(f.label){case 0:return"complete"!==document.readyState?[2]:(e=document.getElementById("outputTextArea"),t.addListener("open",(function(){var n=!1;console.log("client open"),t.addSubscription("_nstrumenta",(function(e){"health"===e.type&&(document.getElementById("health").innerText=new Date(Date.now()).toLocaleString())})),t.addSubscription("_status",(function(i){var r=i.agentId;document.getElementById("status").innerText=JSON.stringify(i),r&&!n&&(n=!0,t.addSubscription("_".concat(r,"/stdout"),(function(t){var n=(new TextDecoder).decode(t);e.textContent+="".concat(n,"\n")})))}))})),n=new URL(window.location.href).searchParams,i=n.get("wsUrl"),r=i||window.location.origin.replace("http","ws"),(s=n.get("apiKey"))&&localStorage.setItem("apiKey",s),o=localStorage.getItem("apiKey"),a=s||o,[4,t.connect({apiKey:a,wsUrl:r})]);case 1:return f.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(t,s){function o(e){try{f(r.next(e))}catch(e){s(e)}}function a(e){try{f(r.throw(e))}catch(e){s(e)}}function f(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(e){e(n)}))).then(o,a)}f((r=r.apply(e,n||[])).next())}));var e,n,i,r}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,