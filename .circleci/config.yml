version: 2.1
jobs:
  build:
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - nstrumenta-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          command: npm i
      - run:
          command: npm run build
  build-server-image:
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/server
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker
      - run: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          command: echo "export GOOGLE_PROJECT_ID=`echo $GCLOUD_SERVICE_KEY | jq -r .project_id`"
      - run: docker build --rm=false -t gcr.io/${GOOGLE_PROJECT_ID}/nst-server:${CIRCLE_SHA1}${CIRCLE_BRANCH} .
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      - run: gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run: gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/nst-server:${CIRCLE_SHA1}${CIRCLE_BRANCH}
  build-frontend:
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/cluster/frontend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - frontend-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          command: ./use_cache_or_npm_install.sh
      - run: echo $FIREBASE_CONFIG > ~/project/terraform/firebaseConfig.json
      - run:
          command: ./build.sh ${CIRCLE_BRANCH}
      - save_cache:
          key: frontend-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/frontend/node_modules'
      - save_cache:
          key: frontend-dist-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/frontend/dist'
  build-functions:
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/cluster/functions
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - functions-node_modules-{{ .Branch }}-{{ checksum "package.json"}}
      - run:
          command: ./use_cache_or_npm_install.sh
      - run:
          command: ./build.sh
      - save_cache:
          key: functions-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/functions/node_modules'
      - save_cache:
          key: functions-dist-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/functions/dist'
  run-tests:
    resource_class: large
    machine: true
    working_directory: ~/project/cluster/integration-tests/
    steps:
      - checkout:
          path: ~/project
      - run:
          command: echo 'export NSTRUMENTA_API_KEY="${NSTRUMENTA_INTEGRATION_TEST_API_KEY}"' >> "$BASH_ENV"
      - run: ./ci.sh cli
      - run: ./ci.sh nodejs-client
      - run: ./ci.sh browser-client
  build-and-push-images:
    resource_class: arm.large
    machine: true
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run: ./build-docker-images.sh

workflows:
  version: 2

  -ci:
    jobs:
      - build
      - build-frontend
      - build-functions
      - build-server-image
      - run-tests:
          requires:
            - build-server-image
      - build-and-push-images:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
