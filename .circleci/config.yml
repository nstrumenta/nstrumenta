version: 2.1
jobs:
  build:
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - nstrumenta-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          command: npm i
      - run:
          command: npm run build
  build-frontend:
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/cluster/frontend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - frontend-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          command: ./use_cache_or_npm_install.sh
      - run: echo "export FIREBASE_PROJECT_ID=`echo ${GCLOUD_SERVICE_KEY} | jq -r .project_id`" >> $BASH_ENV
      - run: node fetchFirebaseConfigJson.js && npm run build
      - run: ./build.sh
      - save_cache:
          key: frontend-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/frontend/node_modules'
      - save_cache:
          key: frontend-dist-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/frontend/dist'
  build-functions:
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/cluster/functions
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - functions-node_modules-{{ .Branch }}-{{ checksum "package.json"}}
      - run:
          command: ./use_cache_or_npm_install.sh
      - run:
          command: ./build.sh
      - save_cache:
          key: functions-node_modules-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/functions/node_modules'
      - save_cache:
          key: functions-dist-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - '~/project/cluster/functions/dist'
  run-tests:
    resource_class: large
    docker:
      - image: nstrumenta/toolchain
    working_directory: ~/project/cluster/integration-tests/
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker
      - run: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run: echo "export GOOGLE_PROJECT_ID=`cat ${HOME}/gcloud-service-key.json | jq -r .project_id`" >> $BASH_ENV
      - run: echo "export IMAGE_REPOSITORY=us-west1-docker.pkg.dev/${GOOGLE_PROJECT_ID}/server" >> $BASH_ENV
      - run: echo "export IMAGE_VERSION_TAG=${CIRCLE_SHA1}${CIRCLE_BRANCH}" >> $BASH_ENV
      - run: echo "export IMAGE=${IMAGE_REPOSITORY}/server:${IMAGE_VERSION_TAG}" >> $BASH_ENV
      - run: echo "export TEST_SERVER=test-server-${CIRCLE_SHA1}" >> $BASH_ENV
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      - run: gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: deploy test-server
          command: >
            gcloud run deploy ${TEST_SERVER}
            --image=${IMAGE} 
            --port=5999 
            --allow-unauthenticated
            --region=us-west1
            --set-secrets=GCLOUD_SERVICE_KEY=GCLOUD_SERVICE_KEY:latest
            --set-env-vars "NST_AGENT_TYPE=ci"
            --set-env-vars "IMAGE_REPOSITORY=${IMAGE_REPOSITORY}"
            --set-env-vars "IMAGE_VERSION_TAG=${IMAGE_VERSION_TAG}"
      - run:
          name: get API_URL from test server
          command: >
            echo 'export API_URL=`gcloud run services describe --region=us-west1 ${TEST_SERVER} --format=json | jq -r .status.address.url`'
            >> $BASH_ENV
      - run:
          name: make api key with test server url
          command: >
            echo 'export NSTRUMENTA_API_KEY=`node changeApiKeyUrl ${NSTRUMENTA_INTEGRATION_TEST_API_KEY} ${API_URL}`' >> "$BASH_ENV"
      - run: ./ci.sh cli
      - run: ./ci.sh nodejs-client
      - run: ./ci.sh browser-client
      - run:
          name: delete test-server
          command: >
            gcloud run services delete --region=us-west1 ${TEST_SERVER}
          when: always
  build-ci-images:
    resource_class: large
    machine:
      image: ubuntu-2204:2023.07.2
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run: echo "export GOOGLE_PROJECT_ID=`cat ${HOME}/gcloud-service-key.json | jq -r .project_id`" >> $BASH_ENV
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      - run: gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run: gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us-west1-docker.pkg.dev
      - run: echo "export IMAGE_REPOSITORY=us-west1-docker.pkg.dev/${GOOGLE_PROJECT_ID}/server" >> $BASH_ENV
      - run: echo "export IMAGE_VERSION_TAG=${CIRCLE_SHA1}${CIRCLE_BRANCH}" >> $BASH_ENV
      - run: ./build-ci-images.sh
  build-and-push-images:
    resource_class: arm.large
    machine:
      image: ubuntu-2204:2023.07.2
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run: ./build-docker-images.sh

workflows:
  -ci:
    jobs:
      - build
      - build-frontend
      - build-functions
      - build-ci-images
      - run-tests:
          requires:
            - build-ci-images
      - build-and-push-images:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
