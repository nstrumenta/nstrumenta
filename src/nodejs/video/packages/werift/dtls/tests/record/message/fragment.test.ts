import { FragmentedHandshake } from "../../../src/record/message/fragment";
import { HandshakeType } from "../../../src/handshake/const";
import { ClientHello } from "../../../src/handshake/message/client/hello";

test("record/message/fragment", () => {
  const raw = Buffer.from([
    0x01,
    0x00,
    0x00,
    0x29,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x29,
    0xfe,
    0xfd,
    0xb6,
    0x2f,
    0xce,
    0x5c,
    0x42,
    0x54,
    0xff,
    0x86,
    0xe1,
    0x24,
    0x41,
    0x91,
    0x42,
    0x62,
    0x15,
    0xad,
    0x16,
    0xc9,
    0x15,
    0x8d,
    0x95,
    0x71,
    0x8a,
    0xbb,
    0x22,
    0xd7,
    0x47,
    0xec,
    0xd8,
    0x3d,
    0xdc,
    0x4b,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
  ]);
  const c = FragmentedHandshake.deSerialize(raw);
  expect(raw).toEqual(c.serialize());
  expect(c.length).toBe(0x29);
  expect(c.fragment_length).toBe(0x29);
  expect(c.msg_type).toBe(HandshakeType.client_hello);
  const message = ClientHello.deSerialize(c.fragment);
  expect(message.clientVersion).toEqual({ major: 0xfe, minor: 0xfd });
  expect(message.random).toEqual({
    gmt_unix_time: 3056586332,
    random_bytes: Buffer.from([
      0x42,
      0x54,
      0xff,
      0x86,
      0xe1,
      0x24,
      0x41,
      0x91,
      0x42,
      0x62,
      0x15,
      0xad,
      0x16,
      0xc9,
      0x15,
      0x8d,
      0x95,
      0x71,
      0x8a,
      0xbb,
      0x22,
      0xd7,
      0x47,
      0xec,
      0xd8,
      0x3d,
      0xdc,
      0x4b,
    ]),
  });
});
